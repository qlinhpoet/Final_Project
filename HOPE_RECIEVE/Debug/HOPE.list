
HOPE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e58  08000e60  00010e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e58  08000e58  00010e60  2**0
                  CONTENTS
  4 .ARM          00000000  08000e58  08000e58  00010e60  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e58  08000e60  00010e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e58  08000e58  00010e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e5c  08000e5c  00010e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010e60  2**0
                  CONTENTS
 10 .bss          00000064  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000064  20000064  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010e60  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002ce3  00000000  00000000  00010e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007d4  00000000  00000000  00013b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  00014348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c8  00000000  00000000  00014568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002668  00000000  00000000  00014730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002155  00000000  00000000  00016d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a39d  00000000  00000000  00018eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002328a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007b0  00000000  00000000  000232dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000e40 	.word	0x08000e40

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000e40 	.word	0x08000e40

080001e8 <CAN_GetRxMessage>:
	}

	return RetVal;
}
Std_StatusReturnType CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	60f8      	str	r0, [r7, #12]
 80001f0:	60b9      	str	r1, [r7, #8]
 80001f2:	607a      	str	r2, [r7, #4]
 80001f4:	603b      	str	r3, [r7, #0]
	Std_StatusReturnType RetVal = E_OK;
 80001f6:	2300      	movs	r3, #0
 80001f8:	75fb      	strb	r3, [r7, #23]
	if(STM32F4_CANRecive(hcan,RxFifo,pHeader,aData) != E_OK)
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	68b9      	ldr	r1, [r7, #8]
 8000200:	68f8      	ldr	r0, [r7, #12]
 8000202:	f000 fa29 	bl	8000658 <STM32F4_CANRecive>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <CAN_GetRxMessage+0x28>
	{
		RetVal = E_NOT_OK;
 800020c:	2301      	movs	r3, #1
 800020e:	75fb      	strb	r3, [r7, #23]
	}

	return RetVal;
 8000210:	7dfb      	ldrb	r3, [r7, #23]
}
 8000212:	4618      	mov	r0, r3
 8000214:	3718      	adds	r7, #24
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}

0800021a <CAN_Init>:

Std_StatusReturnType CAN_Init(CAN_HandleTypeDef *hcan)
{
 800021a:	b580      	push	{r7, lr}
 800021c:	b084      	sub	sp, #16
 800021e:	af00      	add	r7, sp, #0
 8000220:	6078      	str	r0, [r7, #4]
	Std_StatusReturnType RetVal = E_OK;
 8000222:	2300      	movs	r3, #0
 8000224:	73fb      	strb	r3, [r7, #15]
	if(STM32F4_CANInit(hcan) != E_OK)
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 fa5c 	bl	80006e4 <STM32F4_CANInit>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <CAN_Init+0x1c>
	{
		RetVal = E_NOT_OK;
 8000232:	2301      	movs	r3, #1
 8000234:	73fb      	strb	r3, [r7, #15]
	}

	return RetVal;
 8000236:	7bfb      	ldrb	r3, [r7, #15]
}
 8000238:	4618      	mov	r0, r3
 800023a:	3710      	adds	r7, #16
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <CAN_Start>:
Std_StatusReturnType CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	Std_StatusReturnType RetVal = E_OK;
 8000248:	2300      	movs	r3, #0
 800024a:	73fb      	strb	r3, [r7, #15]
	if(STM32F4_CANStart(hcan) != E_OK)
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f000 fa86 	bl	800075e <STM32F4_CANStart>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <CAN_Start+0x1c>
	{
		RetVal = E_NOT_OK;
 8000258:	2301      	movs	r3, #1
 800025a:	73fb      	strb	r3, [r7, #15]
	}

	return RetVal;
 800025c:	7bfb      	ldrb	r3, [r7, #15]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}

08000266 <CAN_ConfigFilter>:
Std_StatusReturnType CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000266:	b580      	push	{r7, lr}
 8000268:	b084      	sub	sp, #16
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
	Std_StatusReturnType RetVal = E_OK;
 8000270:	2300      	movs	r3, #0
 8000272:	73fb      	strb	r3, [r7, #15]
	if(STM32F4_CANConfigFilter(hcan,sFilterConfig) != E_OK)
 8000274:	6839      	ldr	r1, [r7, #0]
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f000 fa86 	bl	8000788 <STM32F4_CANConfigFilter>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <CAN_ConfigFilter+0x20>
	{
		RetVal = E_NOT_OK;
 8000282:	2301      	movs	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]
	}

	return RetVal;
 8000286:	7bfb      	ldrb	r3, [r7, #15]
}
 8000288:	4618      	mov	r0, r3
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <CAN_StatusMailBox>:

	return RetVal;
}

uint8_t CAN_StatusMailBox()
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 8000296:	2301      	movs	r3, #1
 8000298:	71fb      	strb	r3, [r7, #7]
    /* Check that the Rx FIFO 0 is not empty */
    if ((CAN1->RF0R & (1<<4)) == 0U)
 800029a:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <CAN_StatusMailBox+0x28>)
 800029c:	68db      	ldr	r3, [r3, #12]
 800029e:	f003 0310 	and.w	r3, r3, #16
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d101      	bne.n	80002aa <CAN_StatusMailBox+0x1a>
    {
		RetVal = 0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	71fb      	strb	r3, [r7, #7]
    }
	return RetVal;
 80002aa:	79fb      	ldrb	r3, [r7, #7]
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	40006400 	.word	0x40006400

080002bc <CAN_GetID>:

uint16_t CAN_GetID()
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
	uint16_t RetVal = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	80fb      	strh	r3, [r7, #6]
    /* get ID*/
    RetVal = ((CAN_RI0R_STID & CAN1->sFIFOMailBox[0].RIR) >> 21U);
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <CAN_GetID+0x28>)
 80002c8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80002cc:	0d5b      	lsrs	r3, r3, #21
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80002d4:	80fb      	strh	r3, [r7, #6]

	return RetVal;
 80002d6:	88fb      	ldrh	r3, [r7, #6]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40006400 	.word	0x40006400

080002e8 <CAN_GetDataLength>:

uint8_t CAN_GetDataLength()
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	71fb      	strb	r3, [r7, #7]
    /* get ID*/
    RetVal = ((CAN_RDT0R_DLC & CAN1->sFIFOMailBox[0].RDTR) >> 0);
 80002f2:	4b07      	ldr	r3, [pc, #28]	; (8000310 <CAN_GetDataLength+0x28>)
 80002f4:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	71fb      	strb	r3, [r7, #7]

	return RetVal;
 8000300:	79fb      	ldrb	r3, [r7, #7]
}
 8000302:	4618      	mov	r0, r3
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40006400 	.word	0x40006400

08000314 <CAN_ReadData>:

uint8_t CAN_ReadData(uint8_t cData[])
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 800031c:	2301      	movs	r3, #1
 800031e:	73fb      	strb	r3, [r7, #15]
    /* Get the data */
    cData[0] = (uint8_t)((CAN_RDL0R_DATA0 & CAN1->sFIFOMailBox[0].RDLR) >> 0U );
 8000320:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <CAN_ReadData+0x94>)
 8000322:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000326:	b2da      	uxtb	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	701a      	strb	r2, [r3, #0]
    cData[1] = (uint8_t)((CAN_RDL0R_DATA1 & CAN1->sFIFOMailBox[0].RDLR) >> 8U );
 800032c:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <CAN_ReadData+0x94>)
 800032e:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000332:	0a1a      	lsrs	r2, r3, #8
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3301      	adds	r3, #1
 8000338:	b2d2      	uxtb	r2, r2
 800033a:	701a      	strb	r2, [r3, #0]
    cData[2] = (uint8_t)((CAN_RDL0R_DATA2 & CAN1->sFIFOMailBox[0].RDLR) >> 16U);
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <CAN_ReadData+0x94>)
 800033e:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000342:	0c1a      	lsrs	r2, r3, #16
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3302      	adds	r3, #2
 8000348:	b2d2      	uxtb	r2, r2
 800034a:	701a      	strb	r2, [r3, #0]
    cData[3] = (uint8_t)((CAN_RDL0R_DATA3 & CAN1->sFIFOMailBox[0].RDLR) >> 24U);
 800034c:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <CAN_ReadData+0x94>)
 800034e:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000352:	0e1a      	lsrs	r2, r3, #24
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3303      	adds	r3, #3
 8000358:	b2d2      	uxtb	r2, r2
 800035a:	701a      	strb	r2, [r3, #0]
    cData[4] = (uint8_t)((CAN_RDH0R_DATA4 & CAN1->sFIFOMailBox[0].RDHR) >> 0U );
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <CAN_ReadData+0x94>)
 800035e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	3304      	adds	r3, #4
 8000366:	b2d2      	uxtb	r2, r2
 8000368:	701a      	strb	r2, [r3, #0]
    cData[5] = (uint8_t)((CAN_RDH0R_DATA5 & CAN1->sFIFOMailBox[0].RDHR) >> 8U );
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <CAN_ReadData+0x94>)
 800036c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000370:	0a1a      	lsrs	r2, r3, #8
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3305      	adds	r3, #5
 8000376:	b2d2      	uxtb	r2, r2
 8000378:	701a      	strb	r2, [r3, #0]
    cData[6] = (uint8_t)((CAN_RDH0R_DATA6 & CAN1->sFIFOMailBox[0].RDHR) >> 16U);
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <CAN_ReadData+0x94>)
 800037c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000380:	0c1a      	lsrs	r2, r3, #16
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3306      	adds	r3, #6
 8000386:	b2d2      	uxtb	r2, r2
 8000388:	701a      	strb	r2, [r3, #0]
    cData[7] = (uint8_t)((CAN_RDH0R_DATA7 & CAN1->sFIFOMailBox[0].RDHR) >> 24U);
 800038a:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <CAN_ReadData+0x94>)
 800038c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000390:	0e1a      	lsrs	r2, r3, #24
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3307      	adds	r3, #7
 8000396:	b2d2      	uxtb	r2, r2
 8000398:	701a      	strb	r2, [r3, #0]

    return RetVal;
 800039a:	7bfb      	ldrb	r3, [r7, #15]
}
 800039c:	4618      	mov	r0, r3
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	40006400 	.word	0x40006400

080003ac <CAN_Release>:

uint8_t CAN_Release()
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 80003b2:	2301      	movs	r3, #1
 80003b4:	71fb      	strb	r3, [r7, #7]
	/*set bit release FIFO0 output mailbox*/
	CAN1->RF0R |= (1<<5);
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <CAN_Release+0x24>)
 80003b8:	68db      	ldr	r3, [r3, #12]
 80003ba:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <CAN_Release+0x24>)
 80003bc:	f043 0320 	orr.w	r3, r3, #32
 80003c0:	60d3      	str	r3, [r2, #12]

	return RetVal;
 80003c2:	79fb      	ldrb	r3, [r7, #7]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	40006400 	.word	0x40006400

080003d4 <CAN_ExitSleepMode>:

uint8_t CAN_ExitSleepMode()
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 80003da:	2301      	movs	r3, #1
 80003dc:	71fb      	strb	r3, [r7, #7]
	/* Exit from sleep mode */
  	CAN1->MCR &= ~((uint32_t)(1<<1));
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <CAN_ExitSleepMode+0x24>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a05      	ldr	r2, [pc, #20]	; (80003f8 <CAN_ExitSleepMode+0x24>)
 80003e4:	f023 0302 	bic.w	r3, r3, #2
 80003e8:	6013      	str	r3, [r2, #0]

	return RetVal;
 80003ea:	79fb      	ldrb	r3, [r7, #7]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40006400 	.word	0x40006400

080003fc <CAN_RXTimeTrigger>:

uint8_t CAN_RXTimeTrigger(uint8_t Mode)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 8000406:	2301      	movs	r3, #1
 8000408:	73fb      	strb	r3, [r7, #15]
	if(Mode == 1)
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d106      	bne.n	800041e <CAN_RXTimeTrigger+0x22>
	{
		CAN1->MCR |= (1<<7);
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <CAN_RXTimeTrigger+0x44>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <CAN_RXTimeTrigger+0x44>)
 8000416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800041a:	6013      	str	r3, [r2, #0]
 800041c:	e008      	b.n	8000430 <CAN_RXTimeTrigger+0x34>
	}
	else if(Mode == 0)
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d105      	bne.n	8000430 <CAN_RXTimeTrigger+0x34>
	{
		CAN1->MCR &= ~(1<<7);
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <CAN_RXTimeTrigger+0x44>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a05      	ldr	r2, [pc, #20]	; (8000440 <CAN_RXTimeTrigger+0x44>)
 800042a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800042e:	6013      	str	r3, [r2, #0]
	}

	return RetVal;
 8000430:	7bfb      	ldrb	r3, [r7, #15]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40006400 	.word	0x40006400

08000444 <CAN_AutoRetransmit>:

uint8_t CAN_AutoRetransmit()
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 800044a:	2301      	movs	r3, #1
 800044c:	71fb      	strb	r3, [r7, #7]
	/* Set the automatic retransmission */
	CAN1->MCR |= (1<<4);
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <CAN_AutoRetransmit+0x30>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a08      	ldr	r2, [pc, #32]	; (8000474 <CAN_AutoRetransmit+0x30>)
 8000454:	f043 0310 	orr.w	r3, r3, #16
 8000458:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= (1<<16);
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <CAN_AutoRetransmit+0x30>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a05      	ldr	r2, [pc, #20]	; (8000474 <CAN_AutoRetransmit+0x30>)
 8000460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000464:	6013      	str	r3, [r2, #0]

	return RetVal;
 8000466:	79fb      	ldrb	r3, [r7, #7]
}
 8000468:	4618      	mov	r0, r3
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	40006400 	.word	0x40006400

08000478 <CAN_LockFIFOMode>:

uint8_t CAN_LockFIFOMode()
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 800047e:	2301      	movs	r3, #1
 8000480:	71fb      	strb	r3, [r7, #7]
	/* Receive FIFO locked against overrun */
	CAN1->MCR &= ~(1<<3);
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <CAN_LockFIFOMode+0x24>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <CAN_LockFIFOMode+0x24>)
 8000488:	f023 0308 	bic.w	r3, r3, #8
 800048c:	6013      	str	r3, [r2, #0]

	return RetVal;
 800048e:	79fb      	ldrb	r3, [r7, #7]
}
 8000490:	4618      	mov	r0, r3
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	40006400 	.word	0x40006400

080004a0 <CAN_SetBitTime>:

uint8_t CAN_SetBitTime(CAN_HandleTypeDef *hcan)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	73fb      	strb	r3, [r7, #15]
	/* Receive FIFO locked against overrun */
	CAN1->BTR = (uint32_t)hcan->Init.Mode           |
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	685a      	ldr	r2, [r3, #4]
                                    hcan->Init.SyncJumpWidth  |
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	689b      	ldr	r3, [r3, #8]
	CAN1->BTR = (uint32_t)hcan->Init.Mode           |
 80004b4:	431a      	orrs	r2, r3
                                    hcan->Init.TimeSeg1       |
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	68db      	ldr	r3, [r3, #12]
                                    hcan->Init.SyncJumpWidth  |
 80004ba:	431a      	orrs	r2, r3
                                    hcan->Init.TimeSeg2       |
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	691b      	ldr	r3, [r3, #16]
                                    hcan->Init.TimeSeg1       |
 80004c0:	431a      	orrs	r2, r3
                                    (hcan->Init.Prescaler - 1U);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	3b01      	subs	r3, #1
	CAN1->BTR = (uint32_t)hcan->Init.Mode           |
 80004c8:	4904      	ldr	r1, [pc, #16]	; (80004dc <CAN_SetBitTime+0x3c>)
                                    hcan->Init.TimeSeg2       |
 80004ca:	4313      	orrs	r3, r2
	CAN1->BTR = (uint32_t)hcan->Init.Mode           |
 80004cc:	61cb      	str	r3, [r1, #28]

	return RetVal;
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	40006400 	.word	0x40006400

080004e0 <CAN_InitModeFilter>:
	return RetVal;

}

uint8_t CAN_InitModeFilter(uint8_t Mode)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 80004ea:	2301      	movs	r3, #1
 80004ec:	73fb      	strb	r3, [r7, #15]
	if(Mode == 1)
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d108      	bne.n	8000506 <CAN_InitModeFilter+0x26>
	{
	    /* Initialisation mode for the filter */
    	CAN1->FMR |= 1U;
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <CAN_InitModeFilter+0x4c>)
 80004f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80004fa:	4a0c      	ldr	r2, [pc, #48]	; (800052c <CAN_InitModeFilter+0x4c>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 8000504:	e00a      	b.n	800051c <CAN_InitModeFilter+0x3c>
	}
	else if(Mode ==0)
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d107      	bne.n	800051c <CAN_InitModeFilter+0x3c>
	{
		/* Leave the initialisation mode for the filter */
        CAN1->FMR &= ~1U;
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <CAN_InitModeFilter+0x4c>)
 800050e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000512:	4a06      	ldr	r2, [pc, #24]	; (800052c <CAN_InitModeFilter+0x4c>)
 8000514:	f023 0301 	bic.w	r3, r3, #1
 8000518:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	}

	return RetVal;
 800051c:	7bfb      	ldrb	r3, [r7, #15]

}
 800051e:	4618      	mov	r0, r3
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40006400 	.word	0x40006400

08000530 <CAN_DeInitFilter>:

uint8_t CAN_DeInitFilter(uint32_t bank)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 8000538:	2301      	movs	r3, #1
 800053a:	73fb      	strb	r3, [r7, #15]
	CAN1->FA1R &= ~(bank);
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <CAN_DeInitFilter+0x2c>)
 800053e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	43db      	mvns	r3, r3
 8000546:	4905      	ldr	r1, [pc, #20]	; (800055c <CAN_DeInitFilter+0x2c>)
 8000548:	4013      	ands	r3, r2
 800054a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	return RetVal;
 800054e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	40006400 	.word	0x40006400

08000560 <CAN_FilterScale>:
uint8_t CAN_FilterScale(uint32_t bank,CAN_FilterTypeDef *sFilterConfig)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	uint8_t RetVal = 1;
 800056a:	2301      	movs	r3, #1
 800056c:	73fb      	strb	r3, [r7, #15]
	/* 32-bit scale for the filter */
    CAN1->FS1R |= bank;
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <CAN_FilterScale+0x64>)
 8000570:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000574:	4913      	ldr	r1, [pc, #76]	; (80005c4 <CAN_FilterScale+0x64>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4313      	orrs	r3, r2
 800057a:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR1 =
    ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	0419      	lsls	r1, r3, #16
    (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	b29a      	uxth	r2, r3
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800058a:	480e      	ldr	r0, [pc, #56]	; (80005c4 <CAN_FilterScale+0x64>)
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	695b      	ldr	r3, [r3, #20]
    ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000590:	430a      	orrs	r2, r1
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000592:	3348      	adds	r3, #72	; 0x48
 8000594:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR2 =
    ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	0419      	lsls	r1, r3, #16
    (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	b29a      	uxth	r2, r3
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005a4:	4807      	ldr	r0, [pc, #28]	; (80005c4 <CAN_FilterScale+0x64>)
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	695b      	ldr	r3, [r3, #20]
    ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005aa:	430a      	orrs	r2, r1
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005ac:	3348      	adds	r3, #72	; 0x48
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	4403      	add	r3, r0
 80005b2:	605a      	str	r2, [r3, #4]

	return RetVal;
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40006400 	.word	0x40006400

080005c8 <CAN_FilterMode>:

uint8_t CAN_FilterMode(uint32_t bank)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	73fb      	strb	r3, [r7, #15]
    /* Id/Mask mode for the filter*/
	CAN1->FM1R &= ~(bank);
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <CAN_FilterMode+0x2c>)
 80005d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	43db      	mvns	r3, r3
 80005de:	4905      	ldr	r1, [pc, #20]	; (80005f4 <CAN_FilterMode+0x2c>)
 80005e0:	4013      	ands	r3, r2
 80005e2:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204

	return RetVal;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	40006400 	.word	0x40006400

080005f8 <CAN_FilterFIFOAs>:

uint8_t CAN_FilterFIFOAs(uint32_t bank)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 8000600:	2301      	movs	r3, #1
 8000602:	73fb      	strb	r3, [r7, #15]
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(bank);
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <CAN_FilterFIFOAs+0x2c>)
 8000606:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	43db      	mvns	r3, r3
 800060e:	4905      	ldr	r1, [pc, #20]	; (8000624 <CAN_FilterFIFOAs+0x2c>)
 8000610:	4013      	ands	r3, r2
 8000612:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214

	return RetVal;
 8000616:	7bfb      	ldrb	r3, [r7, #15]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40006400 	.word	0x40006400

08000628 <CAN_InitFilter>:

uint8_t CAN_InitFilter(uint32_t bank)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	73fb      	strb	r3, [r7, #15]
    /* FIFO 0 assignation for the filter */
    CAN1->FA1R |= bank;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <CAN_InitFilter+0x2c>)
 8000636:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800063a:	4906      	ldr	r1, [pc, #24]	; (8000654 <CAN_InitFilter+0x2c>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4313      	orrs	r3, r2
 8000640:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	return RetVal;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40006400 	.word	0x40006400

08000658 <STM32F4_CANRecive>:
}


/*function recive data*/
Std_StatusReturnType STM32F4_CANRecive(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	603b      	str	r3, [r7, #0]
	HAL_CAN_StateTypeDef state = HAL_CAN_STATE_READY;
 8000666:	2301      	movs	r3, #1
 8000668:	75fb      	strb	r3, [r7, #23]

	if ((state == HAL_CAN_STATE_READY) ||(state == HAL_CAN_STATE_LISTENING))
 800066a:	7dfb      	ldrb	r3, [r7, #23]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d002      	beq.n	8000676 <STM32F4_CANRecive+0x1e>
 8000670:	7dfb      	ldrb	r3, [r7, #23]
 8000672:	2b02      	cmp	r3, #2
 8000674:	d12e      	bne.n	80006d4 <STM32F4_CANRecive+0x7c>
   {
  	/* Check the Rx FIFO */
    	if (RxFifo == 0) /* Rx element is assigned to Rx FIFO 0 */
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d106      	bne.n	800068a <STM32F4_CANRecive+0x32>
    	{
    	  /* Check that the Rx FIFO 0 is not empty */
     	if(CAN_StatusMailBox() == 0U)
 800067c:	f7ff fe08 	bl	8000290 <CAN_StatusMailBox>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d101      	bne.n	800068a <STM32F4_CANRecive+0x32>
     	{
       	 return E_NOT_OK;
 8000686:	2301      	movs	r3, #1
 8000688:	e028      	b.n	80006dc <STM32F4_CANRecive+0x84>
      	}
    	}
    	/* Get the header */
    	pHeader->IDE = 0U;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
    	if (pHeader->IDE == 0U)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d105      	bne.n	80006a4 <STM32F4_CANRecive+0x4c>
    	{
     	pHeader->StdId = CAN_GetID();
 8000698:	f7ff fe10 	bl	80002bc <CAN_GetID>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	601a      	str	r2, [r3, #0]
    	}
    	pHeader->DLC = CAN_GetDataLength();
 80006a4:	f7ff fe20 	bl	80002e8 <CAN_GetDataLength>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	611a      	str	r2, [r3, #16]

		/* Get the data */
		if(CAN_ReadData(aData) != 1)
 80006b0:	6838      	ldr	r0, [r7, #0]
 80006b2:	f7ff fe2f 	bl	8000314 <CAN_ReadData>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d001      	beq.n	80006c0 <STM32F4_CANRecive+0x68>
		{
			return E_NOT_OK;
 80006bc:	2301      	movs	r3, #1
 80006be:	e00d      	b.n	80006dc <STM32F4_CANRecive+0x84>
		}
		/* Release the FIFO */
    	if (RxFifo == 0) /* Rx element is assigned to Rx FIFO 0 */
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d108      	bne.n	80006d8 <STM32F4_CANRecive+0x80>
    	{
     	 /* Release RX FIFO 0 */
		if(CAN_Release() != 1)
 80006c6:	f7ff fe71 	bl	80003ac <CAN_Release>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d003      	beq.n	80006d8 <STM32F4_CANRecive+0x80>
		{
			return E_NOT_OK;
 80006d0:	2301      	movs	r3, #1
 80006d2:	e003      	b.n	80006dc <STM32F4_CANRecive+0x84>
		}
    	}
	}
    else
    {
    	return E_NOT_OK;
 80006d4:	2301      	movs	r3, #1
 80006d6:	e001      	b.n	80006dc <STM32F4_CANRecive+0x84>
    	if (RxFifo == 0) /* Rx element is assigned to Rx FIFO 0 */
 80006d8:	bf00      	nop
	}

	return E_OK;
 80006da:	2300      	movs	r3, #0

}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <STM32F4_CANInit>:


Std_StatusReturnType STM32F4_CANInit(CAN_HandleTypeDef *hcan)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if(CAN_ExitSleepMode() != 1)
 80006ec:	f7ff fe72 	bl	80003d4 <CAN_ExitSleepMode>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d001      	beq.n	80006fa <STM32F4_CANInit+0x16>
	{
		return E_NOT_OK;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e02d      	b.n	8000756 <STM32F4_CANInit+0x72>
	}

	/* Set the time triggered communication mode */
  	if (hcan->Init.TimeTriggeredMode == 1U)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	7d1b      	ldrb	r3, [r3, #20]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d107      	bne.n	8000712 <STM32F4_CANInit+0x2e>
  	{
	    if(CAN_RXTimeTrigger(1U) != 1)
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff fe7a 	bl	80003fc <CAN_RXTimeTrigger>
 8000708:	4603      	mov	r3, r0
 800070a:	2b01      	cmp	r3, #1
 800070c:	d009      	beq.n	8000722 <STM32F4_CANInit+0x3e>
	    {
	    	return E_NOT_OK;
 800070e:	2301      	movs	r3, #1
 8000710:	e021      	b.n	8000756 <STM32F4_CANInit+0x72>
		}
  	}
 	else
 	{
		if(CAN_RXTimeTrigger(0U) != 1)
 8000712:	2000      	movs	r0, #0
 8000714:	f7ff fe72 	bl	80003fc <CAN_RXTimeTrigger>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d001      	beq.n	8000722 <STM32F4_CANInit+0x3e>
	    {
	    	return E_NOT_OK;
 800071e:	2301      	movs	r3, #1
 8000720:	e019      	b.n	8000756 <STM32F4_CANInit+0x72>
		}
  	}
  	/* Set the automatic retransmission */
   if (CAN_AutoRetransmit() != 1)
 8000722:	f7ff fe8f 	bl	8000444 <CAN_AutoRetransmit>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	d001      	beq.n	8000730 <STM32F4_CANInit+0x4c>
   {
   		return E_NOT_OK;
 800072c:	2301      	movs	r3, #1
 800072e:	e012      	b.n	8000756 <STM32F4_CANInit+0x72>
   }
     /* Set the receive FIFO locked mode */
   if (CAN_LockFIFOMode() != 1)
 8000730:	f7ff fea2 	bl	8000478 <CAN_LockFIFOMode>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d001      	beq.n	800073e <STM32F4_CANInit+0x5a>
   {
  		return E_NOT_OK;
 800073a:	2301      	movs	r3, #1
 800073c:	e00b      	b.n	8000756 <STM32F4_CANInit+0x72>
   }
   /* Set the bit timing register */
    if (CAN_SetBitTime(hcan) != 1)
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff feae 	bl	80004a0 <CAN_SetBitTime>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d001      	beq.n	800074e <STM32F4_CANInit+0x6a>
    {
  		return E_NOT_OK;
 800074a:	2301      	movs	r3, #1
 800074c:	e003      	b.n	8000756 <STM32F4_CANInit+0x72>
    }

    /* Initialize the CAN state */
     hcan->State = HAL_CAN_STATE_READY;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2201      	movs	r2, #1
 8000752:	771a      	strb	r2, [r3, #28]

    /* Return function status */
    return E_OK;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <STM32F4_CANStart>:

Std_StatusReturnType STM32F4_CANStart(CAN_HandleTypeDef *hcan)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
	if (hcan->State == HAL_CAN_STATE_READY)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7f1b      	ldrb	r3, [r3, #28]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b01      	cmp	r3, #1
 800076e:	d104      	bne.n	800077a <STM32F4_CANStart+0x1c>
    {
    	/* Change CAN peripheral state */
    	hcan->State = HAL_CAN_STATE_LISTENING;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2202      	movs	r2, #2
 8000774:	771a      	strb	r2, [r3, #28]
    	return E_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	e000      	b.n	800077c <STM32F4_CANStart+0x1e>
    	/* Return function status */
   		 return E_OK;
   	}
   	else
   	{
        return E_NOT_OK;
 800077a:	2301      	movs	r3, #1

	}
}
 800077c:	4618      	mov	r0, r3
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <STM32F4_CANConfigFilter>:

Std_StatusReturnType STM32F4_CANConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
	uint32_t filternbrbitpos;

  	    //HAL_CAN_StateTypeDef state = hcan->State;
		/* Initialisation mode for the filter */
		if(CAN_InitModeFilter(1U) != 1)
 8000792:	2001      	movs	r0, #1
 8000794:	f7ff fea4 	bl	80004e0 <CAN_InitModeFilter>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d001      	beq.n	80007a2 <STM32F4_CANConfigFilter+0x1a>
		{
			return E_NOT_OK;
 800079e:	2301      	movs	r3, #1
 80007a0:	e039      	b.n	8000816 <STM32F4_CANConfigFilter+0x8e>
		}
    	filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f003 031f 	and.w	r3, r3, #31
 80007aa:	2201      	movs	r2, #1
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	60fb      	str	r3, [r7, #12]
        /* Filter Deactivation */
		if(CAN_DeInitFilter(filternbrbitpos) != 1)
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	f7ff febc 	bl	8000530 <CAN_DeInitFilter>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d001      	beq.n	80007c2 <STM32F4_CANConfigFilter+0x3a>
		{
			return E_NOT_OK;
 80007be:	2301      	movs	r3, #1
 80007c0:	e029      	b.n	8000816 <STM32F4_CANConfigFilter+0x8e>
		}

		 /* Filter Scale */
  		if (CAN_FilterScale(filternbrbitpos, sFilterConfig) != 1)
 80007c2:	6839      	ldr	r1, [r7, #0]
 80007c4:	68f8      	ldr	r0, [r7, #12]
 80007c6:	f7ff fecb 	bl	8000560 <CAN_FilterScale>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d001      	beq.n	80007d4 <STM32F4_CANConfigFilter+0x4c>
  		{
    			return E_NOT_OK;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e020      	b.n	8000816 <STM32F4_CANConfigFilter+0x8e>
		}
		 /* Filter Mode */
    	if (CAN_FilterMode(filternbrbitpos) != 1)
 80007d4:	68f8      	ldr	r0, [r7, #12]
 80007d6:	f7ff fef7 	bl	80005c8 <CAN_FilterMode>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d001      	beq.n	80007e4 <STM32F4_CANConfigFilter+0x5c>
    	{
			return E_NOT_OK;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e018      	b.n	8000816 <STM32F4_CANConfigFilter+0x8e>
		}
		/* Filter FIFO assignment */
    	if (CAN_FilterFIFOAs(filternbrbitpos) != 1)
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f7ff ff07 	bl	80005f8 <CAN_FilterFIFOAs>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d001      	beq.n	80007f4 <STM32F4_CANConfigFilter+0x6c>
    	{
			return E_NOT_OK;
 80007f0:	2301      	movs	r3, #1
 80007f2:	e010      	b.n	8000816 <STM32F4_CANConfigFilter+0x8e>
   		}
  	  /* Filter activation */
   		 if (CAN_InitFilter(filternbrbitpos) != 1)
 80007f4:	68f8      	ldr	r0, [r7, #12]
 80007f6:	f7ff ff17 	bl	8000628 <CAN_InitFilter>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d001      	beq.n	8000804 <STM32F4_CANConfigFilter+0x7c>
   		{
			return E_NOT_OK;
 8000800:	2301      	movs	r3, #1
 8000802:	e008      	b.n	8000816 <STM32F4_CANConfigFilter+0x8e>
  		}

    	/* Leave the initialisation mode for the filter */
    	if(CAN_InitModeFilter(0U) != 1)
 8000804:	2000      	movs	r0, #0
 8000806:	f7ff fe6b 	bl	80004e0 <CAN_InitModeFilter>
 800080a:	4603      	mov	r3, r0
 800080c:	2b01      	cmp	r3, #1
 800080e:	d001      	beq.n	8000814 <STM32F4_CANConfigFilter+0x8c>
		{
			return E_NOT_OK;
 8000810:	2301      	movs	r3, #1
 8000812:	e000      	b.n	8000816 <STM32F4_CANConfigFilter+0x8e>
		}
   		/* Return function status */
   		 return E_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <main>:
uint8_t RxData[8];

uint32_t TxMailbox;
uint32_t RxFifo;
int main()
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	  SET_BIT(RCC->APB1ENR, (1<<25));
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <main+0x64>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <main+0x64>)
 800082c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
	  /* Delay after an RCC peripheral clock enabling */
	  uint32_t tmpreg = READ_BIT(RCC->APB1ENR, (1<<25));
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <main+0x64>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800083a:	607b      	str	r3, [r7, #4]
	  Systick_Delay_ms(200);
 800083c:	20c8      	movs	r0, #200	; 0xc8
 800083e:	f000 f857 	bl	80008f0 <Systick_Delay_ms>
      SET_BIT(RCC->APB1ENR, (1<<28));
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <main+0x64>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <main+0x64>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
      tmpreg = READ_BIT(RCC->APB1ENR, (1<<28));
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <main+0x64>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	607b      	str	r3, [r7, #4]
		Systick_Delay_ms(200);
 8000858:	20c8      	movs	r0, #200	; 0xc8
 800085a:	f000 f849 	bl	80008f0 <Systick_Delay_ms>
	  MX_CAN1_Init();
 800085e:	f000 f86d 	bl	800093c <MX_CAN1_Init>
	  CAN_SetInterrupt();
 8000862:	f000 f815 	bl	8000890 <CAN_SetInterrupt>
	  CAN_Start(&hcan1);
 8000866:	4808      	ldr	r0, [pc, #32]	; (8000888 <main+0x68>)
 8000868:	f7ff fcea 	bl	8000240 <CAN_Start>
//	  TxHeader.DLC = 3U;  // data length
//	  TxHeader.IDE = 0U;
//	  TxHeader.RTR = 0U;
//	  TxHeader.StdId = 0x200;  // ID

	GPIO_Lib_Config();
 800086c:	f000 f8ae 	bl	80009cc <GPIO_Lib_Config>
	while(1)
	{
		GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000870:	210d      	movs	r1, #13
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <main+0x6c>)
 8000874:	f000 fa81 	bl	8000d7a <GPIO_TogglePin>
		Systick_Delay_ms(2000);
 8000878:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800087c:	f000 f838 	bl	80008f0 <Systick_Delay_ms>
		GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000880:	e7f6      	b.n	8000870 <main+0x50>
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	2000001c 	.word	0x2000001c
 800088c:	40020c00 	.word	0x40020c00

08000890 <CAN_SetInterrupt>:
	}
}
void CAN_SetInterrupt(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	CAN1->IER |= (1<<1);
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <CAN_SetInterrupt+0x24>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <CAN_SetInterrupt+0x24>)
 800089a:	f043 0302 	orr.w	r3, r3, #2
 800089e:	6153      	str	r3, [r2, #20]
	NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)20) & 0x1FUL));
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <CAN_SetInterrupt+0x28>)
 80008a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008a6:	601a      	str	r2, [r3, #0]
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40006400 	.word	0x40006400
 80008b8:	e000e100 	.word	0xe000e100

080008bc <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80008c0:	210d      	movs	r1, #13
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <CAN1_RX0_IRQHandler+0x24>)
 80008c4:	f000 fa59 	bl	8000d7a <GPIO_TogglePin>
	CAN_GetRxMessage(&hcan1,0U,&RxHeader, RxData);
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <CAN1_RX0_IRQHandler+0x28>)
 80008ca:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <CAN1_RX0_IRQHandler+0x2c>)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4807      	ldr	r0, [pc, #28]	; (80008ec <CAN1_RX0_IRQHandler+0x30>)
 80008d0:	f7ff fc8a 	bl	80001e8 <CAN_GetRxMessage>
	Systick_Delay_ms(200);
 80008d4:	20c8      	movs	r0, #200	; 0xc8
 80008d6:	f000 f80b 	bl	80008f0 <Systick_Delay_ms>

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	2000005c 	.word	0x2000005c
 80008e8:	20000040 	.word	0x20000040
 80008ec:	2000001c 	.word	0x2000001c

080008f0 <Systick_Delay_ms>:
void Systick_Delay_ms(uint32_t u32Delay)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	while(u32Delay)
 80008f8:	e013      	b.n	8000922 <Systick_Delay_ms+0x32>
	{
		/*Cortex System timer clock max 168/8 MHz*/
		Systick->RVR = 21000-1;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <Systick_Delay_ms+0x48>)
 80008fc:	f245 2207 	movw	r2, #20999	; 0x5207
 8000900:	605a      	str	r2, [r3, #4]
		Systick->CVR = 0;
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <Systick_Delay_ms+0x48>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]

		/*no exception*/
		/*clear counter flag*/
		/*enable counter*/
		/*processor clock - 72M*/
		Systick->CSR = 0x05;
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <Systick_Delay_ms+0x48>)
 800090a:	2205      	movs	r2, #5
 800090c:	601a      	str	r2, [r3, #0]

		while(((Systick->CSR) & (1<<16)) == 0)
 800090e:	bf00      	nop
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <Systick_Delay_ms+0x48>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f9      	beq.n	8000910 <Systick_Delay_ms+0x20>
		{

		}
		--u32Delay;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
	while(u32Delay)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1e8      	bne.n	80008fa <Systick_Delay_ms+0xa>
	}
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000e010 	.word	0xe000e010

0800093c <MX_CAN1_Init>:

void MX_CAN1_Init()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
	  hcan1.Init.Prescaler = 16;
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_CAN1_Init+0x8c>)
 8000944:	2210      	movs	r2, #16
 8000946:	601a      	str	r2, [r3, #0]
	  hcan1.Init.Mode = 0u;
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_CAN1_Init+0x8c>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
	  hcan1.Init.SyncJumpWidth = 0U;
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_CAN1_Init+0x8c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
	  hcan1.Init.TimeSeg1 = 1U;
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_CAN1_Init+0x8c>)
 8000956:	2201      	movs	r2, #1
 8000958:	60da      	str	r2, [r3, #12]
	  hcan1.Init.TimeSeg2 = 1U;
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_CAN1_Init+0x8c>)
 800095c:	2201      	movs	r2, #1
 800095e:	611a      	str	r2, [r3, #16]
	  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_CAN1_Init+0x8c>)
 8000962:	2200      	movs	r2, #0
 8000964:	751a      	strb	r2, [r3, #20]
	  hcan1.Init.AutoBusOff = DISABLE;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_CAN1_Init+0x8c>)
 8000968:	2200      	movs	r2, #0
 800096a:	755a      	strb	r2, [r3, #21]
	  hcan1.Init.AutoWakeUp = DISABLE;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_CAN1_Init+0x8c>)
 800096e:	2200      	movs	r2, #0
 8000970:	759a      	strb	r2, [r3, #22]
	  hcan1.Init.AutoRetransmission = DISABLE;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_CAN1_Init+0x8c>)
 8000974:	2200      	movs	r2, #0
 8000976:	75da      	strb	r2, [r3, #23]
	  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_CAN1_Init+0x8c>)
 800097a:	2200      	movs	r2, #0
 800097c:	761a      	strb	r2, [r3, #24]
	  hcan1.Init.TransmitFifoPriority = DISABLE;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_CAN1_Init+0x8c>)
 8000980:	2200      	movs	r2, #0
 8000982:	765a      	strb	r2, [r3, #25]
	  CAN_Init(&hcan1);
 8000984:	4810      	ldr	r0, [pc, #64]	; (80009c8 <MX_CAN1_Init+0x8c>)
 8000986:	f7ff fc48 	bl	800021a <CAN_Init>

	  CAN_FilterTypeDef canfilterconfig;
	  canfilterconfig.FilterActivation = 1U;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
	  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 800098e:	230a      	movs	r3, #10
 8000990:	617b      	str	r3, [r7, #20]
	  canfilterconfig.FilterFIFOAssignment = 0U;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
	  canfilterconfig.FilterIdHigh = (0x200<<5);
 8000996:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800099a:	603b      	str	r3, [r7, #0]
	  canfilterconfig.FilterIdLow = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
	  canfilterconfig.FilterMaskIdHigh = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
	  canfilterconfig.FilterMaskIdLow = 0x0000;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
	  canfilterconfig.FilterMode = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
	  canfilterconfig.FilterScale = 1U;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
	  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24

	  CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80009b4:	463b      	mov	r3, r7
 80009b6:	4619      	mov	r1, r3
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <MX_CAN1_Init+0x8c>)
 80009ba:	f7ff fc54 	bl	8000266 <CAN_ConfigFilter>
}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000001c 	.word	0x2000001c

080009cc <GPIO_Lib_Config>:
void GPIO_Lib_Config()
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
	GPIO_PeriClockControl(GPIOB, ENABLE);
 80009d2:	2101      	movs	r1, #1
 80009d4:	481b      	ldr	r0, [pc, #108]	; (8000a44 <GPIO_Lib_Config+0x78>)
 80009d6:	f000 f839 	bl	8000a4c <GPIO_PeriClockControl>

	GPIO_PinConfig_t GPIO_InitStrcture;

	GPIO_InitStrcture.GPIO_PinNumber = GPIO_PIN_8|GPIO_PIN_9;
 80009da:	2309      	movs	r3, #9
 80009dc:	743b      	strb	r3, [r7, #16]
    GPIO_InitStrcture.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009de:	2302      	movs	r3, #2
 80009e0:	747b      	strb	r3, [r7, #17]
    GPIO_InitStrcture.GPIO_Speed = GPIO_SPEED_VeryHIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	74bb      	strb	r3, [r7, #18]
    GPIO_InitStrcture.GPIO_PuPdControl = GPIO_NoPull;
 80009e6:	2300      	movs	r3, #0
 80009e8:	74fb      	strb	r3, [r7, #19]
    GPIO_InitStrcture.GPIO_PinAltFunMode = AF9;
 80009ea:	2309      	movs	r3, #9
 80009ec:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOB, &GPIO_InitStrcture);
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	4619      	mov	r1, r3
 80009f4:	4813      	ldr	r0, [pc, #76]	; (8000a44 <GPIO_Lib_Config+0x78>)
 80009f6:	f000 f913 	bl	8000c20 <GPIO_Init>
	GPIO_PinConfig_t GPIO_InitStrcture1;

	GPIO_InitStrcture1.GPIO_PinNumber = GPIO_PIN_8;
 80009fa:	2308      	movs	r3, #8
 80009fc:	723b      	strb	r3, [r7, #8]
    GPIO_InitStrcture1.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009fe:	2302      	movs	r3, #2
 8000a00:	727b      	strb	r3, [r7, #9]
    GPIO_InitStrcture1.GPIO_Speed = GPIO_SPEED_VeryHIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	72bb      	strb	r3, [r7, #10]
    GPIO_InitStrcture1.GPIO_PuPdControl = GPIO_NoPull;
 8000a06:	2300      	movs	r3, #0
 8000a08:	72fb      	strb	r3, [r7, #11]
    GPIO_InitStrcture1.GPIO_PinAltFunMode = AF9;
 8000a0a:	2309      	movs	r3, #9
 8000a0c:	737b      	strb	r3, [r7, #13]

	GPIO_Init(GPIOB, &GPIO_InitStrcture1);
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4619      	mov	r1, r3
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <GPIO_Lib_Config+0x78>)
 8000a16:	f000 f903 	bl	8000c20 <GPIO_Init>
	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <GPIO_Lib_Config+0x7c>)
 8000a1e:	f000 f815 	bl	8000a4c <GPIO_PeriClockControl>

	GPIO_PinConfig_t GPIO_InitStrcture3;
	GPIO_InitStrcture3.GPIO_PinMode = GPIO_MODE_OUT;
 8000a22:	2301      	movs	r3, #1
 8000a24:	707b      	strb	r3, [r7, #1]
	GPIO_InitStrcture3.GPIO_PinNumber = GPIO_PIN_13;
 8000a26:	230d      	movs	r3, #13
 8000a28:	703b      	strb	r3, [r7, #0]
	GPIO_InitStrcture3.GPIO_Speed = GPIO_SPEED_MEDIUM;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	70bb      	strb	r3, [r7, #2]
	GPIO_InitStrcture3.GPIO_PuPdControl = GPIO_PullUp;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	70fb      	strb	r3, [r7, #3]

	GPIO_Init(GPIOD, &GPIO_InitStrcture3);
 8000a32:	463b      	mov	r3, r7
 8000a34:	4619      	mov	r1, r3
 8000a36:	4804      	ldr	r0, [pc, #16]	; (8000a48 <GPIO_Lib_Config+0x7c>)
 8000a38:	f000 f8f2 	bl	8000c20 <GPIO_Init>
}
 8000a3c:	bf00      	nop
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40020400 	.word	0x40020400
 8000a48:	40020c00 	.word	0x40020c00

08000a4c <GPIO_PeriClockControl>:
 /*
*	GPIO control
*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a58:	78fb      	ldrb	r3, [r7, #3]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d161      	bne.n	8000b22 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a65      	ldr	r2, [pc, #404]	; (8000bf8 <GPIO_PeriClockControl+0x1ac>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d106      	bne.n	8000a74 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000a66:	4b65      	ldr	r3, [pc, #404]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a64      	ldr	r2, [pc, #400]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	e056      	b.n	8000b22 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOB)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a62      	ldr	r2, [pc, #392]	; (8000c00 <GPIO_PeriClockControl+0x1b4>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d106      	bne.n	8000a8a <GPIO_PeriClockControl+0x3e>
		{
			GPIOB_PCLK_EN();
 8000a7c:	4b5f      	ldr	r3, [pc, #380]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	4a5e      	ldr	r2, [pc, #376]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000a82:	f043 0302 	orr.w	r3, r3, #2
 8000a86:	6313      	str	r3, [r2, #48]	; 0x30
 8000a88:	e04b      	b.n	8000b22 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOC)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a5d      	ldr	r2, [pc, #372]	; (8000c04 <GPIO_PeriClockControl+0x1b8>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d106      	bne.n	8000aa0 <GPIO_PeriClockControl+0x54>
		{
			GPIOC_PCLK_EN();
 8000a92:	4b5a      	ldr	r3, [pc, #360]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a59      	ldr	r2, [pc, #356]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	e040      	b.n	8000b22 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOD)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a59      	ldr	r2, [pc, #356]	; (8000c08 <GPIO_PeriClockControl+0x1bc>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d106      	bne.n	8000ab6 <GPIO_PeriClockControl+0x6a>
		{
			GPIOD_PCLK_EN();
 8000aa8:	4b54      	ldr	r3, [pc, #336]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4a53      	ldr	r2, [pc, #332]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab4:	e035      	b.n	8000b22 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOE)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a54      	ldr	r2, [pc, #336]	; (8000c0c <GPIO_PeriClockControl+0x1c0>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d106      	bne.n	8000acc <GPIO_PeriClockControl+0x80>
		{
			GPIOE_PCLK_EN();
 8000abe:	4b4f      	ldr	r3, [pc, #316]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a4e      	ldr	r2, [pc, #312]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000ac4:	f043 0310 	orr.w	r3, r3, #16
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	e02a      	b.n	8000b22 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOF)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a50      	ldr	r2, [pc, #320]	; (8000c10 <GPIO_PeriClockControl+0x1c4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d106      	bne.n	8000ae2 <GPIO_PeriClockControl+0x96>
		{
			GPIOF_PCLK_EN();
 8000ad4:	4b49      	ldr	r3, [pc, #292]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	4a48      	ldr	r2, [pc, #288]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000ada:	f043 0320 	orr.w	r3, r3, #32
 8000ade:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae0:	e01f      	b.n	8000b22 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOG)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a4b      	ldr	r2, [pc, #300]	; (8000c14 <GPIO_PeriClockControl+0x1c8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d106      	bne.n	8000af8 <GPIO_PeriClockControl+0xac>
		{
			GPIOG_PCLK_EN();
 8000aea:	4b44      	ldr	r3, [pc, #272]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a43      	ldr	r2, [pc, #268]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	e014      	b.n	8000b22 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOH)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a47      	ldr	r2, [pc, #284]	; (8000c18 <GPIO_PeriClockControl+0x1cc>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d106      	bne.n	8000b0e <GPIO_PeriClockControl+0xc2>
		{
			GPIOH_PCLK_EN();
 8000b00:	4b3e      	ldr	r3, [pc, #248]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a3d      	ldr	r2, [pc, #244]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	e009      	b.n	8000b22 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOI)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a42      	ldr	r2, [pc, #264]	; (8000c1c <GPIO_PeriClockControl+0x1d0>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d105      	bne.n	8000b22 <GPIO_PeriClockControl+0xd6>
		{
			GPIOI_PCLK_EN();
 8000b16:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a38      	ldr	r2, [pc, #224]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}

	if(EnorDi == DISABLE)
 8000b22:	78fb      	ldrb	r3, [r7, #3]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d161      	bne.n	8000bec <GPIO_PeriClockControl+0x1a0>
	{
		if(pGPIOx == GPIOA)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a33      	ldr	r2, [pc, #204]	; (8000bf8 <GPIO_PeriClockControl+0x1ac>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d106      	bne.n	8000b3e <GPIO_PeriClockControl+0xf2>
		{
			GPIOA_PCLK_DIS();
 8000b30:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b36:	f023 0301 	bic.w	r3, r3, #1
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DIS();
		}
	}
}
 8000b3c:	e056      	b.n	8000bec <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOB)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a2f      	ldr	r2, [pc, #188]	; (8000c00 <GPIO_PeriClockControl+0x1b4>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d106      	bne.n	8000b54 <GPIO_PeriClockControl+0x108>
			GPIOB_PCLK_DIS();
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b4c:	f023 0302 	bic.w	r3, r3, #2
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b52:	e04b      	b.n	8000bec <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOC)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a2b      	ldr	r2, [pc, #172]	; (8000c04 <GPIO_PeriClockControl+0x1b8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d106      	bne.n	8000b6a <GPIO_PeriClockControl+0x11e>
			GPIOC_PCLK_DIS();
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	4a26      	ldr	r2, [pc, #152]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b62:	f023 0304 	bic.w	r3, r3, #4
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b68:	e040      	b.n	8000bec <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOD)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a26      	ldr	r2, [pc, #152]	; (8000c08 <GPIO_PeriClockControl+0x1bc>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d106      	bne.n	8000b80 <GPIO_PeriClockControl+0x134>
			GPIOD_PCLK_DIS();
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b78:	f023 0308 	bic.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b7e:	e035      	b.n	8000bec <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a22      	ldr	r2, [pc, #136]	; (8000c0c <GPIO_PeriClockControl+0x1c0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d106      	bne.n	8000b96 <GPIO_PeriClockControl+0x14a>
			GPIOE_PCLK_DIS();
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000b8e:	f023 0310 	bic.w	r3, r3, #16
 8000b92:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b94:	e02a      	b.n	8000bec <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOF)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <GPIO_PeriClockControl+0x1c4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d106      	bne.n	8000bac <GPIO_PeriClockControl+0x160>
			GPIOF_PCLK_DIS();
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000ba4:	f023 0320 	bic.w	r3, r3, #32
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000baa:	e01f      	b.n	8000bec <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOG)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <GPIO_PeriClockControl+0x1c8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d106      	bne.n	8000bc2 <GPIO_PeriClockControl+0x176>
			GPIOG_PCLK_DIS();
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bc0:	e014      	b.n	8000bec <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOH)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <GPIO_PeriClockControl+0x1cc>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d106      	bne.n	8000bd8 <GPIO_PeriClockControl+0x18c>
			GPIOH_PCLK_DIS();
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bd6:	e009      	b.n	8000bec <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOI)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <GPIO_PeriClockControl+0x1d0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d105      	bne.n	8000bec <GPIO_PeriClockControl+0x1a0>
			GPIOI_PCLK_DIS();
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <GPIO_PeriClockControl+0x1b0>)
 8000be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40020800 	.word	0x40020800
 8000c08:	40020c00 	.word	0x40020c00
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40021400 	.word	0x40021400
 8000c14:	40021800 	.word	0x40021800
 8000c18:	40021c00 	.word	0x40021c00
 8000c1c:	40022000 	.word	0x40022000

08000c20 <GPIO_Init>:



void GPIO_Init(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *GPIO_PinConfig)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	uint32_t temp;
	//enable GPIOx clock
	GPIO_PeriClockControl(pGPIOx, ENABLE);
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff0d 	bl	8000a4c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(GPIO_PinConfig->GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	785b      	ldrb	r3, [r3, #1]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d81a      	bhi.n	8000c70 <GPIO_Init+0x50>
	{
		/*the none interrupt mode*/
		temp = ((uint32_t)GPIO_PinConfig->GPIO_PinMode) << (2 * GPIO_PinConfig->GPIO_PinNumber);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	785b      	ldrb	r3, [r3, #1]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	60fb      	str	r3, [r7, #12]
		pGPIOx->MODER &= ~((uint32_t)0x3 << (2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber));	//clear 2 bit
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2103      	movs	r1, #3
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	401a      	ands	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	601a      	str	r2, [r3, #0]
		pGPIOx->MODER |= temp;		//gan gia tri 2 bit chon che do
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	601a      	str	r2, [r3, #0]
	{
		/*with interrupt mode- chua viet duoc :))*/
	}

	//2. configure the speed
	temp = ((uint32_t)GPIO_PinConfig->GPIO_Speed)<<(2 * GPIO_PinConfig->GPIO_PinNumber);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	461a      	mov	r2, r3
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	60fb      	str	r3, [r7, #12]
	pGPIOx->OSPEED &= ~((uint32_t)0x3 << 2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber);			//clear 2 bit
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2103      	movs	r1, #3
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	401a      	ands	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	609a      	str	r2, [r3, #8]
	pGPIOx->OSPEED |= temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (GPIO_PinConfig->GPIO_PuPdControl) << (2 * GPIO_PinConfig->GPIO_PinNumber);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	78db      	ldrb	r3, [r3, #3]
 8000caa:	461a      	mov	r2, r3
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	60fb      	str	r3, [r7, #12]
	pGPIOx->PUPDR &= ~((uint32_t)0x3 << (2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber));		//clear 2 bit
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	401a      	ands	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	60da      	str	r2, [r3, #12]
	pGPIOx->PUPDR |= temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	60da      	str	r2, [r3, #12]

	//4. configure the otyper
	temp = (GPIO_PinConfig->GPIOOTyper) << (GPIO_PinConfig->GPIO_PinNumber);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	791b      	ldrb	r3, [r3, #4]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	60fb      	str	r3, [r7, #12]
	pGPIOx->OTYPER &= ~((uint32_t)0x1 << (uint32_t)(GPIO_PinConfig->GPIO_PinNumber));			//clear 1 bit
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	605a      	str	r2, [r3, #4]
	pGPIOx->OTYPER |= temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(GPIO_PinConfig->GPIO_PinMode == GPIO_MODE_ALTFN)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	785b      	ldrb	r3, [r3, #1]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d12d      	bne.n	8000d72 <GPIO_Init+0x152>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;
		/*	pin0-7:AFR[0]	;	pin8-15:AFR[1]	*/
		temp1 = GPIO_PinConfig->GPIO_PinNumber / 8;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	08db      	lsrs	r3, r3, #3
 8000d1c:	72fb      	strb	r3, [r7, #11]
		temp2 = GPIO_PinConfig->GPIO_PinNumber  % 8;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	72bb      	strb	r3, [r7, #10]
		pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); 										//clear 4 bit
 8000d28:	7afa      	ldrb	r2, [r7, #11]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3208      	adds	r2, #8
 8000d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d32:	7aba      	ldrb	r2, [r7, #10]
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	210f      	movs	r1, #15
 8000d38:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3c:	43d2      	mvns	r2, r2
 8000d3e:	4611      	mov	r1, r2
 8000d40:	7afa      	ldrb	r2, [r7, #11]
 8000d42:	4019      	ands	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3208      	adds	r2, #8
 8000d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOx->AFR[temp1] |= (GPIO_PinConfig->GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000d4c:	7afa      	ldrb	r2, [r7, #11]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	7952      	ldrb	r2, [r2, #5]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	7aba      	ldrb	r2, [r7, #10]
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	fa01 f202 	lsl.w	r2, r1, r2
 8000d64:	4611      	mov	r1, r2
 8000d66:	7afa      	ldrb	r2, [r7, #11]
 8000d68:	4319      	orrs	r1, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <GPIO_TogglePin>:



void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, GPIO_PIN_NUMBER PinNumber)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	460b      	mov	r3, r1
 8000d84:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR  ^= ( 1 << PinNumber);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	78fa      	ldrb	r2, [r7, #3]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d92:	405a      	eors	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	615a      	str	r2, [r3, #20]
	}else
	{
		pGPIOx->ODR |= 1<<PinNumber;
	}
	*/
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	; (8000de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <LoopForever+0xe>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	; (8000df0 <LoopForever+0x16>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dd2:	f000 f811 	bl	8000df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd6:	f7ff fd23 	bl	8000820 <main>

08000dda <LoopForever>:

LoopForever:
    b LoopForever
 8000dda:	e7fe      	b.n	8000dda <LoopForever>
  ldr   r0, =_estack
 8000ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000de8:	08000e60 	.word	0x08000e60
  ldr r2, =_sbss
 8000dec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000df0:	20000064 	.word	0x20000064

08000df4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <__libc_init_array>:
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	4d0d      	ldr	r5, [pc, #52]	; (8000e30 <__libc_init_array+0x38>)
 8000dfc:	4c0d      	ldr	r4, [pc, #52]	; (8000e34 <__libc_init_array+0x3c>)
 8000dfe:	1b64      	subs	r4, r4, r5
 8000e00:	10a4      	asrs	r4, r4, #2
 8000e02:	2600      	movs	r6, #0
 8000e04:	42a6      	cmp	r6, r4
 8000e06:	d109      	bne.n	8000e1c <__libc_init_array+0x24>
 8000e08:	4d0b      	ldr	r5, [pc, #44]	; (8000e38 <__libc_init_array+0x40>)
 8000e0a:	4c0c      	ldr	r4, [pc, #48]	; (8000e3c <__libc_init_array+0x44>)
 8000e0c:	f000 f818 	bl	8000e40 <_init>
 8000e10:	1b64      	subs	r4, r4, r5
 8000e12:	10a4      	asrs	r4, r4, #2
 8000e14:	2600      	movs	r6, #0
 8000e16:	42a6      	cmp	r6, r4
 8000e18:	d105      	bne.n	8000e26 <__libc_init_array+0x2e>
 8000e1a:	bd70      	pop	{r4, r5, r6, pc}
 8000e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e20:	4798      	blx	r3
 8000e22:	3601      	adds	r6, #1
 8000e24:	e7ee      	b.n	8000e04 <__libc_init_array+0xc>
 8000e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e2a:	4798      	blx	r3
 8000e2c:	3601      	adds	r6, #1
 8000e2e:	e7f2      	b.n	8000e16 <__libc_init_array+0x1e>
 8000e30:	08000e58 	.word	0x08000e58
 8000e34:	08000e58 	.word	0x08000e58
 8000e38:	08000e58 	.word	0x08000e58
 8000e3c:	08000e5c 	.word	0x08000e5c

08000e40 <_init>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	bf00      	nop
 8000e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e46:	bc08      	pop	{r3}
 8000e48:	469e      	mov	lr, r3
 8000e4a:	4770      	bx	lr

08000e4c <_fini>:
 8000e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4e:	bf00      	nop
 8000e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e52:	bc08      	pop	{r3}
 8000e54:	469e      	mov	lr, r3
 8000e56:	4770      	bx	lr
