
Mydriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007b0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000958  08000958  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000958  08000958  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000958  08000958  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000958  08000958  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000958  08000958  00010958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800095c  0800095c  0001095c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800096c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800096c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006a3  00000000  00000000  000215f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  00021c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f8  00000000  00000000  00021de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024f6  00000000  00000000  00021ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c69  00000000  00000000  000243d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a026  00000000  00000000  0002603f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00030065  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003b8  00000000  00000000  000300b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000940 	.word	0x08000940

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000010 	.word	0x20000010
 80001e4:	08000940 	.word	0x08000940

080001e8 <Fls_Write>:
FLS_JobResultType Fls_Write(uint32_t TargetAddress,
                            const uint32_t * SourceAddressPtr,
                            Fls_LengthType Length,
                            const boolean bAsynch
                                       )
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	60f8      	str	r0, [r7, #12]
 80001f0:	60b9      	str	r1, [r7, #8]
 80001f2:	607a      	str	r2, [r7, #4]
 80001f4:	70fb      	strb	r3, [r7, #3]
    FLS_JobResultType RetVal = (FLS_JobResultType)FLS_JOB_OK;
 80001f6:	2300      	movs	r3, #0
 80001f8:	75fb      	strb	r3, [r7, #23]

    RetVal = Fls_IPW_SectorWrite(TargetAddress, Length, SourceAddressPtr, bAsynch);
 80001fa:	78fb      	ldrb	r3, [r7, #3]
 80001fc:	68ba      	ldr	r2, [r7, #8]
 80001fe:	6879      	ldr	r1, [r7, #4]
 8000200:	68f8      	ldr	r0, [r7, #12]
 8000202:	f000 fb19 	bl	8000838 <Fls_IPW_SectorWrite>
 8000206:	4603      	mov	r3, r0
 8000208:	75fb      	strb	r3, [r7, #23]
    else
    {
        ; /* empty else at the end of an else-if structure */
    }
#endif /* (FLS_ERASE_VERIFICATION_ENABLED == STD_ON) || (FLS_WRITE_VERIFICATION_ENABLED == STD_ON) */
    return RetVal;
 800020a:	7dfb      	ldrb	r3, [r7, #23]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3718      	adds	r7, #24
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <Fls_Erase>:
 *
 */
FLS_JobResultType Fls_Erase(Fls_Sector  Sector, 
                         Fls_LengthType Length
                        )
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	6039      	str	r1, [r7, #0]
 800021e:	71fb      	strb	r3, [r7, #7]
    FLS_JobResultType RetVal = (FLS_JobResultType)FLS_JOB_OK;
 8000220:	2300      	movs	r3, #0
 8000222:	73fb      	strb	r3, [r7, #15]

    RetVal = Fls_IPW_SectorErase(Sector, FALSE);
 8000224:	79fb      	ldrb	r3, [r7, #7]
 8000226:	2100      	movs	r1, #0
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fb17 	bl	800085c <Fls_IPW_SectorErase>
 800022e:	4603      	mov	r3, r0
 8000230:	73fb      	strb	r3, [r7, #15]

    return RetVal;
 8000232:	7bfb      	ldrb	r3, [r7, #15]
}
 8000234:	4618      	mov	r0, r3
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <Flash_Read>:


#include <driver/stm32f407_flash_driver.h>

uint32_t Flash_Read(volatile uint32_t u32StartAddr)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	return *(uint32_t*)(u32StartAddr);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681b      	ldr	r3, [r3, #0]
}
 8000248:	4618      	mov	r0, r3
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr

08000254 <FLASH_Write_Word>:

void FLASH_Write_Word(	volatile uint32_t u32StartAddr,
						const uint32_t u32Length,
						uint32_t *BufferWrite)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]
	/* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH_CR register */
	while((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 8000260:	bf00      	nop
 8000262:	4b25      	ldr	r3, [pc, #148]	; (80002f8 <FLASH_Write_Word+0xa4>)
 8000264:	68db      	ldr	r3, [r3, #12]
 8000266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800026a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800026e:	d0f8      	beq.n	8000262 <FLASH_Write_Word+0xe>
	/* Check unlock sequences */
	if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK )
 8000270:	4b21      	ldr	r3, [pc, #132]	; (80002f8 <FLASH_Write_Word+0xa4>)
 8000272:	691b      	ldr	r3, [r3, #16]
 8000274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027c:	d101      	bne.n	8000282 <FLASH_Write_Word+0x2e>
	{
		Linh_FLASH_Unlock();
 800027e:	f000 f8a7 	bl	80003d0 <Linh_FLASH_Unlock>
	}

/* If the previous operation is completed, proceed to program the new data */
	CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000282:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <FLASH_Write_Word+0xa4>)
 8000284:	691b      	ldr	r3, [r3, #16]
 8000286:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <FLASH_Write_Word+0xa4>)
 8000288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800028c:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_PSIZE_WORD;
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <FLASH_Write_Word+0xa4>)
 8000290:	691b      	ldr	r3, [r3, #16]
 8000292:	4a19      	ldr	r2, [pc, #100]	; (80002f8 <FLASH_Write_Word+0xa4>)
 8000294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000298:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800029a:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <FLASH_Write_Word+0xa4>)
 800029c:	691b      	ldr	r3, [r3, #16]
 800029e:	4a16      	ldr	r2, [pc, #88]	; (80002f8 <FLASH_Write_Word+0xa4>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6113      	str	r3, [r2, #16]

	uint32_t u32WriteAddr = u32StartAddr;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	617b      	str	r3, [r7, #20]
	for(int i=0; i < u32Length; i++)
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
 80002ae:	e011      	b.n	80002d4 <FLASH_Write_Word+0x80>
	{
		u32WriteAddr += i;
 80002b0:	693b      	ldr	r3, [r7, #16]
 80002b2:	697a      	ldr	r2, [r7, #20]
 80002b4:	4413      	add	r3, r2
 80002b6:	617b      	str	r3, [r7, #20]
		*(__IO uint32_t*)(u32StartAddr +i*4) = *(uint32_t *)(BufferWrite + i);
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	4413      	add	r3, r2
 80002c0:	693a      	ldr	r2, [r7, #16]
 80002c2:	0092      	lsls	r2, r2, #2
 80002c4:	4611      	mov	r1, r2
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	440a      	add	r2, r1
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	6013      	str	r3, [r2, #0]
	for(int i=0; i < u32Length; i++)
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	3301      	adds	r3, #1
 80002d2:	613b      	str	r3, [r7, #16]
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	68ba      	ldr	r2, [r7, #8]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d8e9      	bhi.n	80002b0 <FLASH_Write_Word+0x5c>

	}
	
	while((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 80002dc:	bf00      	nop
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <FLASH_Write_Word+0xa4>)
 80002e0:	68db      	ldr	r3, [r3, #12]
 80002e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80002ea:	d0f8      	beq.n	80002de <FLASH_Write_Word+0x8a>
	//return FLS_JOB_OK;
}
 80002ec:	bf00      	nop
 80002ee:	bf00      	nop
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40023c00 	.word	0x40023c00

080002fc <Flash_ASync_Erase>:

void Flash_ASync_Erase(volatile uint8_t sector, uint32_t u32TimeOut)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]

}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <Flash_Sync_Erase>:

void Flash_Sync_Erase(volatile uint8_t sector, uint32_t u32TimeOut)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
	FLS_JobResultType eRetVal = FLS_JOB_OK;
 8000320:	2300      	movs	r3, #0
 8000322:	73fb      	strb	r3, [r7, #15]
	/* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH_CR register */
	while(((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && (u32TimeOut > 0U))
 8000324:	e005      	b.n	8000332 <Flash_Sync_Erase+0x1e>
	{
		/*  Wating for Bsy bit */
		u32TimeOut --;
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	3b01      	subs	r3, #1
 800032a:	603b      	str	r3, [r7, #0]
		if (u32TimeOut == 0)
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d048      	beq.n	80003c4 <Flash_Sync_Erase+0xb0>
	while(((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && (u32TimeOut > 0U))
 8000332:	4b26      	ldr	r3, [pc, #152]	; (80003cc <Flash_Sync_Erase+0xb8>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800033a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800033e:	d102      	bne.n	8000346 <Flash_Sync_Erase+0x32>
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d1ef      	bne.n	8000326 <Flash_Sync_Erase+0x12>
			//return FLASH_ERRORS_TIMEOUT;
			return FLS_JOB_FAILED;
		}
	}
	/* Check unlock sequences */
	if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK )
 8000346:	4b21      	ldr	r3, [pc, #132]	; (80003cc <Flash_Sync_Erase+0xb8>)
 8000348:	691b      	ldr	r3, [r3, #16]
 800034a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800034e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000352:	d101      	bne.n	8000358 <Flash_Sync_Erase+0x44>
	{
		Linh_FLASH_Unlock();
 8000354:	f000 f83c 	bl	80003d0 <Linh_FLASH_Unlock>
	memory block you wish to erase (SNB) in the FLASH_CR register
		3. Set the STRT bit in the FLASH_CR register
		4. Wait for the BSY bit to be cleared
	 */
	//clear psize
	FLASH->CR &= ~(3 << 8);
 8000358:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <Flash_Sync_Erase+0xb8>)
 800035a:	691b      	ldr	r3, [r3, #16]
 800035c:	4a1b      	ldr	r2, [pc, #108]	; (80003cc <Flash_Sync_Erase+0xb8>)
 800035e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000362:	6113      	str	r3, [r2, #16]
	//erase 32 bit
	FLASH->CR |= FLASH_PSIZE_WORD;
 8000364:	4b19      	ldr	r3, [pc, #100]	; (80003cc <Flash_Sync_Erase+0xb8>)
 8000366:	691b      	ldr	r3, [r3, #16]
 8000368:	4a18      	ldr	r2, [pc, #96]	; (80003cc <Flash_Sync_Erase+0xb8>)
 800036a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800036e:	6113      	str	r3, [r2, #16]
	//clear SNB
	FLASH->CR &= ~(0x1F << 3);
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <Flash_Sync_Erase+0xb8>)
 8000372:	691b      	ldr	r3, [r3, #16]
 8000374:	4a15      	ldr	r2, [pc, #84]	; (80003cc <Flash_Sync_Erase+0xb8>)
 8000376:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800037a:	6113      	str	r3, [r2, #16]
	//set SER
	FLASH->CR |= 1 << 1;
 800037c:	4b13      	ldr	r3, [pc, #76]	; (80003cc <Flash_Sync_Erase+0xb8>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	4a12      	ldr	r2, [pc, #72]	; (80003cc <Flash_Sync_Erase+0xb8>)
 8000382:	f043 0302 	orr.w	r3, r3, #2
 8000386:	6113      	str	r3, [r2, #16]
	//clear sector
	FLASH->CR |= sector << 3;
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	00da      	lsls	r2, r3, #3
 800038e:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <Flash_Sync_Erase+0xb8>)
 8000390:	691b      	ldr	r3, [r3, #16]
 8000392:	4611      	mov	r1, r2
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <Flash_Sync_Erase+0xb8>)
 8000396:	430b      	orrs	r3, r1
 8000398:	6113      	str	r3, [r2, #16]
	FLASH->CR |= 1 << 16;
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <Flash_Sync_Erase+0xb8>)
 800039c:	691b      	ldr	r3, [r3, #16]
 800039e:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <Flash_Sync_Erase+0xb8>)
 80003a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003a4:	6113      	str	r3, [r2, #16]
	while((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 80003a6:	bf00      	nop
 80003a8:	4b08      	ldr	r3, [pc, #32]	; (80003cc <Flash_Sync_Erase+0xb8>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80003b4:	d0f8      	beq.n	80003a8 <Flash_Sync_Erase+0x94>
	CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80003b6:	4b05      	ldr	r3, [pc, #20]	; (80003cc <Flash_Sync_Erase+0xb8>)
 80003b8:	691b      	ldr	r3, [r3, #16]
 80003ba:	4a04      	ldr	r2, [pc, #16]	; (80003cc <Flash_Sync_Erase+0xb8>)
 80003bc:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80003c0:	6113      	str	r3, [r2, #16]
	return FLS_JOB_OK;
 80003c2:	e000      	b.n	80003c6 <Flash_Sync_Erase+0xb2>
			return FLS_JOB_FAILED;
 80003c4:	bf00      	nop
}
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40023c00 	.word	0x40023c00

080003d0 <Linh_FLASH_Unlock>:


void Linh_FLASH_Unlock(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
 //HAL_StatusTypeDef status = HAL_OK;

 if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <Linh_FLASH_Unlock+0x28>)
 80003d6:	691b      	ldr	r3, [r3, #16]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	da07      	bge.n	80003ec <Linh_FLASH_Unlock+0x1c>
 {
   /* Authorize the FLASH Registers access */
   WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <Linh_FLASH_Unlock+0x28>)
 80003de:	4a07      	ldr	r2, [pc, #28]	; (80003fc <Linh_FLASH_Unlock+0x2c>)
 80003e0:	605a      	str	r2, [r3, #4]
   WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <Linh_FLASH_Unlock+0x28>)
 80003e4:	4a06      	ldr	r2, [pc, #24]	; (8000400 <Linh_FLASH_Unlock+0x30>)
 80003e6:	605a      	str	r2, [r3, #4]

   /* Verify Flash is unlocked */
   if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <Linh_FLASH_Unlock+0x28>)
 80003ea:	691b      	ldr	r3, [r3, #16]
     //status = HAL_ERROR;
   }
 }

 //return status;
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40023c00 	.word	0x40023c00
 80003fc:	45670123 	.word	0x45670123
 8000400:	cdef89ab 	.word	0xcdef89ab

08000404 <GPIO_PeriClockControl>:
 /*
*	GPIO control
*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d161      	bne.n	80004da <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a65      	ldr	r2, [pc, #404]	; (80005b0 <GPIO_PeriClockControl+0x1ac>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800041e:	4b65      	ldr	r3, [pc, #404]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a64      	ldr	r2, [pc, #400]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
 800042a:	e056      	b.n	80004da <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOB)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a62      	ldr	r2, [pc, #392]	; (80005b8 <GPIO_PeriClockControl+0x1b4>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PeriClockControl+0x3e>
		{
			GPIOB_PCLK_EN();
 8000434:	4b5f      	ldr	r3, [pc, #380]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a5e      	ldr	r2, [pc, #376]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 800043a:	f043 0302 	orr.w	r3, r3, #2
 800043e:	6313      	str	r3, [r2, #48]	; 0x30
 8000440:	e04b      	b.n	80004da <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOC)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a5d      	ldr	r2, [pc, #372]	; (80005bc <GPIO_PeriClockControl+0x1b8>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0x54>
		{
			GPIOC_PCLK_EN();
 800044a:	4b5a      	ldr	r3, [pc, #360]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	4a59      	ldr	r2, [pc, #356]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000450:	f043 0304 	orr.w	r3, r3, #4
 8000454:	6313      	str	r3, [r2, #48]	; 0x30
 8000456:	e040      	b.n	80004da <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOD)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a59      	ldr	r2, [pc, #356]	; (80005c0 <GPIO_PeriClockControl+0x1bc>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0x6a>
		{
			GPIOD_PCLK_EN();
 8000460:	4b54      	ldr	r3, [pc, #336]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a53      	ldr	r2, [pc, #332]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6313      	str	r3, [r2, #48]	; 0x30
 800046c:	e035      	b.n	80004da <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOE)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a54      	ldr	r2, [pc, #336]	; (80005c4 <GPIO_PeriClockControl+0x1c0>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x80>
		{
			GPIOE_PCLK_EN();
 8000476:	4b4f      	ldr	r3, [pc, #316]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a4e      	ldr	r2, [pc, #312]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 800047c:	f043 0310 	orr.w	r3, r3, #16
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
 8000482:	e02a      	b.n	80004da <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOF)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a50      	ldr	r2, [pc, #320]	; (80005c8 <GPIO_PeriClockControl+0x1c4>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0x96>
		{
			GPIOF_PCLK_EN();
 800048c:	4b49      	ldr	r3, [pc, #292]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000490:	4a48      	ldr	r2, [pc, #288]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000492:	f043 0320 	orr.w	r3, r3, #32
 8000496:	6313      	str	r3, [r2, #48]	; 0x30
 8000498:	e01f      	b.n	80004da <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOG)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a4b      	ldr	r2, [pc, #300]	; (80005cc <GPIO_PeriClockControl+0x1c8>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0xac>
		{
			GPIOG_PCLK_EN();
 80004a2:	4b44      	ldr	r3, [pc, #272]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	4a43      	ldr	r2, [pc, #268]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 80004a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ac:	6313      	str	r3, [r2, #48]	; 0x30
 80004ae:	e014      	b.n	80004da <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOH)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a47      	ldr	r2, [pc, #284]	; (80005d0 <GPIO_PeriClockControl+0x1cc>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <GPIO_PeriClockControl+0xc2>
		{
			GPIOH_PCLK_EN();
 80004b8:	4b3e      	ldr	r3, [pc, #248]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004bc:	4a3d      	ldr	r2, [pc, #244]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 80004be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004c2:	6313      	str	r3, [r2, #48]	; 0x30
 80004c4:	e009      	b.n	80004da <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOI)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a42      	ldr	r2, [pc, #264]	; (80005d4 <GPIO_PeriClockControl+0x1d0>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d105      	bne.n	80004da <GPIO_PeriClockControl+0xd6>
		{
			GPIOI_PCLK_EN();
 80004ce:	4b39      	ldr	r3, [pc, #228]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a38      	ldr	r2, [pc, #224]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 80004d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}

	if(EnorDi == DISABLE)
 80004da:	78fb      	ldrb	r3, [r7, #3]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d161      	bne.n	80005a4 <GPIO_PeriClockControl+0x1a0>
	{
		if(pGPIOx == GPIOA)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a33      	ldr	r2, [pc, #204]	; (80005b0 <GPIO_PeriClockControl+0x1ac>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClockControl+0xf2>
		{
			GPIOA_PCLK_DIS();
 80004e8:	4b32      	ldr	r3, [pc, #200]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ec:	4a31      	ldr	r2, [pc, #196]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 80004ee:	f023 0301 	bic.w	r3, r3, #1
 80004f2:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DIS();
		}
	}
}
 80004f4:	e056      	b.n	80005a4 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOB)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a2f      	ldr	r2, [pc, #188]	; (80005b8 <GPIO_PeriClockControl+0x1b4>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClockControl+0x108>
			GPIOB_PCLK_DIS();
 80004fe:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a2c      	ldr	r2, [pc, #176]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000504:	f023 0302 	bic.w	r3, r3, #2
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050a:	e04b      	b.n	80005a4 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOC)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a2b      	ldr	r2, [pc, #172]	; (80005bc <GPIO_PeriClockControl+0x1b8>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d106      	bne.n	8000522 <GPIO_PeriClockControl+0x11e>
			GPIOC_PCLK_DIS();
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 800051a:	f023 0304 	bic.w	r3, r3, #4
 800051e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000520:	e040      	b.n	80005a4 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOD)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a26      	ldr	r2, [pc, #152]	; (80005c0 <GPIO_PeriClockControl+0x1bc>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d106      	bne.n	8000538 <GPIO_PeriClockControl+0x134>
			GPIOD_PCLK_DIS();
 800052a:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000530:	f023 0308 	bic.w	r3, r3, #8
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000536:	e035      	b.n	80005a4 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOE)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a22      	ldr	r2, [pc, #136]	; (80005c4 <GPIO_PeriClockControl+0x1c0>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d106      	bne.n	800054e <GPIO_PeriClockControl+0x14a>
			GPIOE_PCLK_DIS();
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000544:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000546:	f023 0310 	bic.w	r3, r3, #16
 800054a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800054c:	e02a      	b.n	80005a4 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOF)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <GPIO_PeriClockControl+0x1c4>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d106      	bne.n	8000564 <GPIO_PeriClockControl+0x160>
			GPIOF_PCLK_DIS();
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 800055c:	f023 0320 	bic.w	r3, r3, #32
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000562:	e01f      	b.n	80005a4 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOG)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a19      	ldr	r2, [pc, #100]	; (80005cc <GPIO_PeriClockControl+0x1c8>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d106      	bne.n	800057a <GPIO_PeriClockControl+0x176>
			GPIOG_PCLK_DIS();
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000570:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000576:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000578:	e014      	b.n	80005a4 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOH)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <GPIO_PeriClockControl+0x1cc>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d106      	bne.n	8000590 <GPIO_PeriClockControl+0x18c>
			GPIOH_PCLK_DIS();
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 8000588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800058e:	e009      	b.n	80005a4 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOI)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <GPIO_PeriClockControl+0x1d0>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d105      	bne.n	80005a4 <GPIO_PeriClockControl+0x1a0>
			GPIOI_PCLK_DIS();
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 800059a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059c:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <GPIO_PeriClockControl+0x1b0>)
 800059e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40020000 	.word	0x40020000
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40020400 	.word	0x40020400
 80005bc:	40020800 	.word	0x40020800
 80005c0:	40020c00 	.word	0x40020c00
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40021400 	.word	0x40021400
 80005cc:	40021800 	.word	0x40021800
 80005d0:	40021c00 	.word	0x40021c00
 80005d4:	40022000 	.word	0x40022000

080005d8 <GPIO_Init>:



void GPIO_Init(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *GPIO_PinConfig)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	uint32_t temp;
	//enable GPIOx clock
	GPIO_PeriClockControl(pGPIOx, ENABLE);
 80005e2:	2101      	movs	r1, #1
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff ff0d 	bl	8000404 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(GPIO_PinConfig->GPIO_PinMode <= GPIO_MODE_ANALOG)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	d81a      	bhi.n	8000628 <GPIO_Init+0x50>
	{
		/*the none interrupt mode*/
		temp = ((uint32_t)GPIO_PinConfig->GPIO_PinMode) << (2 * GPIO_PinConfig->GPIO_PinNumber);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	785b      	ldrb	r3, [r3, #1]
 80005f6:	461a      	mov	r2, r3
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	60fb      	str	r3, [r7, #12]
		pGPIOx->MODER &= ~((uint32_t)0x3 << (2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber));	//clear 2 bit
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	2103      	movs	r1, #3
 8000610:	fa01 f303 	lsl.w	r3, r1, r3
 8000614:	43db      	mvns	r3, r3
 8000616:	401a      	ands	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	601a      	str	r2, [r3, #0]
		pGPIOx->MODER |= temp;		//gan gia tri 2 bit chon che do
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	431a      	orrs	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	601a      	str	r2, [r3, #0]
	{
		/*with interrupt mode- chua viet duoc :))*/
	}

	//2. configure the speed
	temp = ((uint32_t)GPIO_PinConfig->GPIO_Speed)<<(2 * GPIO_PinConfig->GPIO_PinNumber);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	461a      	mov	r2, r3
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	fa02 f303 	lsl.w	r3, r2, r3
 8000638:	60fb      	str	r3, [r7, #12]
	pGPIOx->OSPEED &= ~((uint32_t)0x3 << 2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber);			//clear 2 bit
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	2103      	movs	r1, #3
 8000646:	fa01 f303 	lsl.w	r3, r1, r3
 800064a:	43db      	mvns	r3, r3
 800064c:	401a      	ands	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	609a      	str	r2, [r3, #8]
	pGPIOx->OSPEED |= temp;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	689a      	ldr	r2, [r3, #8]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	431a      	orrs	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (GPIO_PinConfig->GPIO_PuPdControl) << (2 * GPIO_PinConfig->GPIO_PinNumber);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	78db      	ldrb	r3, [r3, #3]
 8000662:	461a      	mov	r2, r3
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	60fb      	str	r3, [r7, #12]
	pGPIOx->PUPDR &= ~((uint32_t)0x3 << (2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber));		//clear 2 bit
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68da      	ldr	r2, [r3, #12]
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	2103      	movs	r1, #3
 800067c:	fa01 f303 	lsl.w	r3, r1, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	401a      	ands	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	60da      	str	r2, [r3, #12]
	pGPIOx->PUPDR |= temp;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	68da      	ldr	r2, [r3, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	431a      	orrs	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	60da      	str	r2, [r3, #12]

	//4. configure the otyper
	temp = (GPIO_PinConfig->GPIOOTyper) << (GPIO_PinConfig->GPIO_PinNumber);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	791b      	ldrb	r3, [r3, #4]
 8000698:	461a      	mov	r2, r3
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	60fb      	str	r3, [r7, #12]
	pGPIOx->OTYPER &= ~((uint32_t)0x1 << (uint32_t)(GPIO_PinConfig->GPIO_PinNumber));			//clear 1 bit
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	2301      	movs	r3, #1
 80006b0:	408b      	lsls	r3, r1
 80006b2:	43db      	mvns	r3, r3
 80006b4:	401a      	ands	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	605a      	str	r2, [r3, #4]
	pGPIOx->OTYPER |= temp;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	431a      	orrs	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(GPIO_PinConfig->GPIO_PinMode == GPIO_MODE_ALTFN)
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	785b      	ldrb	r3, [r3, #1]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d12d      	bne.n	800072a <GPIO_Init+0x152>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;
		/*	pin0-7:AFR[0]	;	pin8-15:AFR[1]	*/
		temp1 = GPIO_PinConfig->GPIO_PinNumber / 8;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	08db      	lsrs	r3, r3, #3
 80006d4:	72fb      	strb	r3, [r7, #11]
		temp2 = GPIO_PinConfig->GPIO_PinNumber  % 8;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	72bb      	strb	r3, [r7, #10]
		pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); 										//clear 4 bit
 80006e0:	7afa      	ldrb	r2, [r7, #11]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3208      	adds	r2, #8
 80006e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ea:	7aba      	ldrb	r2, [r7, #10]
 80006ec:	0092      	lsls	r2, r2, #2
 80006ee:	210f      	movs	r1, #15
 80006f0:	fa01 f202 	lsl.w	r2, r1, r2
 80006f4:	43d2      	mvns	r2, r2
 80006f6:	4611      	mov	r1, r2
 80006f8:	7afa      	ldrb	r2, [r7, #11]
 80006fa:	4019      	ands	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3208      	adds	r2, #8
 8000700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOx->AFR[temp1] |= (GPIO_PinConfig->GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3208      	adds	r2, #8
 800070a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	7952      	ldrb	r2, [r2, #5]
 8000712:	4611      	mov	r1, r2
 8000714:	7aba      	ldrb	r2, [r7, #10]
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	4611      	mov	r1, r2
 800071e:	7afa      	ldrb	r2, [r7, #11]
 8000720:	4319      	orrs	r1, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3208      	adds	r2, #8
 8000726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <GPIO_TogglePin>:



void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, GPIO_PIN_NUMBER PinNumber)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR  ^= ( 1 << PinNumber);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	78fa      	ldrb	r2, [r7, #3]
 8000744:	2101      	movs	r1, #1
 8000746:	fa01 f202 	lsl.w	r2, r1, r2
 800074a:	405a      	eors	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	615a      	str	r2, [r3, #20]
	}else
	{
		pGPIOx->ODR |= 1<<PinNumber;
	}
	*/
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <main>:

void GPIO_Lib_Config();
uint32_t s;
uint32_t BufferWrite[3] = {0x100,0x200,0x300};
int main()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	GPIO_Lib_Config();
 8000760:	f000 f850 	bl	8000804 <GPIO_Lib_Config>
	s = Flash_Read((uint32_t)0x0800C000);
 8000764:	4810      	ldr	r0, [pc, #64]	; (80007a8 <main+0x4c>)
 8000766:	f7ff fd69 	bl	800023c <Flash_Read>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <main+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
	Fls_Erase(Fls_Sector_3, 1);
 8000772:	2101      	movs	r1, #1
 8000774:	2003      	movs	r0, #3
 8000776:	f7ff fd4d 	bl	8000214 <Fls_Erase>
	Fls_Write((uint32_t)0x0800C000, BufferWrite, 3, FALSE);
 800077a:	2300      	movs	r3, #0
 800077c:	2203      	movs	r2, #3
 800077e:	490c      	ldr	r1, [pc, #48]	; (80007b0 <main+0x54>)
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <main+0x4c>)
 8000782:	f7ff fd31 	bl	80001e8 <Fls_Write>
	s = Flash_Read((uint32_t)0x0800C000);
 8000786:	4808      	ldr	r0, [pc, #32]	; (80007a8 <main+0x4c>)
 8000788:	f7ff fd58 	bl	800023c <Flash_Read>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <main+0x50>)
 8000792:	601a      	str	r2, [r3, #0]
	while(1)
	{
		GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000794:	210d      	movs	r1, #13
 8000796:	4807      	ldr	r0, [pc, #28]	; (80007b4 <main+0x58>)
 8000798:	f7ff ffcb 	bl	8000732 <GPIO_TogglePin>
		Systick_Delay_ms(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f000 f80a 	bl	80007b8 <Systick_Delay_ms>
		GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80007a4:	e7f6      	b.n	8000794 <main+0x38>
 80007a6:	bf00      	nop
 80007a8:	0800c000 	.word	0x0800c000
 80007ac:	20000028 	.word	0x20000028
 80007b0:	20000000 	.word	0x20000000
 80007b4:	40020c00 	.word	0x40020c00

080007b8 <Systick_Delay_ms>:
	}
}

void Systick_Delay_ms(uint32_t u32Delay)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	while(u32Delay)
 80007c0:	e013      	b.n	80007ea <Systick_Delay_ms+0x32>
	{
		/*Cortex System timer clock max 168/8 MHz*/
		Systick->RVR = 21000-1;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <Systick_Delay_ms+0x48>)
 80007c4:	f245 2207 	movw	r2, #20999	; 0x5207
 80007c8:	605a      	str	r2, [r3, #4]
		Systick->CVR = 0;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <Systick_Delay_ms+0x48>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]

		/*no exception*/
		/*clear counter flag*/
		/*enable counter*/
		/*processor clock - 72M*/
		Systick->CSR = 0x05;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <Systick_Delay_ms+0x48>)
 80007d2:	2205      	movs	r2, #5
 80007d4:	601a      	str	r2, [r3, #0]

		while(((Systick->CSR) & (1<<16)) == 0)
 80007d6:	bf00      	nop
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <Systick_Delay_ms+0x48>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0f9      	beq.n	80007d8 <Systick_Delay_ms+0x20>
		{

		}
		--u32Delay;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
	while(u32Delay)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1e8      	bne.n	80007c2 <Systick_Delay_ms+0xa>
	}
}
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000e010 	.word	0xe000e010

08000804 <GPIO_Lib_Config>:

void GPIO_Lib_Config()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
	GPIO_PeriClockControl(GPIOD, ENABLE);
 800080a:	2101      	movs	r1, #1
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <GPIO_Lib_Config+0x30>)
 800080e:	f7ff fdf9 	bl	8000404 <GPIO_PeriClockControl>

	GPIO_PinConfig_t GPIO_InitStrcture;
	GPIO_InitStrcture.GPIO_PinMode = GPIO_MODE_OUT;
 8000812:	2301      	movs	r3, #1
 8000814:	707b      	strb	r3, [r7, #1]
	GPIO_InitStrcture.GPIO_PinNumber = GPIO_PIN_13;
 8000816:	230d      	movs	r3, #13
 8000818:	703b      	strb	r3, [r7, #0]
	GPIO_InitStrcture.GPIO_Speed = GPIO_SPEED_MEDIUM;
 800081a:	2301      	movs	r3, #1
 800081c:	70bb      	strb	r3, [r7, #2]
	GPIO_InitStrcture.GPIO_PuPdControl = GPIO_PullUp;
 800081e:	2301      	movs	r3, #1
 8000820:	70fb      	strb	r3, [r7, #3]

	GPIO_Init(GPIOD, &GPIO_InitStrcture);
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <GPIO_Lib_Config+0x30>)
 8000828:	f7ff fed6 	bl	80005d8 <GPIO_Init>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40020c00 	.word	0x40020c00

08000838 <Fls_IPW_SectorWrite>:
void Fls_IPW_SectorWrite(const uint32_t u32StartAddr,
                                      const uint32_t u32Length,
                                      const uint8_t *pJobDataSrcPtr,
                                      const boolean bAsynch
                                     )
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	70fb      	strb	r3, [r7, #3]
	FLS_JobResultType eLldRetVal = FLS_JOB_OK;
 8000846:	2300      	movs	r3, #0
 8000848:	75fb      	strb	r3, [r7, #23]

    /* Decide the IP used: internal flash or external QSPI */
#if (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED)
        FLASH_Write_Word(u32StartAddr, u32Length, pJobDataSrcPtr);
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f7ff fd00 	bl	8000254 <FLASH_Write_Word>
#endif /* (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED) */

    return eLldRetVal;
 8000854:	bf00      	nop
}
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <Fls_IPW_SectorErase>:
* @implements     Fls_IPW_SectorErase_Activity
*/
FLS_JobResultType Fls_IPW_SectorErase(const Fls_Sector  Sector,
                                      boolean bAsynch
                                     )
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	460a      	mov	r2, r1
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	71bb      	strb	r3, [r7, #6]
    FLS_JobResultType eLldRetVal = FLS_JOB_OK;
 800086c:	2300      	movs	r3, #0
 800086e:	73fb      	strb	r3, [r7, #15]
    bAsynch = FALSE;
 8000870:	2300      	movs	r3, #0
 8000872:	71bb      	strb	r3, [r7, #6]

    /* Decide the IP used: internal flash or external QSPI */
#if (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED)
    if (FALSE == bAsynch)
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d107      	bne.n	800088a <Fls_IPW_SectorErase+0x2e>
    {
        eLldRetVal = Flash_Sync_Erase(Sector, 100);
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2164      	movs	r1, #100	; 0x64
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fd48 	bl	8000314 <Flash_Sync_Erase>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e006      	b.n	8000898 <Fls_IPW_SectorErase+0x3c>
    }
	else
	{
		eLldRetVal = Flash_ASync_Erase(Sector, 100);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2164      	movs	r1, #100	; 0x64
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fd34 	bl	80002fc <Flash_ASync_Erase>
 8000894:	4603      	mov	r3, r0
 8000896:	73fb      	strb	r3, [r7, #15]
	}
#endif /* (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED) */

    return eLldRetVal;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	; (80008e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <LoopForever+0xe>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	; (80008f0 <LoopForever+0x16>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008d2:	f000 f811 	bl	80008f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d6:	f7ff ff41 	bl	800075c <main>

080008da <LoopForever>:

LoopForever:
    b LoopForever
 80008da:	e7fe      	b.n	80008da <LoopForever>
  ldr   r0, =_estack
 80008dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e8:	08000960 	.word	0x08000960
  ldr r2, =_sbss
 80008ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008f0:	2000002c 	.word	0x2000002c

080008f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <__libc_init_array>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4d0d      	ldr	r5, [pc, #52]	; (8000930 <__libc_init_array+0x38>)
 80008fc:	4c0d      	ldr	r4, [pc, #52]	; (8000934 <__libc_init_array+0x3c>)
 80008fe:	1b64      	subs	r4, r4, r5
 8000900:	10a4      	asrs	r4, r4, #2
 8000902:	2600      	movs	r6, #0
 8000904:	42a6      	cmp	r6, r4
 8000906:	d109      	bne.n	800091c <__libc_init_array+0x24>
 8000908:	4d0b      	ldr	r5, [pc, #44]	; (8000938 <__libc_init_array+0x40>)
 800090a:	4c0c      	ldr	r4, [pc, #48]	; (800093c <__libc_init_array+0x44>)
 800090c:	f000 f818 	bl	8000940 <_init>
 8000910:	1b64      	subs	r4, r4, r5
 8000912:	10a4      	asrs	r4, r4, #2
 8000914:	2600      	movs	r6, #0
 8000916:	42a6      	cmp	r6, r4
 8000918:	d105      	bne.n	8000926 <__libc_init_array+0x2e>
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000920:	4798      	blx	r3
 8000922:	3601      	adds	r6, #1
 8000924:	e7ee      	b.n	8000904 <__libc_init_array+0xc>
 8000926:	f855 3b04 	ldr.w	r3, [r5], #4
 800092a:	4798      	blx	r3
 800092c:	3601      	adds	r6, #1
 800092e:	e7f2      	b.n	8000916 <__libc_init_array+0x1e>
 8000930:	08000958 	.word	0x08000958
 8000934:	08000958 	.word	0x08000958
 8000938:	08000958 	.word	0x08000958
 800093c:	0800095c 	.word	0x0800095c

08000940 <_init>:
 8000940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000942:	bf00      	nop
 8000944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000946:	bc08      	pop	{r3}
 8000948:	469e      	mov	lr, r3
 800094a:	4770      	bx	lr

0800094c <_fini>:
 800094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094e:	bf00      	nop
 8000950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000952:	bc08      	pop	{r3}
 8000954:	469e      	mov	lr, r3
 8000956:	4770      	bx	lr
