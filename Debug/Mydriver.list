
Mydriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ed0  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002078  08002078  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002078  08002078  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002078  08002078  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002078  08002078  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800207c  0800207c  0001207c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000010  08002090  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002090  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000042e9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bea  00000000  00000000  00024329  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000360  00000000  00000000  00024f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002c8  00000000  00000000  00025278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002ae6  00000000  00000000  00025540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000032f5  00000000  00000000  00028026  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b830  00000000  00000000  0002b31b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00036b4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d4c  00000000  00000000  00036bc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000010 	.word	0x20000010
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08002060 	.word	0x08002060

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000014 	.word	0x20000014
 80001e4:	08002060 	.word	0x08002060

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <CAN_GetRxMessage>:
	}

	return RetVal;
}
Std_StatusReturnType CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
 8000a70:	603b      	str	r3, [r7, #0]
	Std_StatusReturnType RetVal = E_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	75fb      	strb	r3, [r7, #23]
	if(STM32F4_CANRecive(hcan,RxFifo,pHeader,aData) != E_OK)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	68b9      	ldr	r1, [r7, #8]
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f001 f8fd 	bl	8001c7c <STM32F4_CANRecive>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <CAN_GetRxMessage+0x28>
	{
		RetVal = E_NOT_OK;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	75fb      	strb	r3, [r7, #23]
	}

	return RetVal;
 8000a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <CAN_Init>:

Std_StatusReturnType CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	Std_StatusReturnType RetVal = E_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]
	if(STM32F4_CANInit(hcan) != E_OK)
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f001 f931 	bl	8001d0a <STM32F4_CANInit>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <CAN_Init+0x1c>
	{
		RetVal = E_NOT_OK;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	73fb      	strb	r3, [r7, #15]
	}

	return RetVal;
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <CAN_Start>:
Std_StatusReturnType CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	Std_StatusReturnType RetVal = E_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]
	if(STM32F4_CANStart(hcan) != E_OK)
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f001 f95b 	bl	8001d84 <STM32F4_CANStart>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <CAN_Start+0x1c>
	{
		RetVal = E_NOT_OK;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
	}

	return RetVal;
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <CAN_ConfigFilter>:
Std_StatusReturnType CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b084      	sub	sp, #16
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	6039      	str	r1, [r7, #0]
	Std_StatusReturnType RetVal = E_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]
	if(STM32F4_CANConfigFilter(hcan,sFilterConfig) != E_OK)
 8000af0:	6839      	ldr	r1, [r7, #0]
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f001 f959 	bl	8001daa <STM32F4_CANConfigFilter>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <CAN_ConfigFilter+0x20>
	{
		RetVal = E_NOT_OK;
 8000afe:	2301      	movs	r3, #1
 8000b00:	73fb      	strb	r3, [r7, #15]
	}

	return RetVal;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <CAN_BaudRate>:
Std_StatusReturnType CAN_BaudRate(uint32_t BaudRate)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	Std_StatusReturnType RetVal = E_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]
	if(STM32F4_CANSetBaudrate(BaudRate) != E_OK)
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f001 f991 	bl	8001e40 <STM32F4_CANSetBaudrate>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <CAN_BaudRate+0x1c>
	{
		RetVal = E_NOT_OK;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73fb      	strb	r3, [r7, #15]
	}

	return RetVal;
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <Fls_Read>:
 */
FLS_JobResultType Fls_Read(uint32_t SourceAddress,
                uint32_t * TargetAddressPtr,
                uint32_t Length
                )
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
	Fls_eJobResult = (FLS_JobResultType)FLS_JOB_FAILED;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <Fls_Read+0x30>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]

    Fls_eJobResult = Fls_IPW_Read(SourceAddress, Length, TargetAddressPtr);
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f001 f9f0 	bl	8001f30 <Fls_IPW_Read>
 8000b50:	4603      	mov	r3, r0
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <Fls_Read+0x30>)
 8000b56:	701a      	strb	r2, [r3, #0]

    return Fls_eJobResult;
 8000b58:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <Fls_Read+0x30>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000002c 	.word	0x2000002c

08000b68 <Fls_Write>:
FLS_JobResultType Fls_Write(uint32_t TargetAddress,
                            const uint32_t * SourceAddressPtr,
                            Fls_LengthType Length,
                            const boolean bAsynch
                                       )
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	70fb      	strb	r3, [r7, #3]
	Fls_eJobResult = (FLS_JobResultType)FLS_JOB_FAILED;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <Fls_Write+0x34>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]

	Fls_eJobResult = Fls_IPW_SectorWrite(TargetAddress, Length, SourceAddressPtr, bAsynch);
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f001 f9e8 	bl	8001f58 <Fls_IPW_SectorWrite>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <Fls_Write+0x34>)
 8000b8e:	701a      	strb	r2, [r3, #0]
    
    return Fls_eJobResult;
 8000b90:	4b02      	ldr	r3, [pc, #8]	; (8000b9c <Fls_Write+0x34>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000002c 	.word	0x2000002c

08000ba0 <Fls_Erase>:
 *
 */
FLS_JobResultType Fls_Erase(Fls_Sector  Sector, 
                         Fls_LengthType Length
                        )
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
	Fls_eJobResult = (FLS_JobResultType)FLS_JOB_FAILED;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <Fls_Erase+0x30>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]

	Fls_eJobResult = Fls_IPW_SectorErase(Sector, FALSE);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 f9e1 	bl	8001f7e <Fls_IPW_SectorErase>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <Fls_Erase+0x30>)
 8000bc2:	701a      	strb	r2, [r3, #0]

    return Fls_eJobResult;
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <Fls_Erase+0x30>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000002c 	.word	0x2000002c

08000bd4 <CAN_StatusMailBox>:

	return RetVal;
}

uint8_t CAN_StatusMailBox()
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	71fb      	strb	r3, [r7, #7]
    /* Check that the Rx FIFO 0 is not empty */
    if ((CAN1->RF0R & (1<<5)) == 0U)
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <CAN_StatusMailBox+0x28>)
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	f003 0320 	and.w	r3, r3, #32
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <CAN_StatusMailBox+0x1a>
    {
		RetVal = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	71fb      	strb	r3, [r7, #7]
    }
	return RetVal;
 8000bee:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40006400 	.word	0x40006400

08000c00 <CAN_GetID>:

uint16_t CAN_GetID()
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
	uint16_t RetVal = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	80fb      	strh	r3, [r7, #6]
    /* get ID*/
    RetVal = ((CAN_RI0R_STID & CAN1->sFIFOMailBox[0].RIR) >> 21U);
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <CAN_GetID+0x28>)
 8000c0c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000c10:	0d5b      	lsrs	r3, r3, #21
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c18:	80fb      	strh	r3, [r7, #6]

	return RetVal;
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40006400 	.word	0x40006400

08000c2c <CAN_GetDataLength>:

uint8_t CAN_GetDataLength()
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
    /* get ID*/
    RetVal = ((CAN_RDT0R_DLC & CAN1->sFIFOMailBox[0].RDTR) >> 0);
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <CAN_GetDataLength+0x28>)
 8000c38:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	71fb      	strb	r3, [r7, #7]

	return RetVal;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40006400 	.word	0x40006400

08000c58 <CAN_ReadData>:

uint8_t CAN_ReadData(uint8_t cData[])
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
    /* Get the data */
    cData[0] = (uint8_t)((CAN_RDL0R_DATA0 & CAN1->sFIFOMailBox[0].RDLR) >> 0U );
 8000c64:	4b21      	ldr	r3, [pc, #132]	; (8000cec <CAN_ReadData+0x94>)
 8000c66:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	701a      	strb	r2, [r3, #0]
    cData[1] = (uint8_t)((CAN_RDL0R_DATA1 & CAN1->sFIFOMailBox[0].RDLR) >> 8U );
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <CAN_ReadData+0x94>)
 8000c72:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000c76:	0a1a      	lsrs	r2, r3, #8
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	701a      	strb	r2, [r3, #0]
    cData[2] = (uint8_t)((CAN_RDL0R_DATA2 & CAN1->sFIFOMailBox[0].RDLR) >> 16U);
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <CAN_ReadData+0x94>)
 8000c82:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000c86:	0c1a      	lsrs	r2, r3, #16
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3302      	adds	r3, #2
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	701a      	strb	r2, [r3, #0]
    cData[3] = (uint8_t)((CAN_RDL0R_DATA3 & CAN1->sFIFOMailBox[0].RDLR) >> 24U);
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <CAN_ReadData+0x94>)
 8000c92:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000c96:	0e1a      	lsrs	r2, r3, #24
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3303      	adds	r3, #3
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	701a      	strb	r2, [r3, #0]
    cData[4] = (uint8_t)((CAN_RDH0R_DATA4 & CAN1->sFIFOMailBox[0].RDHR) >> 0U );
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <CAN_ReadData+0x94>)
 8000ca2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	701a      	strb	r2, [r3, #0]
    cData[5] = (uint8_t)((CAN_RDH0R_DATA5 & CAN1->sFIFOMailBox[0].RDHR) >> 8U );
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <CAN_ReadData+0x94>)
 8000cb0:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000cb4:	0a1a      	lsrs	r2, r3, #8
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3305      	adds	r3, #5
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	701a      	strb	r2, [r3, #0]
    cData[6] = (uint8_t)((CAN_RDH0R_DATA6 & CAN1->sFIFOMailBox[0].RDHR) >> 16U);
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <CAN_ReadData+0x94>)
 8000cc0:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000cc4:	0c1a      	lsrs	r2, r3, #16
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3306      	adds	r3, #6
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	701a      	strb	r2, [r3, #0]
    cData[7] = (uint8_t)((CAN_RDH0R_DATA7 & CAN1->sFIFOMailBox[0].RDHR) >> 24U);
 8000cce:	4b07      	ldr	r3, [pc, #28]	; (8000cec <CAN_ReadData+0x94>)
 8000cd0:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000cd4:	0e1a      	lsrs	r2, r3, #24
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3307      	adds	r3, #7
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	701a      	strb	r2, [r3, #0]

    return RetVal;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40006400 	.word	0x40006400

08000cf0 <CAN_Release>:

uint8_t CAN_Release()
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	71fb      	strb	r3, [r7, #7]
	/*set bit release FIFO0 output mailbox*/
	CAN1->RF0R |= (1<<5);
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <CAN_Release+0x24>)
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <CAN_Release+0x24>)
 8000d00:	f043 0320 	orr.w	r3, r3, #32
 8000d04:	60d3      	str	r3, [r2, #12]

	return RetVal;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	40006400 	.word	0x40006400

08000d18 <CAN_ExitSleepMode>:

uint8_t CAN_ExitSleepMode()
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	71fb      	strb	r3, [r7, #7]
	/* Exit from sleep mode */
  	CAN1->MCR &= ~((uint16_t)(1<<1));
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <CAN_ExitSleepMode+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <CAN_ExitSleepMode+0x24>)
 8000d28:	f023 0302 	bic.w	r3, r3, #2
 8000d2c:	6013      	str	r3, [r2, #0]

	return RetVal;
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	40006400 	.word	0x40006400

08000d40 <CAN_RXTimeTrigger>:

uint8_t CAN_RXTimeTrigger(uint8_t Mode)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
	if(Mode == 1)
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d106      	bne.n	8000d62 <CAN_RXTimeTrigger+0x22>
	{
		CAN1->MCR |= (1<<7);
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <CAN_RXTimeTrigger+0x44>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <CAN_RXTimeTrigger+0x44>)
 8000d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e008      	b.n	8000d74 <CAN_RXTimeTrigger+0x34>
	}
	else if(Mode == 0)
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d105      	bne.n	8000d74 <CAN_RXTimeTrigger+0x34>
	{
		CAN1->MCR &= ~(1<<7);
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <CAN_RXTimeTrigger+0x44>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <CAN_RXTimeTrigger+0x44>)
 8000d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d72:	6013      	str	r3, [r2, #0]
	}

	return RetVal;
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40006400 	.word	0x40006400

08000d88 <CAN_AutoRetransmit>:

uint8_t CAN_AutoRetransmit()
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	71fb      	strb	r3, [r7, #7]
	/* Set the automatic retransmission */
	CAN1->MCR |= (1<<4);
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <CAN_AutoRetransmit+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <CAN_AutoRetransmit+0x24>)
 8000d98:	f043 0310 	orr.w	r3, r3, #16
 8000d9c:	6013      	str	r3, [r2, #0]

	return RetVal;
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	40006400 	.word	0x40006400

08000db0 <CAN_LockFIFOMode>:

uint8_t CAN_LockFIFOMode()
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	71fb      	strb	r3, [r7, #7]
	/* Receive FIFO locked against overrun */
	CAN1->MCR |= (1<<3);
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <CAN_LockFIFOMode+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <CAN_LockFIFOMode+0x24>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6013      	str	r3, [r2, #0]

	return RetVal;
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	40006400 	.word	0x40006400

08000dd8 <CAN_SetMCRINRQ>:

	return RetVal;
}

uint8_t CAN_SetMCRINRQ(uint8_t Mode)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
	 /* Request leave initialisation */
		if(Mode == 0)
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d106      	bne.n	8000dfa <CAN_SetMCRINRQ+0x22>
		{
			CAN1->MCR &= ~(1U);
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <CAN_SetMCRINRQ+0x3c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <CAN_SetMCRINRQ+0x3c>)
 8000df2:	f023 0301 	bic.w	r3, r3, #1
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	e005      	b.n	8000e06 <CAN_SetMCRINRQ+0x2e>
		}
		else
		{
		    CAN1->MCR |= (1U);
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <CAN_SetMCRINRQ+0x3c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <CAN_SetMCRINRQ+0x3c>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6013      	str	r3, [r2, #0]
		}

		return RetVal;
 8000e06:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	40006400 	.word	0x40006400

08000e18 <CAN_InitModeFilter>:

uint8_t CAN_InitModeFilter(uint8_t Mode)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
	if(Mode == 1)
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d108      	bne.n	8000e3e <CAN_InitModeFilter+0x26>
	{
	    /* Initialisation mode for the filter */
    	CAN1->FMR |= 1U;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <CAN_InitModeFilter+0x4c>)
 8000e2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e32:	4a0c      	ldr	r2, [pc, #48]	; (8000e64 <CAN_InitModeFilter+0x4c>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 8000e3c:	e00a      	b.n	8000e54 <CAN_InitModeFilter+0x3c>
	}
	else if(Mode ==0)
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d107      	bne.n	8000e54 <CAN_InitModeFilter+0x3c>
	{
		/* Leave the initialisation mode for the filter */
        CAN1->FMR &= ~1U;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <CAN_InitModeFilter+0x4c>)
 8000e46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e4a:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <CAN_InitModeFilter+0x4c>)
 8000e4c:	f023 0301 	bic.w	r3, r3, #1
 8000e50:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	}

	return RetVal;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40006400 	.word	0x40006400

08000e68 <CAN_DeInitFilter>:

uint8_t CAN_DeInitFilter(uint32_t bank)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
	CAN1->FA1R &= ~(bank);
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <CAN_DeInitFilter+0x2c>)
 8000e76:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	4905      	ldr	r1, [pc, #20]	; (8000e94 <CAN_DeInitFilter+0x2c>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	return RetVal;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40006400 	.word	0x40006400

08000e98 <CAN_FilterScale>:
uint8_t CAN_FilterScale(uint32_t bank,CAN_FilterTypeDef *sFilterConfig)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	uint8_t RetVal = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
	/* 32-bit scale for the filter */
    CAN1->FS1R &= ~(bank);
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <CAN_FilterScale+0x64>)
 8000ea8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	4912      	ldr	r1, [pc, #72]	; (8000efc <CAN_FilterScale+0x64>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR1 =
    ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	0419      	lsls	r1, r3, #16
    (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	b29a      	uxth	r2, r3
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <CAN_FilterScale+0x64>)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	695b      	ldr	r3, [r3, #20]
    ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000eca:	430a      	orrs	r2, r1
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ecc:	3348      	adds	r3, #72	; 0x48
 8000ece:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR2 =
    ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	0419      	lsls	r1, r3, #16
    (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	b29a      	uxth	r2, r3
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <CAN_FilterScale+0x64>)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	695b      	ldr	r3, [r3, #20]
    ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ee4:	430a      	orrs	r2, r1
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ee6:	3348      	adds	r3, #72	; 0x48
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4403      	add	r3, r0
 8000eec:	605a      	str	r2, [r3, #4]

	return RetVal;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	40006400 	.word	0x40006400

08000f00 <CAN_FilterMode>:

uint8_t CAN_FilterMode(uint32_t bank)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
    /* Id/Mask mode for the filter*/
	CAN1->FM1R &= ~(bank);
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <CAN_FilterMode+0x2c>)
 8000f0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	4905      	ldr	r1, [pc, #20]	; (8000f2c <CAN_FilterMode+0x2c>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204

	return RetVal;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	40006400 	.word	0x40006400

08000f30 <CAN_FilterFIFOAs>:

uint8_t CAN_FilterFIFOAs(uint32_t bank)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(bank);
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <CAN_FilterFIFOAs+0x2c>)
 8000f3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	4905      	ldr	r1, [pc, #20]	; (8000f5c <CAN_FilterFIFOAs+0x2c>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214

	return RetVal;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	40006400 	.word	0x40006400

08000f60 <CAN_InitFilter>:

uint8_t CAN_InitFilter(uint32_t bank)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
    /* FIFO 0 assignation for the filter */
    CAN1->FA1R |= bank;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <CAN_InitFilter+0x2c>)
 8000f6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f72:	4906      	ldr	r1, [pc, #24]	; (8000f8c <CAN_InitFilter+0x2c>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	return RetVal;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40006400 	.word	0x40006400

08000f90 <CAN_SetBitTime1>:
uint8_t CAN_SetBitTime1(uint8_t Time1)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
    /* FIFO 0 assignation for the filter */
    CAN1->BTR = ((CAN1->BTR)&(0xFFF0FFFF)|(Time1 <<16));
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <CAN_SetBitTime1+0x30>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	0412      	lsls	r2, r2, #16
 8000faa:	4611      	mov	r1, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <CAN_SetBitTime1+0x30>)
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	61d3      	str	r3, [r2, #28]

	return RetVal;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40006400 	.word	0x40006400

08000fc4 <CAN_SetBitTime2>:
uint8_t CAN_SetBitTime2(uint8_t Time2)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
    /* FIFO 0 assignation for the filter */
    CAN1->BTR = ((CAN1->BTR)&(0xFF8FFFFF)|(Time2 <<16));
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <CAN_SetBitTime2+0x30>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8000fda:	79fa      	ldrb	r2, [r7, #7]
 8000fdc:	0412      	lsls	r2, r2, #16
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <CAN_SetBitTime2+0x30>)
 8000fe2:	430b      	orrs	r3, r1
 8000fe4:	61d3      	str	r3, [r2, #28]

	return RetVal;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	40006400 	.word	0x40006400

08000ff8 <CAN_setBitBRP>:
uint8_t CAN_setBitBRP(uint8_t BRP)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
    /* FIFO 0 assignation for the filter */
    CAN1->BTR |= BRP;
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <CAN_setBitBRP+0x28>)
 8001008:	69da      	ldr	r2, [r3, #28]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4904      	ldr	r1, [pc, #16]	; (8001020 <CAN_setBitBRP+0x28>)
 800100e:	4313      	orrs	r3, r2
 8001010:	61cb      	str	r3, [r1, #28]

	return RetVal;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40006400 	.word	0x40006400

08001024 <Flash_Read_Driver>:

FLS_JobResultType Flash_Read_Driver(volatile uint32_t u32StartAddr,
					uint32_t *pDestAddressPtr,
					uint32_t u322Length
					)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
	FLS_JobResultType Fls_JobResult = FLS_JOB_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	74fb      	strb	r3, [r7, #19]
	for(int i=0; i < u322Length; i++)
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e00e      	b.n	8001058 <Flash_Read_Driver+0x34>
	{
		*(uint32_t *)(pDestAddressPtr + i) = *(uint32_t*)(u32StartAddr +i*4);
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	4619      	mov	r1, r3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	4413      	add	r3, r2
 800104e:	680a      	ldr	r2, [r1, #0]
 8001050:	601a      	str	r2, [r3, #0]
	for(int i=0; i < u322Length; i++)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8ec      	bhi.n	800103a <Flash_Read_Driver+0x16>

	}
	return Fls_JobResult;
 8001060:	7cfb      	ldrb	r3, [r7, #19]
}
 8001062:	4618      	mov	r0, r3
 8001064:	371c      	adds	r7, #28
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <FLASH_Write_Word>:

FLS_JobResultType FLASH_Write_Word(	volatile uint32_t u32StartAddr,
						const uint32_t u32Length,
						uint32_t *BufferWrite)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	/* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH_CR register */
	while((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 800107c:	bf00      	nop
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <FLASH_Write_Word+0xa4>)
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800108a:	d0f8      	beq.n	800107e <FLASH_Write_Word+0xe>
	/* Check unlock sequences */
	if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK )
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <FLASH_Write_Word+0xa4>)
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001098:	d101      	bne.n	800109e <FLASH_Write_Word+0x2e>
	{
		Linh_FLASH_Unlock();
 800109a:	f000 f8ab 	bl	80011f4 <Linh_FLASH_Unlock>
	}

/* If the previous operation is completed, proceed to program the new data */
	CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <FLASH_Write_Word+0xa4>)
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <FLASH_Write_Word+0xa4>)
 80010a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010a8:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_PSIZE_WORD;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <FLASH_Write_Word+0xa4>)
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	4a19      	ldr	r2, [pc, #100]	; (8001114 <FLASH_Write_Word+0xa4>)
 80010b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b4:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <FLASH_Write_Word+0xa4>)
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	4a16      	ldr	r2, [pc, #88]	; (8001114 <FLASH_Write_Word+0xa4>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6113      	str	r3, [r2, #16]

	uint32_t u32WriteAddr = u32StartAddr;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	617b      	str	r3, [r7, #20]
	for(int i=0; i < u32Length; i++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	e011      	b.n	80010f0 <FLASH_Write_Word+0x80>
	{
		u32WriteAddr += i;
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4413      	add	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
		*(__IO uint32_t*)(u32StartAddr +i*4) = *(uint32_t *)(BufferWrite + i);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4413      	add	r3, r2
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4611      	mov	r1, r2
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	440a      	add	r2, r1
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6013      	str	r3, [r2, #0]
	for(int i=0; i < u32Length; i++)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	3301      	adds	r3, #1
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8e9      	bhi.n	80010cc <FLASH_Write_Word+0x5c>

	}
	
	while((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 80010f8:	bf00      	nop
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <FLASH_Write_Word+0xa4>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001106:	d0f8      	beq.n	80010fa <FLASH_Write_Word+0x8a>
	return FLS_JOB_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <Flash_ASync_Erase>:

FLS_JobResultType Flash_ASync_Erase(volatile uint8_t sector, uint32_t u32TimeOut)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]

}
 8001124:	bf00      	nop
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <Flash_Sync_Erase>:

FLS_JobResultType Flash_Sync_Erase(volatile uint8_t sector, uint32_t u32TimeOut)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
	FLS_JobResultType eRetVal = FLS_JOB_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
	/* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH_CR register */
	while(((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && (u32TimeOut > 0U))
 8001144:	e007      	b.n	8001156 <Flash_Sync_Erase+0x22>
	{
		/*  Wating for Bsy bit */
		u32TimeOut --;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	603b      	str	r3, [r7, #0]
		if (u32TimeOut == 0)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <Flash_Sync_Erase+0x22>
		{
			//return FLASH_ERRORS_TIMEOUT;
			return FLS_JOB_FAILED;
 8001152:	2301      	movs	r3, #1
 8001154:	e048      	b.n	80011e8 <Flash_Sync_Erase+0xb4>
	while(((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && (u32TimeOut > 0U))
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001162:	d102      	bne.n	800116a <Flash_Sync_Erase+0x36>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1ed      	bne.n	8001146 <Flash_Sync_Erase+0x12>
		}
	}
	/* Check unlock sequences */
	if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK )
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001176:	d101      	bne.n	800117c <Flash_Sync_Erase+0x48>
	{
		Linh_FLASH_Unlock();
 8001178:	f000 f83c 	bl	80011f4 <Linh_FLASH_Unlock>
	memory block you wish to erase (SNB) in the FLASH_CR register
		3. Set the STRT bit in the FLASH_CR register
		4. Wait for the BSY bit to be cleared
	 */
	//clear psize
	FLASH->CR &= ~(3 << 8);
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 8001182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001186:	6113      	str	r3, [r2, #16]
	//erase 32 bit
	FLASH->CR |= FLASH_PSIZE_WORD;
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001192:	6113      	str	r3, [r2, #16]
	//clear SNB
	FLASH->CR &= ~(0x1F << 3);
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 800119a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800119e:	6113      	str	r3, [r2, #16]
	//set SER
	FLASH->CR |= 1 << 1;
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	6113      	str	r3, [r2, #16]
	//clear sector
	FLASH->CR |= sector << 3;
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	00da      	lsls	r2, r3, #3
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 80011ba:	430b      	orrs	r3, r1
 80011bc:	6113      	str	r3, [r2, #16]
	FLASH->CR |= 1 << 16;
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6113      	str	r3, [r2, #16]
	while((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 80011ca:	bf00      	nop
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d8:	d0f8      	beq.n	80011cc <Flash_Sync_Erase+0x98>
	CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <Flash_Sync_Erase+0xbc>)
 80011e0:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80011e4:	6113      	str	r3, [r2, #16]

	return FLS_JOB_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40023c00 	.word	0x40023c00

080011f4 <Linh_FLASH_Unlock>:


void Linh_FLASH_Unlock(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
 //HAL_StatusTypeDef status = HAL_OK;

 if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <Linh_FLASH_Unlock+0x28>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	da07      	bge.n	8001210 <Linh_FLASH_Unlock+0x1c>
 {
   /* Authorize the FLASH Registers access */
   WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <Linh_FLASH_Unlock+0x28>)
 8001202:	4a07      	ldr	r2, [pc, #28]	; (8001220 <Linh_FLASH_Unlock+0x2c>)
 8001204:	605a      	str	r2, [r3, #4]
   WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <Linh_FLASH_Unlock+0x28>)
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <Linh_FLASH_Unlock+0x30>)
 800120a:	605a      	str	r2, [r3, #4]

   /* Verify Flash is unlocked */
   if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <Linh_FLASH_Unlock+0x28>)
 800120e:	691b      	ldr	r3, [r3, #16]
     //status = HAL_ERROR;
   }
 }

 //return status;
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023c00 	.word	0x40023c00
 8001220:	45670123 	.word	0x45670123
 8001224:	cdef89ab 	.word	0xcdef89ab

08001228 <GPIO_PeriClockControl>:
 /*
*	GPIO control
*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d161      	bne.n	80012fe <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a65      	ldr	r2, [pc, #404]	; (80013d4 <GPIO_PeriClockControl+0x1ac>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d106      	bne.n	8001250 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8001242:	4b65      	ldr	r3, [pc, #404]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a64      	ldr	r2, [pc, #400]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	e056      	b.n	80012fe <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOB)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a62      	ldr	r2, [pc, #392]	; (80013dc <GPIO_PeriClockControl+0x1b4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d106      	bne.n	8001266 <GPIO_PeriClockControl+0x3e>
		{
			GPIOB_PCLK_EN();
 8001258:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a5e      	ldr	r2, [pc, #376]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 800125e:	f043 0302 	orr.w	r3, r3, #2
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	e04b      	b.n	80012fe <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOC)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a5d      	ldr	r2, [pc, #372]	; (80013e0 <GPIO_PeriClockControl+0x1b8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d106      	bne.n	800127c <GPIO_PeriClockControl+0x54>
		{
			GPIOC_PCLK_EN();
 800126e:	4b5a      	ldr	r3, [pc, #360]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a59      	ldr	r2, [pc, #356]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	e040      	b.n	80012fe <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOD)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a59      	ldr	r2, [pc, #356]	; (80013e4 <GPIO_PeriClockControl+0x1bc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d106      	bne.n	8001292 <GPIO_PeriClockControl+0x6a>
		{
			GPIOD_PCLK_EN();
 8001284:	4b54      	ldr	r3, [pc, #336]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	4a53      	ldr	r2, [pc, #332]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	6313      	str	r3, [r2, #48]	; 0x30
 8001290:	e035      	b.n	80012fe <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a54      	ldr	r2, [pc, #336]	; (80013e8 <GPIO_PeriClockControl+0x1c0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d106      	bne.n	80012a8 <GPIO_PeriClockControl+0x80>
		{
			GPIOE_PCLK_EN();
 800129a:	4b4f      	ldr	r3, [pc, #316]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a4e      	ldr	r2, [pc, #312]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 80012a0:	f043 0310 	orr.w	r3, r3, #16
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	e02a      	b.n	80012fe <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a50      	ldr	r2, [pc, #320]	; (80013ec <GPIO_PeriClockControl+0x1c4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d106      	bne.n	80012be <GPIO_PeriClockControl+0x96>
		{
			GPIOF_PCLK_EN();
 80012b0:	4b49      	ldr	r3, [pc, #292]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4a48      	ldr	r2, [pc, #288]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 80012b6:	f043 0320 	orr.w	r3, r3, #32
 80012ba:	6313      	str	r3, [r2, #48]	; 0x30
 80012bc:	e01f      	b.n	80012fe <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOG)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4b      	ldr	r2, [pc, #300]	; (80013f0 <GPIO_PeriClockControl+0x1c8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d106      	bne.n	80012d4 <GPIO_PeriClockControl+0xac>
		{
			GPIOG_PCLK_EN();
 80012c6:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a43      	ldr	r2, [pc, #268]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 80012cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	e014      	b.n	80012fe <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOH)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a47      	ldr	r2, [pc, #284]	; (80013f4 <GPIO_PeriClockControl+0x1cc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d106      	bne.n	80012ea <GPIO_PeriClockControl+0xc2>
		{
			GPIOH_PCLK_EN();
 80012dc:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4a3d      	ldr	r2, [pc, #244]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 80012e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
 80012e8:	e009      	b.n	80012fe <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a42      	ldr	r2, [pc, #264]	; (80013f8 <GPIO_PeriClockControl+0x1d0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d105      	bne.n	80012fe <GPIO_PeriClockControl+0xd6>
		{
			GPIOI_PCLK_EN();
 80012f2:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}

	if(EnorDi == DISABLE)
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d161      	bne.n	80013c8 <GPIO_PeriClockControl+0x1a0>
	{
		if(pGPIOx == GPIOA)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a33      	ldr	r2, [pc, #204]	; (80013d4 <GPIO_PeriClockControl+0x1ac>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d106      	bne.n	800131a <GPIO_PeriClockControl+0xf2>
		{
			GPIOA_PCLK_DIS();
 800130c:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a31      	ldr	r2, [pc, #196]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001312:	f023 0301 	bic.w	r3, r3, #1
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DIS();
		}
	}
}
 8001318:	e056      	b.n	80013c8 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOB)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a2f      	ldr	r2, [pc, #188]	; (80013dc <GPIO_PeriClockControl+0x1b4>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d106      	bne.n	8001330 <GPIO_PeriClockControl+0x108>
			GPIOB_PCLK_DIS();
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a2c      	ldr	r2, [pc, #176]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001328:	f023 0302 	bic.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800132e:	e04b      	b.n	80013c8 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOC)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a2b      	ldr	r2, [pc, #172]	; (80013e0 <GPIO_PeriClockControl+0x1b8>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d106      	bne.n	8001346 <GPIO_PeriClockControl+0x11e>
			GPIOC_PCLK_DIS();
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	4a26      	ldr	r2, [pc, #152]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 800133e:	f023 0304 	bic.w	r3, r3, #4
 8001342:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001344:	e040      	b.n	80013c8 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOD)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a26      	ldr	r2, [pc, #152]	; (80013e4 <GPIO_PeriClockControl+0x1bc>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d106      	bne.n	800135c <GPIO_PeriClockControl+0x134>
			GPIOD_PCLK_DIS();
 800134e:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001354:	f023 0308 	bic.w	r3, r3, #8
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
}
 800135a:	e035      	b.n	80013c8 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <GPIO_PeriClockControl+0x1c0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d106      	bne.n	8001372 <GPIO_PeriClockControl+0x14a>
			GPIOE_PCLK_DIS();
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 800136a:	f023 0310 	bic.w	r3, r3, #16
 800136e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001370:	e02a      	b.n	80013c8 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <GPIO_PeriClockControl+0x1c4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d106      	bne.n	8001388 <GPIO_PeriClockControl+0x160>
			GPIOF_PCLK_DIS();
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001380:	f023 0320 	bic.w	r3, r3, #32
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001386:	e01f      	b.n	80013c8 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOG)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <GPIO_PeriClockControl+0x1c8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d106      	bne.n	800139e <GPIO_PeriClockControl+0x176>
			GPIOG_PCLK_DIS();
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 8001396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800139a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800139c:	e014      	b.n	80013c8 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOH)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <GPIO_PeriClockControl+0x1cc>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d106      	bne.n	80013b4 <GPIO_PeriClockControl+0x18c>
			GPIOH_PCLK_DIS();
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 80013ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013b2:	e009      	b.n	80013c8 <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOI)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <GPIO_PeriClockControl+0x1d0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d105      	bne.n	80013c8 <GPIO_PeriClockControl+0x1a0>
			GPIOI_PCLK_DIS();
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <GPIO_PeriClockControl+0x1b0>)
 80013c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020c00 	.word	0x40020c00
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40021400 	.word	0x40021400
 80013f0:	40021800 	.word	0x40021800
 80013f4:	40021c00 	.word	0x40021c00
 80013f8:	40022000 	.word	0x40022000

080013fc <GPIO_Init>:



void GPIO_Init(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *GPIO_PinConfig)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	uint32_t temp;
	//enable GPIOx clock
	GPIO_PeriClockControl(pGPIOx, ENABLE);
 8001406:	2101      	movs	r1, #1
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff0d 	bl	8001228 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(GPIO_PinConfig->GPIO_PinMode <= GPIO_MODE_ANALOG)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	785b      	ldrb	r3, [r3, #1]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d81a      	bhi.n	800144c <GPIO_Init+0x50>
	{
		/*the none interrupt mode*/
		temp = ((uint32_t)GPIO_PinConfig->GPIO_PinMode) << (2 * GPIO_PinConfig->GPIO_PinNumber);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	461a      	mov	r2, r3
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	60fb      	str	r3, [r7, #12]
		pGPIOx->MODER &= ~((uint32_t)0x3 << (2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber));	//clear 2 bit
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2103      	movs	r1, #3
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	401a      	ands	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	601a      	str	r2, [r3, #0]
		pGPIOx->MODER |= temp;		//gan gia tri 2 bit chon che do
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	601a      	str	r2, [r3, #0]
	{
		/*with interrupt mode- chua viet duoc :))*/
	}

	//2. configure the speed
	temp = ((uint32_t)GPIO_PinConfig->GPIO_Speed)<<(2 * GPIO_PinConfig->GPIO_PinNumber);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	789b      	ldrb	r3, [r3, #2]
 8001450:	461a      	mov	r2, r3
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	60fb      	str	r3, [r7, #12]
	pGPIOx->OSPEED &= ~((uint32_t)0x3 << 2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber);			//clear 2 bit
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2103      	movs	r1, #3
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	401a      	ands	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	609a      	str	r2, [r3, #8]
	pGPIOx->OSPEED |= temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (GPIO_PinConfig->GPIO_PuPdControl) << (2 * GPIO_PinConfig->GPIO_PinNumber);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	78db      	ldrb	r3, [r3, #3]
 8001486:	461a      	mov	r2, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	60fb      	str	r3, [r7, #12]
	pGPIOx->PUPDR &= ~((uint32_t)0x3 << (2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber));		//clear 2 bit
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2103      	movs	r1, #3
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	401a      	ands	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	60da      	str	r2, [r3, #12]
	pGPIOx->PUPDR |= temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	60da      	str	r2, [r3, #12]

	//4. configure the otyper
	temp = (GPIO_PinConfig->GPIOOTyper) << (GPIO_PinConfig->GPIO_PinNumber);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	791b      	ldrb	r3, [r3, #4]
 80014bc:	461a      	mov	r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	60fb      	str	r3, [r7, #12]
	pGPIOx->OTYPER &= ~((uint32_t)0x1 << (uint32_t)(GPIO_PinConfig->GPIO_PinNumber));			//clear 1 bit
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	2301      	movs	r3, #1
 80014d4:	408b      	lsls	r3, r1
 80014d6:	43db      	mvns	r3, r3
 80014d8:	401a      	ands	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	605a      	str	r2, [r3, #4]
	pGPIOx->OTYPER |= temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(GPIO_PinConfig->GPIO_PinMode == GPIO_MODE_ALTFN)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	785b      	ldrb	r3, [r3, #1]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d12d      	bne.n	800154e <GPIO_Init+0x152>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;
		/*	pin0-7:AFR[0]	;	pin8-15:AFR[1]	*/
		temp1 = GPIO_PinConfig->GPIO_PinNumber / 8;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	08db      	lsrs	r3, r3, #3
 80014f8:	72fb      	strb	r3, [r7, #11]
		temp2 = GPIO_PinConfig->GPIO_PinNumber  % 8;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	72bb      	strb	r3, [r7, #10]
		pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); 										//clear 4 bit
 8001504:	7afa      	ldrb	r2, [r7, #11]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150e:	7aba      	ldrb	r2, [r7, #10]
 8001510:	0092      	lsls	r2, r2, #2
 8001512:	210f      	movs	r1, #15
 8001514:	fa01 f202 	lsl.w	r2, r1, r2
 8001518:	43d2      	mvns	r2, r2
 800151a:	4611      	mov	r1, r2
 800151c:	7afa      	ldrb	r2, [r7, #11]
 800151e:	4019      	ands	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3208      	adds	r2, #8
 8001524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOx->AFR[temp1] |= (GPIO_PinConfig->GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8001528:	7afa      	ldrb	r2, [r7, #11]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	7952      	ldrb	r2, [r2, #5]
 8001536:	4611      	mov	r1, r2
 8001538:	7aba      	ldrb	r2, [r7, #10]
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	4611      	mov	r1, r2
 8001542:	7afa      	ldrb	r2, [r7, #11]
 8001544:	4319      	orrs	r1, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <GPIO_TogglePin>:



void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, GPIO_PIN_NUMBER PinNumber)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	460b      	mov	r3, r1
 8001560:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR  ^= ( 1 << PinNumber);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	78fa      	ldrb	r2, [r7, #3]
 8001568:	2101      	movs	r1, #1
 800156a:	fa01 f202 	lsl.w	r2, r1, r2
 800156e:	405a      	eors	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	615a      	str	r2, [r3, #20]
	}else
	{
		pGPIOx->ODR |= 1<<PinNumber;
	}
	*/
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <UART5_Config>:
    /*all bit of usart->sr are set by hardware*/
    pUSARTx->SR = (uint16_t)~(USART_FLAG);
}

void UART5_Config()
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
	  /* Peripheral clock enable */
	  RCC->APB1ENR |= 1<<20;
 8001586:	4b23      	ldr	r3, [pc, #140]	; (8001614 <UART5_Config+0x94>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a22      	ldr	r2, [pc, #136]	; (8001614 <UART5_Config+0x94>)
 800158c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
	  RCC->AHB1ENR |= 1<<2;
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <UART5_Config+0x94>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <UART5_Config+0x94>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
	  RCC->AHB1ENR |= 1<<3;
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <UART5_Config+0x94>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <UART5_Config+0x94>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
			UART5 GPIO Configuration
			PC12     ------> UART5_TX
			PD2     ------> UART5_RX
		*/
	  	GPIO_PinConfig_t GPIO_InitStruct;
		GPIO_InitStruct.GPIO_PinNumber = GPIO_PIN_12;
 80015aa:	230c      	movs	r3, #12
 80015ac:	703b      	strb	r3, [r7, #0]
		GPIO_InitStruct.GPIO_PinMode = 0x00000002U;
 80015ae:	2302      	movs	r3, #2
 80015b0:	707b      	strb	r3, [r7, #1]
		GPIO_InitStruct.GPIO_PuPdControl = GPIO_PullUp;
 80015b2:	2301      	movs	r3, #1
 80015b4:	70fb      	strb	r3, [r7, #3]
		GPIO_InitStruct.GPIO_Speed = GPIO_SPEED_VeryHIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	70bb      	strb	r3, [r7, #2]
		GPIO_InitStruct.GPIO_PinAltFunMode = AF8;
 80015ba:	2308      	movs	r3, #8
 80015bc:	717b      	strb	r3, [r7, #5]
		GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	463b      	mov	r3, r7
 80015c0:	4619      	mov	r1, r3
 80015c2:	4815      	ldr	r0, [pc, #84]	; (8001618 <UART5_Config+0x98>)
 80015c4:	f7ff ff1a 	bl	80013fc <GPIO_Init>

		GPIO_InitStruct.GPIO_PinNumber = GPIO_PIN_2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	703b      	strb	r3, [r7, #0]
		GPIO_InitStruct.GPIO_PinMode = 0x00000002U;
 80015cc:	2302      	movs	r3, #2
 80015ce:	707b      	strb	r3, [r7, #1]
		GPIO_InitStruct.GPIO_PuPdControl = GPIO_PullUp;
 80015d0:	2301      	movs	r3, #1
 80015d2:	70fb      	strb	r3, [r7, #3]
		GPIO_InitStruct.GPIO_Speed = GPIO_SPEED_VeryHIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	70bb      	strb	r3, [r7, #2]
		GPIO_InitStruct.GPIO_PinAltFunMode = AF8;
 80015d8:	2308      	movs	r3, #8
 80015da:	717b      	strb	r3, [r7, #5]
		GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <UART5_Config+0x9c>)
 80015e2:	f7ff ff0b 	bl	80013fc <GPIO_Init>

		UART5->CR1 &= ~(1 << 13);
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <UART5_Config+0xa0>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <UART5_Config+0xa0>)
 80015ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015f0:	60d3      	str	r3, [r2, #12]
		/* Set the UART Communication parameters */
		UART5->BRR = 0x683;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <UART5_Config+0xa0>)
 80015f4:	f240 6283 	movw	r2, #1667	; 0x683
 80015f8:	609a      	str	r2, [r3, #8]
		UART5->CR1 = 0x0c;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <UART5_Config+0xa0>)
 80015fc:	220c      	movs	r2, #12
 80015fe:	60da      	str	r2, [r3, #12]
		/* Enable the peripheral */
		UART5->CR1 |= 1UL << 13;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <UART5_Config+0xa0>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <UART5_Config+0xa0>)
 8001606:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	40020800 	.word	0x40020800
 800161c:	40020c00 	.word	0x40020c00
 8001620:	40005000 	.word	0x40005000

08001624 <UART_Transmit1>:

void UART_Transmit1(uint32_t *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	4613      	mov	r3, r2
 8001632:	80fb      	strh	r3, [r7, #6]
    uint8_t TxXferSize = Size;
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	75bb      	strb	r3, [r7, #22]
    uint8_t TxXferCount = Size;
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	75fb      	strb	r3, [r7, #23]

    while (TxXferCount > 0U)
 800163c:	e00f      	b.n	800165e <UART_Transmit1+0x3a>
    {
    	while (((UART5->SR & (1 << 7)) == (1 << 7) ? SET : RESET) == RESET);
 800163e:	bf00      	nop
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <UART_Transmit1+0x4c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001648:	2b80      	cmp	r3, #128	; 0x80
 800164a:	d1f9      	bne.n	8001640 <UART_Transmit1+0x1c>
      TxXferCount--;
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	3b01      	subs	r3, #1
 8001650:	75fb      	strb	r3, [r7, #23]
      UART5->DR = (*pData++ & (uint8_t)0xFF);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	60ba      	str	r2, [r7, #8]
 8001658:	781a      	ldrb	r2, [r3, #0]
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <UART_Transmit1+0x4c>)
 800165c:	605a      	str	r2, [r3, #4]
    while (TxXferCount > 0U)
 800165e:	7dfb      	ldrb	r3, [r7, #23]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ec      	bne.n	800163e <UART_Transmit1+0x1a>
    }
}
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	40005000 	.word	0x40005000

08001674 <main>:
void TachSo(uint32_t t,uint32_t v, uint32_t s, uint32_t p, uint8_t *Tx);
uint32_t huart5;
uint32_t BufferWrite[3] = {0x1,0x2,0x3};
uint32_t *BufferRead;
int main()
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b083      	sub	sp, #12
 8001678:	af02      	add	r7, sp, #8
	  SET_BIT(RCC->APB1ENR, (1<<25));
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <main+0x118>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a43      	ldr	r2, [pc, #268]	; (800178c <main+0x118>)
 8001680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
	  /* Delay after an RCC peripheral clock enabling */
	  Systick_Delay_ms(200);
 8001686:	20c8      	movs	r0, #200	; 0xc8
 8001688:	f000 f92a 	bl	80018e0 <Systick_Delay_ms>
      SET_BIT(RCC->APB1ENR, (1<<28));
 800168c:	4b3f      	ldr	r3, [pc, #252]	; (800178c <main+0x118>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	4a3e      	ldr	r2, [pc, #248]	; (800178c <main+0x118>)
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
      Systick_Delay_ms(200);
 8001698:	20c8      	movs	r0, #200	; 0xc8
 800169a:	f000 f921 	bl	80018e0 <Systick_Delay_ms>
	  MX_CAN1_Init();
 800169e:	f000 f943 	bl	8001928 <MX_CAN1_Init>
	  CAN_SetInterrupt();
 80016a2:	f000 f88d 	bl	80017c0 <CAN_SetInterrupt>
	  CAN_BaudRate(200000);
 80016a6:	483a      	ldr	r0, [pc, #232]	; (8001790 <main+0x11c>)
 80016a8:	f7ff fa30 	bl	8000b0c <CAN_BaudRate>
	  CAN_Start(&hcan1);
 80016ac:	4839      	ldr	r0, [pc, #228]	; (8001794 <main+0x120>)
 80016ae:	f7ff fa05 	bl	8000abc <CAN_Start>

	  UART5_Config();
 80016b2:	f7ff ff65 	bl	8001580 <UART5_Config>
	  GPIO_Lib_Config();
 80016b6:	f000 f999 	bl	80019ec <GPIO_Lib_Config>
	  /*doc quang duong tu flash*/
	  Fls_Read((uint32_t)SECTOR_3, &temps, 1);
 80016ba:	2201      	movs	r2, #1
 80016bc:	4936      	ldr	r1, [pc, #216]	; (8001798 <main+0x124>)
 80016be:	4837      	ldr	r0, [pc, #220]	; (800179c <main+0x128>)
 80016c0:	f7ff fa38 	bl	8000b34 <Fls_Read>
	  if(temps == 0xffffffff)
 80016c4:	4b34      	ldr	r3, [pc, #208]	; (8001798 <main+0x124>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016cc:	d112      	bne.n	80016f4 <main+0x80>
	  {
		  temps = s*10.0;
 80016ce:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <main+0x12c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe feec 	bl	80004b0 <__aeabi_f2d>
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <main+0x130>)
 80016de:	f7fe ff3f 	bl	8000560 <__aeabi_dmul>
 80016e2:	4603      	mov	r3, r0
 80016e4:	460c      	mov	r4, r1
 80016e6:	4618      	mov	r0, r3
 80016e8:	4621      	mov	r1, r4
 80016ea:	f7ff f94b 	bl	8000984 <__aeabi_d2uiz>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b29      	ldr	r3, [pc, #164]	; (8001798 <main+0x124>)
 80016f2:	601a      	str	r2, [r3, #0]
	  }
	  s = temps / 10.0;
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <main+0x124>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe feb7 	bl	800046c <__aeabi_ui2d>
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <main+0x130>)
 8001704:	f7ff f856 	bl	80007b4 <__aeabi_ddiv>
 8001708:	4603      	mov	r3, r0
 800170a:	460c      	mov	r4, r1
 800170c:	4618      	mov	r0, r3
 800170e:	4621      	mov	r1, r4
 8001710:	f7ff f958 	bl	80009c4 <__aeabi_d2f>
 8001714:	4602      	mov	r2, r0
 8001716:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <main+0x12c>)
 8001718:	601a      	str	r2, [r3, #0]
	while(1)
	{
		//s+=v/3600.0;				//mo phong dang chay
		temps = s*10.0;
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <main+0x12c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fec6 	bl	80004b0 <__aeabi_f2d>
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <main+0x130>)
 800172a:	f7fe ff19 	bl	8000560 <__aeabi_dmul>
 800172e:	4603      	mov	r3, r0
 8001730:	460c      	mov	r4, r1
 8001732:	4618      	mov	r0, r3
 8001734:	4621      	mov	r1, r4
 8001736:	f7ff f925 	bl	8000984 <__aeabi_d2uiz>
 800173a:	4602      	mov	r2, r0
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <main+0x124>)
 800173e:	601a      	str	r2, [r3, #0]
		Fls_Erase(Fls_Sector_3, 1);
 8001740:	2101      	movs	r1, #1
 8001742:	2003      	movs	r0, #3
 8001744:	f7ff fa2c 	bl	8000ba0 <Fls_Erase>
		Fls_Write((uint32_t)SECTOR_3, &temps, 1, FALSE);
 8001748:	2300      	movs	r3, #0
 800174a:	2201      	movs	r2, #1
 800174c:	4912      	ldr	r1, [pc, #72]	; (8001798 <main+0x124>)
 800174e:	4813      	ldr	r0, [pc, #76]	; (800179c <main+0x128>)
 8001750:	f7ff fa0a 	bl	8000b68 <Fls_Write>

		TachSo(t, v,temps,p,&UartTx);
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <main+0x134>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <main+0x138>)
 800175a:	6819      	ldr	r1, [r3, #0]
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <main+0x124>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <main+0x13c>)
 8001762:	681c      	ldr	r4, [r3, #0]
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <main+0x140>)
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	4623      	mov	r3, r4
 800176a:	f000 f999 	bl	8001aa0 <TachSo>
		UART_Transmit1(&huart5, &UartTx, 17, 100);
 800176e:	2364      	movs	r3, #100	; 0x64
 8001770:	2211      	movs	r2, #17
 8001772:	4910      	ldr	r1, [pc, #64]	; (80017b4 <main+0x140>)
 8001774:	4810      	ldr	r0, [pc, #64]	; (80017b8 <main+0x144>)
 8001776:	f7ff ff55 	bl	8001624 <UART_Transmit1>
		GPIO_TogglePin(GPIOD, GPIO_PIN_13);	//led cam
 800177a:	210d      	movs	r1, #13
 800177c:	480f      	ldr	r0, [pc, #60]	; (80017bc <main+0x148>)
 800177e:	f7ff feea 	bl	8001556 <GPIO_TogglePin>
		Systick_Delay_ms(2000);
 8001782:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001786:	f000 f8ab 	bl	80018e0 <Systick_Delay_ms>
		temps = s*10.0;
 800178a:	e7c6      	b.n	800171a <main+0xa6>
 800178c:	40023800 	.word	0x40023800
 8001790:	00030d40 	.word	0x00030d40
 8001794:	20000068 	.word	0x20000068
 8001798:	20000044 	.word	0x20000044
 800179c:	0800c000 	.word	0x0800c000
 80017a0:	20000004 	.word	0x20000004
 80017a4:	40240000 	.word	0x40240000
 80017a8:	2000000c 	.word	0x2000000c
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000008 	.word	0x20000008
 80017b4:	20000030 	.word	0x20000030
 80017b8:	20000050 	.word	0x20000050
 80017bc:	40020c00 	.word	0x40020c00

080017c0 <CAN_SetInterrupt>:
	}
}
void CAN_SetInterrupt(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	CAN1->IER |= (1<<1);
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <CAN_SetInterrupt+0x24>)
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <CAN_SetInterrupt+0x24>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	6153      	str	r3, [r2, #20]
	NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)20) & 0x1FUL));
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <CAN_SetInterrupt+0x28>)
 80017d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40006400 	.word	0x40006400
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	00000000 	.word	0x00000000

080017f0 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	GPIO_TogglePin(GPIOD, GPIO_PIN_15);		//led xanh
 80017f4:	210f      	movs	r1, #15
 80017f6:	4830      	ldr	r0, [pc, #192]	; (80018b8 <CAN1_RX0_IRQHandler+0xc8>)
 80017f8:	f7ff fead 	bl	8001556 <GPIO_TogglePin>
	CAN_GetRxMessage(&hcan1,0U,&RxHeader, RxData);
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <CAN1_RX0_IRQHandler+0xcc>)
 80017fe:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <CAN1_RX0_IRQHandler+0xd0>)
 8001800:	2100      	movs	r1, #0
 8001802:	4830      	ldr	r0, [pc, #192]	; (80018c4 <CAN1_RX0_IRQHandler+0xd4>)
 8001804:	f7ff f92e 	bl	8000a64 <CAN_GetRxMessage>
	if(RxHeader.StdId == 0x179)
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <CAN1_RX0_IRQHandler+0xd0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f240 1279 	movw	r2, #377	; 0x179
 8001810:	4293      	cmp	r3, r2
 8001812:	d11a      	bne.n	800184a <CAN1_RX0_IRQHandler+0x5a>
	{
		DataNode1 = RxData[0];
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <CAN1_RX0_IRQHandler+0xcc>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <CAN1_RX0_IRQHandler+0xd8>)
 800181c:	601a      	str	r2, [r3, #0]
		t = DataNode1;
 800181e:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <CAN1_RX0_IRQHandler+0xd8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a2a      	ldr	r2, [pc, #168]	; (80018cc <CAN1_RX0_IRQHandler+0xdc>)
 8001824:	6013      	str	r3, [r2, #0]
		p=RxData[1] + (RxData[2]<<8) + (RxData[3]<<16) + (RxData[4]<<24);
 8001826:	4b25      	ldr	r3, [pc, #148]	; (80018bc <CAN1_RX0_IRQHandler+0xcc>)
 8001828:	785b      	ldrb	r3, [r3, #1]
 800182a:	461a      	mov	r2, r3
 800182c:	4b23      	ldr	r3, [pc, #140]	; (80018bc <CAN1_RX0_IRQHandler+0xcc>)
 800182e:	789b      	ldrb	r3, [r3, #2]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	441a      	add	r2, r3
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <CAN1_RX0_IRQHandler+0xcc>)
 8001836:	78db      	ldrb	r3, [r3, #3]
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	441a      	add	r2, r3
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <CAN1_RX0_IRQHandler+0xcc>)
 800183e:	791b      	ldrb	r3, [r3, #4]
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	4413      	add	r3, r2
 8001844:	461a      	mov	r2, r3
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <CAN1_RX0_IRQHandler+0xe0>)
 8001848:	601a      	str	r2, [r3, #0]
	}
	if(RxHeader.StdId == 0x200)
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <CAN1_RX0_IRQHandler+0xd0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001852:	d129      	bne.n	80018a8 <CAN1_RX0_IRQHandler+0xb8>
	{
		DataNode2 = RxData[0];
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <CAN1_RX0_IRQHandler+0xcc>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <CAN1_RX0_IRQHandler+0xe4>)
 800185c:	601a      	str	r2, [r3, #0]
		v=DataNode2;
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <CAN1_RX0_IRQHandler+0xe4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <CAN1_RX0_IRQHandler+0xe8>)
 8001864:	6013      	str	r3, [r2, #0]
		s+=2*v/3600.0;
 8001866:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <CAN1_RX0_IRQHandler+0xec>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe20 	bl	80004b0 <__aeabi_f2d>
 8001870:	4604      	mov	r4, r0
 8001872:	460d      	mov	r5, r1
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <CAN1_RX0_IRQHandler+0xe8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fdf6 	bl	800046c <__aeabi_ui2d>
 8001880:	a30b      	add	r3, pc, #44	; (adr r3, 80018b0 <CAN1_RX0_IRQHandler+0xc0>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	f7fe ff95 	bl	80007b4 <__aeabi_ddiv>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7fe fcaf 	bl	80001f4 <__adddf3>
 8001896:	4603      	mov	r3, r0
 8001898:	460c      	mov	r4, r1
 800189a:	4618      	mov	r0, r3
 800189c:	4621      	mov	r1, r4
 800189e:	f7ff f891 	bl	80009c4 <__aeabi_d2f>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <CAN1_RX0_IRQHandler+0xec>)
 80018a6:	601a      	str	r2, [r3, #0]
	}
	//Systick_Delay_ms(200);

}
 80018a8:	bf00      	nop
 80018aa:	bdb0      	pop	{r4, r5, r7, pc}
 80018ac:	f3af 8000 	nop.w
 80018b0:	00000000 	.word	0x00000000
 80018b4:	40ac2000 	.word	0x40ac2000
 80018b8:	40020c00 	.word	0x40020c00
 80018bc:	20000060 	.word	0x20000060
 80018c0:	200000a0 	.word	0x200000a0
 80018c4:	20000068 	.word	0x20000068
 80018c8:	2000004c 	.word	0x2000004c
 80018cc:	2000000c 	.word	0x2000000c
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000054 	.word	0x20000054
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004

080018e0 <Systick_Delay_ms>:
void Systick_Delay_ms(uint32_t u32Delay)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	while(u32Delay)
 80018e8:	e013      	b.n	8001912 <Systick_Delay_ms+0x32>
	{
		/*Cortex System timer clock max 168/8 MHz*/
		Systick->RVR = 21000-1;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <Systick_Delay_ms+0x44>)
 80018ec:	f245 2207 	movw	r2, #20999	; 0x5207
 80018f0:	605a      	str	r2, [r3, #4]
		Systick->CVR = 0;
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <Systick_Delay_ms+0x44>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]

		/*no exception*/
		/*clear counter flag*/
		/*enable counter*/
		/*processor clock - 72M*/
		Systick->CSR = 0x05;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <Systick_Delay_ms+0x44>)
 80018fa:	2205      	movs	r2, #5
 80018fc:	601a      	str	r2, [r3, #0]

		while(((Systick->CSR) & (1<<16)) == 0)
 80018fe:	bf00      	nop
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <Systick_Delay_ms+0x44>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f9      	beq.n	8001900 <Systick_Delay_ms+0x20>
		{

		}
		--u32Delay;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	607b      	str	r3, [r7, #4]
	while(u32Delay)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1e8      	bne.n	80018ea <Systick_Delay_ms+0xa>
	}
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e010 	.word	0xe000e010

08001928 <MX_CAN1_Init>:

void MX_CAN1_Init()
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b094      	sub	sp, #80	; 0x50
 800192c:	af00      	add	r7, sp, #0
	  hcan1.Init.Prescaler = 16;
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <MX_CAN1_Init+0xc0>)
 8001930:	2210      	movs	r2, #16
 8001932:	601a      	str	r2, [r3, #0]
	  hcan1.Init.Mode = 0u;
 8001934:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <MX_CAN1_Init+0xc0>)
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
	  hcan1.Init.SyncJumpWidth = 0U;
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <MX_CAN1_Init+0xc0>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
	  hcan1.Init.TimeSeg1 = 1U;
 8001940:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <MX_CAN1_Init+0xc0>)
 8001942:	2201      	movs	r2, #1
 8001944:	60da      	str	r2, [r3, #12]
	  hcan1.Init.TimeSeg2 = 1U;
 8001946:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <MX_CAN1_Init+0xc0>)
 8001948:	2201      	movs	r2, #1
 800194a:	611a      	str	r2, [r3, #16]
	  hcan1.Init.TimeTriggeredMode = DISABLE;
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <MX_CAN1_Init+0xc0>)
 800194e:	2200      	movs	r2, #0
 8001950:	751a      	strb	r2, [r3, #20]
	  hcan1.Init.AutoBusOff = DISABLE;
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <MX_CAN1_Init+0xc0>)
 8001954:	2200      	movs	r2, #0
 8001956:	755a      	strb	r2, [r3, #21]
	  hcan1.Init.AutoWakeUp = DISABLE;
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <MX_CAN1_Init+0xc0>)
 800195a:	2200      	movs	r2, #0
 800195c:	759a      	strb	r2, [r3, #22]
	  hcan1.Init.AutoRetransmission = DISABLE;
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <MX_CAN1_Init+0xc0>)
 8001960:	2200      	movs	r2, #0
 8001962:	75da      	strb	r2, [r3, #23]
	  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <MX_CAN1_Init+0xc0>)
 8001966:	2200      	movs	r2, #0
 8001968:	761a      	strb	r2, [r3, #24]
	  hcan1.Init.TransmitFifoPriority = DISABLE;
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <MX_CAN1_Init+0xc0>)
 800196c:	2200      	movs	r2, #0
 800196e:	765a      	strb	r2, [r3, #25]
	  CAN_Init(&hcan1);
 8001970:	481d      	ldr	r0, [pc, #116]	; (80019e8 <MX_CAN1_Init+0xc0>)
 8001972:	f7ff f890 	bl	8000a96 <CAN_Init>

	  CAN_FilterTypeDef canfilterconfig;
	  canfilterconfig.FilterActivation = 1U;
 8001976:	2301      	movs	r3, #1
 8001978:	64bb      	str	r3, [r7, #72]	; 0x48
	  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 800197a:	230a      	movs	r3, #10
 800197c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  canfilterconfig.FilterFIFOAssignment = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	63bb      	str	r3, [r7, #56]	; 0x38
	  canfilterconfig.FilterIdHigh = (0x200<<5);
 8001982:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
	  canfilterconfig.FilterIdLow = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  canfilterconfig.FilterMaskIdHigh = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
	  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001990:	2300      	movs	r3, #0
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
	  canfilterconfig.FilterMode = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
	  canfilterconfig.FilterScale = 1U;
 8001998:	2301      	movs	r3, #1
 800199a:	647b      	str	r3, [r7, #68]	; 0x44
	  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 800199c:	2300      	movs	r3, #0
 800199e:	64fb      	str	r3, [r7, #76]	; 0x4c

	  CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80019a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a4:	4619      	mov	r1, r3
 80019a6:	4810      	ldr	r0, [pc, #64]	; (80019e8 <MX_CAN1_Init+0xc0>)
 80019a8:	f7ff f89b 	bl	8000ae2 <CAN_ConfigFilter>

	  CAN_FilterTypeDef canfilterconfig1;
	  canfilterconfig1.FilterActivation = 1U;
 80019ac:	2301      	movs	r3, #1
 80019ae:	623b      	str	r3, [r7, #32]
	  canfilterconfig1.FilterBank = 11;  // which filter bank to use from the assigned ones
 80019b0:	230b      	movs	r3, #11
 80019b2:	617b      	str	r3, [r7, #20]
	  canfilterconfig1.FilterFIFOAssignment = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
	  canfilterconfig1.FilterIdHigh = (0x179<<5);
 80019b8:	f642 7320 	movw	r3, #12064	; 0x2f20
 80019bc:	603b      	str	r3, [r7, #0]
	  canfilterconfig1.FilterIdLow = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
	  canfilterconfig1.FilterMaskIdHigh = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
	  canfilterconfig1.FilterMaskIdLow = 0x0000;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
	  canfilterconfig1.FilterMode = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
	  canfilterconfig1.FilterScale = 1U;
 80019ce:	2301      	movs	r3, #1
 80019d0:	61fb      	str	r3, [r7, #28]
	  canfilterconfig1.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24

	  CAN_ConfigFilter(&hcan1, &canfilterconfig1);
 80019d6:	463b      	mov	r3, r7
 80019d8:	4619      	mov	r1, r3
 80019da:	4803      	ldr	r0, [pc, #12]	; (80019e8 <MX_CAN1_Init+0xc0>)
 80019dc:	f7ff f881 	bl	8000ae2 <CAN_ConfigFilter>
}
 80019e0:	bf00      	nop
 80019e2:	3750      	adds	r7, #80	; 0x50
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000068 	.word	0x20000068

080019ec <GPIO_Lib_Config>:
void GPIO_Lib_Config()
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
	GPIO_PeriClockControl(GPIOB, ENABLE);
 80019f2:	2101      	movs	r1, #1
 80019f4:	4828      	ldr	r0, [pc, #160]	; (8001a98 <GPIO_Lib_Config+0xac>)
 80019f6:	f7ff fc17 	bl	8001228 <GPIO_PeriClockControl>

	GPIO_PinConfig_t GPIO_InitStrcture;

	GPIO_InitStrcture.GPIO_PinNumber = GPIO_PIN_8|GPIO_PIN_9;
 80019fa:	2309      	movs	r3, #9
 80019fc:	743b      	strb	r3, [r7, #16]
    GPIO_InitStrcture.GPIO_PinMode = GPIO_MODE_ALTFN;
 80019fe:	2302      	movs	r3, #2
 8001a00:	747b      	strb	r3, [r7, #17]
    GPIO_InitStrcture.GPIO_Speed = GPIO_SPEED_VeryHIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	74bb      	strb	r3, [r7, #18]
    GPIO_InitStrcture.GPIO_PuPdControl = GPIO_NoPull;
 8001a06:	2300      	movs	r3, #0
 8001a08:	74fb      	strb	r3, [r7, #19]
    GPIO_InitStrcture.GPIO_PinAltFunMode = AF9;
 8001a0a:	2309      	movs	r3, #9
 8001a0c:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOB, &GPIO_InitStrcture);
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	4820      	ldr	r0, [pc, #128]	; (8001a98 <GPIO_Lib_Config+0xac>)
 8001a16:	f7ff fcf1 	bl	80013fc <GPIO_Init>
	GPIO_PinConfig_t GPIO_InitStrcture1;

	GPIO_InitStrcture1.GPIO_PinNumber = GPIO_PIN_8;
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	723b      	strb	r3, [r7, #8]
    GPIO_InitStrcture1.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	727b      	strb	r3, [r7, #9]
    GPIO_InitStrcture1.GPIO_Speed = GPIO_SPEED_VeryHIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	72bb      	strb	r3, [r7, #10]
    GPIO_InitStrcture1.GPIO_PuPdControl = GPIO_NoPull;
 8001a26:	2300      	movs	r3, #0
 8001a28:	72fb      	strb	r3, [r7, #11]
    GPIO_InitStrcture1.GPIO_PinAltFunMode = AF9;
 8001a2a:	2309      	movs	r3, #9
 8001a2c:	737b      	strb	r3, [r7, #13]

	GPIO_Init(GPIOB, &GPIO_InitStrcture1);
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	4619      	mov	r1, r3
 8001a34:	4818      	ldr	r0, [pc, #96]	; (8001a98 <GPIO_Lib_Config+0xac>)
 8001a36:	f7ff fce1 	bl	80013fc <GPIO_Init>
	GPIO_PeriClockControl(GPIOD, ENABLE);
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	4817      	ldr	r0, [pc, #92]	; (8001a9c <GPIO_Lib_Config+0xb0>)
 8001a3e:	f7ff fbf3 	bl	8001228 <GPIO_PeriClockControl>

	GPIO_PinConfig_t GPIO_InitStrcture3;
	GPIO_InitStrcture3.GPIO_PinMode = GPIO_MODE_OUT;
 8001a42:	2301      	movs	r3, #1
 8001a44:	707b      	strb	r3, [r7, #1]
	GPIO_InitStrcture3.GPIO_PinNumber = GPIO_PIN_14;
 8001a46:	230e      	movs	r3, #14
 8001a48:	703b      	strb	r3, [r7, #0]
	GPIO_InitStrcture3.GPIO_Speed = GPIO_SPEED_MEDIUM;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	70bb      	strb	r3, [r7, #2]
	GPIO_InitStrcture3.GPIO_PuPdControl = GPIO_PullUp;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	70fb      	strb	r3, [r7, #3]
	GPIO_Init(GPIOD, &GPIO_InitStrcture3);
 8001a52:	463b      	mov	r3, r7
 8001a54:	4619      	mov	r1, r3
 8001a56:	4811      	ldr	r0, [pc, #68]	; (8001a9c <GPIO_Lib_Config+0xb0>)
 8001a58:	f7ff fcd0 	bl	80013fc <GPIO_Init>

	GPIO_InitStrcture3.GPIO_PinMode = GPIO_MODE_OUT;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	707b      	strb	r3, [r7, #1]
	GPIO_InitStrcture3.GPIO_PinNumber = GPIO_PIN_13;
 8001a60:	230d      	movs	r3, #13
 8001a62:	703b      	strb	r3, [r7, #0]
	GPIO_InitStrcture3.GPIO_Speed = GPIO_SPEED_MEDIUM;
 8001a64:	2301      	movs	r3, #1
 8001a66:	70bb      	strb	r3, [r7, #2]
	GPIO_InitStrcture3.GPIO_PuPdControl = GPIO_PullUp;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	70fb      	strb	r3, [r7, #3]
	GPIO_Init(GPIOD, &GPIO_InitStrcture3);
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480a      	ldr	r0, [pc, #40]	; (8001a9c <GPIO_Lib_Config+0xb0>)
 8001a72:	f7ff fcc3 	bl	80013fc <GPIO_Init>

	GPIO_InitStrcture3.GPIO_PinMode = GPIO_MODE_OUT;
 8001a76:	2301      	movs	r3, #1
 8001a78:	707b      	strb	r3, [r7, #1]
	GPIO_InitStrcture3.GPIO_PinNumber = GPIO_PIN_15;
 8001a7a:	230f      	movs	r3, #15
 8001a7c:	703b      	strb	r3, [r7, #0]
	GPIO_InitStrcture3.GPIO_Speed = GPIO_SPEED_MEDIUM;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	70bb      	strb	r3, [r7, #2]
	GPIO_InitStrcture3.GPIO_PuPdControl = GPIO_PullUp;
 8001a82:	2301      	movs	r3, #1
 8001a84:	70fb      	strb	r3, [r7, #3]
	GPIO_Init(GPIOD, &GPIO_InitStrcture3);
 8001a86:	463b      	mov	r3, r7
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4804      	ldr	r0, [pc, #16]	; (8001a9c <GPIO_Lib_Config+0xb0>)
 8001a8c:	f7ff fcb6 	bl	80013fc <GPIO_Init>
}
 8001a90:	bf00      	nop
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40020c00 	.word	0x40020c00

08001aa0 <TachSo>:

void TachSo(uint32_t t,uint32_t v, uint32_t s, uint32_t p, uint8_t *UartTx)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
	for(int i=16; i>=15; i--)
 8001aae:	2310      	movs	r3, #16
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	e027      	b.n	8001b04 <TachSo+0x64>
	{
		*(UartTx+i) = t % 10;
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	4b70      	ldr	r3, [pc, #448]	; (8001c78 <TachSo+0x1d8>)
 8001ab8:	fba3 2301 	umull	r2, r3, r3, r1
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	1aca      	subs	r2, r1, r3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001acc:	440b      	add	r3, r1
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	701a      	strb	r2, [r3, #0]
		t = (t - *(UartTx+i)) / 10;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	4a65      	ldr	r2, [pc, #404]	; (8001c78 <TachSo+0x1d8>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	08db      	lsrs	r3, r3, #3
 8001ae8:	60fb      	str	r3, [r7, #12]
		*(UartTx+i) += 48;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aee:	4413      	add	r3, r2
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001af6:	440b      	add	r3, r1
 8001af8:	3230      	adds	r2, #48	; 0x30
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]
	for(int i=16; i>=15; i--)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2b0e      	cmp	r3, #14
 8001b08:	dcd4      	bgt.n	8001ab4 <TachSo+0x14>
	}
	*(UartTx+14) = ';';
 8001b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0c:	330e      	adds	r3, #14
 8001b0e:	223b      	movs	r2, #59	; 0x3b
 8001b10:	701a      	strb	r2, [r3, #0]
	for(int i=13; i>=8; i--)
 8001b12:	230d      	movs	r3, #13
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	e027      	b.n	8001b68 <TachSo+0xc8>
	{
		*(UartTx+i) = p % 10;
 8001b18:	6839      	ldr	r1, [r7, #0]
 8001b1a:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <TachSo+0x1d8>)
 8001b1c:	fba3 2301 	umull	r2, r3, r3, r1
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	1aca      	subs	r2, r1, r3
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b30:	440b      	add	r3, r1
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]
		p = (p - *(UartTx+i)) / 10;
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b3a:	4413      	add	r3, r2
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	1a9b      	subs	r3, r3, r2
 8001b44:	4a4c      	ldr	r2, [pc, #304]	; (8001c78 <TachSo+0x1d8>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	08db      	lsrs	r3, r3, #3
 8001b4c:	603b      	str	r3, [r7, #0]
		*(UartTx+i) += 48;
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b52:	4413      	add	r3, r2
 8001b54:	781a      	ldrb	r2, [r3, #0]
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3230      	adds	r2, #48	; 0x30
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]
	for(int i=13; i>=8; i--)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b07      	cmp	r3, #7
 8001b6c:	dcd4      	bgt.n	8001b18 <TachSo+0x78>
	}
	*(UartTx+7) = ';';
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b70:	3307      	adds	r3, #7
 8001b72:	223b      	movs	r2, #59	; 0x3b
 8001b74:	701a      	strb	r2, [r3, #0]

	/*phan le*/
	{
		*(UartTx+6) = s % 10 + 48;
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <TachSo+0x1d8>)
 8001b7a:	fba3 2301 	umull	r2, r3, r3, r1
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	1aca      	subs	r2, r1, r3
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8e:	3306      	adds	r3, #6
 8001b90:	3230      	adds	r2, #48	; 0x30
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]
		*(UartTx+5) = '.';
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b98:	3305      	adds	r3, #5
 8001b9a:	222e      	movs	r2, #46	; 0x2e
 8001b9c:	701a      	strb	r2, [r3, #0]
		s=s/10;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a35      	ldr	r2, [pc, #212]	; (8001c78 <TachSo+0x1d8>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	08db      	lsrs	r3, r3, #3
 8001ba8:	607b      	str	r3, [r7, #4]
	}
	for(int i=4; i>=3; i--)
 8001baa:	2304      	movs	r3, #4
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e027      	b.n	8001c00 <TachSo+0x160>
	{
		*(UartTx+i) = s % 10;
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <TachSo+0x1d8>)
 8001bb4:	fba3 2301 	umull	r2, r3, r3, r1
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	1aca      	subs	r2, r1, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bc8:	440b      	add	r3, r1
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]
		s = (s - *(UartTx+i)) / 10;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bd2:	4413      	add	r3, r2
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <TachSo+0x1d8>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	08db      	lsrs	r3, r3, #3
 8001be4:	607b      	str	r3, [r7, #4]
		*(UartTx+i) += 48;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bea:	4413      	add	r3, r2
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3230      	adds	r2, #48	; 0x30
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]
	for(int i=4; i>=3; i--)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	dcd4      	bgt.n	8001bb0 <TachSo+0x110>
	}
	*(UartTx+2) = ';';
 8001c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c08:	3302      	adds	r3, #2
 8001c0a:	223b      	movs	r2, #59	; 0x3b
 8001c0c:	701a      	strb	r2, [r3, #0]
	for(int i=1; i>=0; i--)
 8001c0e:	2301      	movs	r3, #1
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	e027      	b.n	8001c64 <TachSo+0x1c4>
	{
		*(UartTx+i) = v % 10;
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <TachSo+0x1d8>)
 8001c18:	fba3 2301 	umull	r2, r3, r3, r1
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	1aca      	subs	r2, r1, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c2c:	440b      	add	r3, r1
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]
		v = (v - *(UartTx+i)) / 10;
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c36:	4413      	add	r3, r2
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <TachSo+0x1d8>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	08db      	lsrs	r3, r3, #3
 8001c48:	60bb      	str	r3, [r7, #8]
		*(UartTx+i) += 48;
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c4e:	4413      	add	r3, r2
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c56:	440b      	add	r3, r1
 8001c58:	3230      	adds	r2, #48	; 0x30
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]
	for(int i=1; i>=0; i--)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	dad4      	bge.n	8001c14 <TachSo+0x174>
	}
}
 8001c6a:	bf00      	nop
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	cccccccd 	.word	0xcccccccd

08001c7c <STM32F4_CANRecive>:
}


/*function recive data*/
Std_StatusReturnType STM32F4_CANRecive(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
	HAL_CAN_StateTypeDef state = hcan->State;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	7f1b      	ldrb	r3, [r3, #28]
 8001c8e:	75fb      	strb	r3, [r7, #23]

	if ((state == HAL_CAN_STATE_READY) ||(state == HAL_CAN_STATE_LISTENING))
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d002      	beq.n	8001c9c <STM32F4_CANRecive+0x20>
 8001c96:	7dfb      	ldrb	r3, [r7, #23]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d12e      	bne.n	8001cfa <STM32F4_CANRecive+0x7e>
   {
  	/* Check the Rx FIFO */
    	if (RxFifo == 0) /* Rx element is assigned to Rx FIFO 0 */
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <STM32F4_CANRecive+0x34>
    	{
    	  /* Check that the Rx FIFO 0 is not empty */
     	if(CAN_StatusMailBox() == 100U)
 8001ca2:	f7fe ff97 	bl	8000bd4 <CAN_StatusMailBox>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b64      	cmp	r3, #100	; 0x64
 8001caa:	d101      	bne.n	8001cb0 <STM32F4_CANRecive+0x34>
     	{
       	 return E_NOT_OK;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e028      	b.n	8001d02 <STM32F4_CANRecive+0x86>
      	}
    	}
    	/* Get the header */
    	pHeader->IDE = 0U;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
    	if (pHeader->IDE == 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d105      	bne.n	8001cca <STM32F4_CANRecive+0x4e>
    	{
     	pHeader->StdId = CAN_GetID();
 8001cbe:	f7fe ff9f 	bl	8000c00 <CAN_GetID>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	601a      	str	r2, [r3, #0]
    	}
    	pHeader->DLC = CAN_GetDataLength();
 8001cca:	f7fe ffaf 	bl	8000c2c <CAN_GetDataLength>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]

		/* Get the data */
		if(CAN_ReadData(aData) != 1)
 8001cd6:	6838      	ldr	r0, [r7, #0]
 8001cd8:	f7fe ffbe 	bl	8000c58 <CAN_ReadData>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d001      	beq.n	8001ce6 <STM32F4_CANRecive+0x6a>
		{
			return E_NOT_OK;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00d      	b.n	8001d02 <STM32F4_CANRecive+0x86>
		}
		/* Release the FIFO */
    	if (RxFifo == 0) /* Rx element is assigned to Rx FIFO 0 */
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d108      	bne.n	8001cfe <STM32F4_CANRecive+0x82>
    	{
     	 /* Release RX FIFO 0 */
		if(CAN_Release() != 1)
 8001cec:	f7ff f800 	bl	8000cf0 <CAN_Release>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d003      	beq.n	8001cfe <STM32F4_CANRecive+0x82>
		{
			return E_NOT_OK;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e003      	b.n	8001d02 <STM32F4_CANRecive+0x86>
		}
    	}
	}
    else
    {
    	return E_NOT_OK;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e001      	b.n	8001d02 <STM32F4_CANRecive+0x86>
    	if (RxFifo == 0) /* Rx element is assigned to Rx FIFO 0 */
 8001cfe:	bf00      	nop
	}

	return E_OK;
 8001d00:	2300      	movs	r3, #0

}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <STM32F4_CANInit>:


Std_StatusReturnType STM32F4_CANInit(CAN_HandleTypeDef *hcan)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
	if(CAN_ExitSleepMode() != 1)
 8001d12:	f7ff f801 	bl	8000d18 <CAN_ExitSleepMode>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d001      	beq.n	8001d20 <STM32F4_CANInit+0x16>
	{
		return E_NOT_OK;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e02d      	b.n	8001d7c <STM32F4_CANInit+0x72>
	}
	if (CAN_SetMCRINRQ(1U) != 1)
 8001d20:	2001      	movs	r0, #1
 8001d22:	f7ff f859 	bl	8000dd8 <CAN_SetMCRINRQ>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d001      	beq.n	8001d30 <STM32F4_CANInit+0x26>
	{
		return E_NOT_OK;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e025      	b.n	8001d7c <STM32F4_CANInit+0x72>
	}

	/* Set the time triggered communication mode */
  	if (hcan->Init.TimeTriggeredMode == 1U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7d1b      	ldrb	r3, [r3, #20]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d107      	bne.n	8001d48 <STM32F4_CANInit+0x3e>
  	{
	    if(CAN_RXTimeTrigger(1U) != 1)
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f7ff f801 	bl	8000d40 <CAN_RXTimeTrigger>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d009      	beq.n	8001d58 <STM32F4_CANInit+0x4e>
	    {
	    	return E_NOT_OK;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e019      	b.n	8001d7c <STM32F4_CANInit+0x72>
		}
  	}
 	else
 	{
		if(CAN_RXTimeTrigger(0U) != 1)
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7fe fff9 	bl	8000d40 <CAN_RXTimeTrigger>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d001      	beq.n	8001d58 <STM32F4_CANInit+0x4e>
	    {
	    	return E_NOT_OK;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e011      	b.n	8001d7c <STM32F4_CANInit+0x72>
		}
  	}
  	/* Set the automatic retransmission */
   if (CAN_AutoRetransmit() != 1)
 8001d58:	f7ff f816 	bl	8000d88 <CAN_AutoRetransmit>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d001      	beq.n	8001d66 <STM32F4_CANInit+0x5c>
   {
   		return E_NOT_OK;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00a      	b.n	8001d7c <STM32F4_CANInit+0x72>
   }
     /* Set the receive FIFO locked mode */
   if (CAN_LockFIFOMode() != 1)
 8001d66:	f7ff f823 	bl	8000db0 <CAN_LockFIFOMode>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d001      	beq.n	8001d74 <STM32F4_CANInit+0x6a>
   {
  		return E_NOT_OK;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e003      	b.n	8001d7c <STM32F4_CANInit+0x72>
//    {
//  		return E_NOT_OK;
//    }

    /* Initialize the CAN state */
     hcan->State = HAL_CAN_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	771a      	strb	r2, [r3, #28]

    /* Return function status */
    return E_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <STM32F4_CANStart>:

Std_StatusReturnType STM32F4_CANStart(CAN_HandleTypeDef *hcan)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	Std_StatusReturnType RetVal = E_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]
		if (CAN_SetMCRINRQ(0U)!= 1)
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff f821 	bl	8000dd8 <CAN_SetMCRINRQ>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d001      	beq.n	8001da0 <STM32F4_CANStart+0x1c>
    	{
  			RetVal = E_NOT_OK;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
    	}

   		 return RetVal;
 8001da0:	7bfb      	ldrb	r3, [r7, #15]

}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <STM32F4_CANConfigFilter>:

Std_StatusReturnType STM32F4_CANConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
	uint32_t filternbrbitpos;

  	    //HAL_CAN_StateTypeDef state = hcan->State;
		/* Initialisation mode for the filter */
		if(CAN_InitModeFilter(1U) != 1)
 8001db4:	2001      	movs	r0, #1
 8001db6:	f7ff f82f 	bl	8000e18 <CAN_InitModeFilter>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d001      	beq.n	8001dc4 <STM32F4_CANConfigFilter+0x1a>
		{
			return E_NOT_OK;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e039      	b.n	8001e38 <STM32F4_CANConfigFilter+0x8e>
		}
    	filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	2201      	movs	r2, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	60fb      	str	r3, [r7, #12]
        /* Filter Deactivation */
		if(CAN_DeInitFilter(filternbrbitpos) != 1)
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f7ff f847 	bl	8000e68 <CAN_DeInitFilter>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d001      	beq.n	8001de4 <STM32F4_CANConfigFilter+0x3a>
		{
			return E_NOT_OK;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e029      	b.n	8001e38 <STM32F4_CANConfigFilter+0x8e>
		}

		 /* Filter Scale */
  		if (CAN_FilterScale(filternbrbitpos, sFilterConfig) != 1)
 8001de4:	6839      	ldr	r1, [r7, #0]
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f7ff f856 	bl	8000e98 <CAN_FilterScale>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d001      	beq.n	8001df6 <STM32F4_CANConfigFilter+0x4c>
  		{
    			return E_NOT_OK;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e020      	b.n	8001e38 <STM32F4_CANConfigFilter+0x8e>
		}
		 /* Filter Mode */
    	if (CAN_FilterMode(filternbrbitpos) != 1)
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f7ff f882 	bl	8000f00 <CAN_FilterMode>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d001      	beq.n	8001e06 <STM32F4_CANConfigFilter+0x5c>
    	{
			return E_NOT_OK;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e018      	b.n	8001e38 <STM32F4_CANConfigFilter+0x8e>
		}
		/* Filter FIFO assignment */
    	if (CAN_FilterFIFOAs(filternbrbitpos) != 1)
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f7ff f892 	bl	8000f30 <CAN_FilterFIFOAs>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d001      	beq.n	8001e16 <STM32F4_CANConfigFilter+0x6c>
    	{
			return E_NOT_OK;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e010      	b.n	8001e38 <STM32F4_CANConfigFilter+0x8e>
   		}
  	  /* Filter activation */
   		 if (CAN_InitFilter(filternbrbitpos) != 1)
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f7ff f8a2 	bl	8000f60 <CAN_InitFilter>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d001      	beq.n	8001e26 <STM32F4_CANConfigFilter+0x7c>
   		{
			return E_NOT_OK;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e008      	b.n	8001e38 <STM32F4_CANConfigFilter+0x8e>
  		}

    	/* Leave the initialisation mode for the filter */
    	if(CAN_InitModeFilter(0U) != 1)
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7fe fff6 	bl	8000e18 <CAN_InitModeFilter>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d001      	beq.n	8001e36 <STM32F4_CANConfigFilter+0x8c>
		{
			return E_NOT_OK;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <STM32F4_CANConfigFilter+0x8e>
		}
   		/* Return function status */
   		 return E_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <STM32F4_CANSetBaudrate>:

Std_StatusReturnType STM32F4_CANSetBaudrate(uint32_t BaudRate)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	uint32_t System_Clock = 16000000U;
 8001e48:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <STM32F4_CANSetBaudrate+0xec>)
 8001e4a:	60fb      	str	r3, [r7, #12]
	uint8_t BRP  = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	75fb      	strb	r3, [r7, #23]
	uint8_t TSB1 = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	75bb      	strb	r3, [r7, #22]
	uint8_t TSB2 = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	757b      	strb	r3, [r7, #21]
	uint16_t BitTime = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	817b      	strh	r3, [r7, #10]
	uint8_t Temp = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	753b      	strb	r3, [r7, #20]
	uint8_t ToTal = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	74fb      	strb	r3, [r7, #19]

	BitTime = System_Clock/BaudRate;
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6c:	817b      	strh	r3, [r7, #10]
	for(Temp = 4; Temp < 120; Temp++)
 8001e6e:	2304      	movs	r3, #4
 8001e70:	753b      	strb	r3, [r7, #20]
 8001e72:	e01a      	b.n	8001eaa <STM32F4_CANSetBaudrate+0x6a>
	{
		if((BitTime % Temp == 0U) && ((BitTime / Temp)< 23))
 8001e74:	897b      	ldrh	r3, [r7, #10]
 8001e76:	7d3a      	ldrb	r2, [r7, #20]
 8001e78:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e7c:	fb02 f201 	mul.w	r2, r2, r1
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10e      	bne.n	8001ea4 <STM32F4_CANSetBaudrate+0x64>
 8001e86:	897a      	ldrh	r2, [r7, #10]
 8001e88:	7d3b      	ldrb	r3, [r7, #20]
 8001e8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e8e:	2b16      	cmp	r3, #22
 8001e90:	dc08      	bgt.n	8001ea4 <STM32F4_CANSetBaudrate+0x64>
		{
			BRP = BitTime /Temp;
 8001e92:	897a      	ldrh	r2, [r7, #10]
 8001e94:	7d3b      	ldrb	r3, [r7, #20]
 8001e96:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e9a:	75fb      	strb	r3, [r7, #23]
			ToTal = Temp;
 8001e9c:	7d3b      	ldrb	r3, [r7, #20]
 8001e9e:	74fb      	strb	r3, [r7, #19]
			Temp = 120;
 8001ea0:	2378      	movs	r3, #120	; 0x78
 8001ea2:	753b      	strb	r3, [r7, #20]
	for(Temp = 4; Temp < 120; Temp++)
 8001ea4:	7d3b      	ldrb	r3, [r7, #20]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	753b      	strb	r3, [r7, #20]
 8001eaa:	7d3b      	ldrb	r3, [r7, #20]
 8001eac:	2b77      	cmp	r3, #119	; 0x77
 8001eae:	d9e1      	bls.n	8001e74 <STM32F4_CANSetBaudrate+0x34>
		}
	}
	if((ToTal % 2) == 0)
 8001eb0:	7cfb      	ldrb	r3, [r7, #19]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <STM32F4_CANSetBaudrate+0x90>
	{
		TSB2 = (ToTal - 2)/2;
 8001ebc:	7cfb      	ldrb	r3, [r7, #19]
 8001ebe:	3b02      	subs	r3, #2
 8001ec0:	0fda      	lsrs	r2, r3, #31
 8001ec2:	4413      	add	r3, r2
 8001ec4:	105b      	asrs	r3, r3, #1
 8001ec6:	757b      	strb	r3, [r7, #21]
		TSB1 = TSB2 + 1;
 8001ec8:	7d7b      	ldrb	r3, [r7, #21]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	75bb      	strb	r3, [r7, #22]
 8001ece:	e007      	b.n	8001ee0 <STM32F4_CANSetBaudrate+0xa0>
	}
	else
	{
		TSB2 = (ToTal -1)/2;
 8001ed0:	7cfb      	ldrb	r3, [r7, #19]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	0fda      	lsrs	r2, r3, #31
 8001ed6:	4413      	add	r3, r2
 8001ed8:	105b      	asrs	r3, r3, #1
 8001eda:	757b      	strb	r3, [r7, #21]
		TSB1 = TSB2;
 8001edc:	7d7b      	ldrb	r3, [r7, #21]
 8001ede:	75bb      	strb	r3, [r7, #22]
	}
	if(CAN_SetBitTime1(TSB1-1) != 1)
 8001ee0:	7dbb      	ldrb	r3, [r7, #22]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f852 	bl	8000f90 <CAN_SetBitTime1>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d001      	beq.n	8001ef6 <STM32F4_CANSetBaudrate+0xb6>
	{
		return E_NOT_OK;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e016      	b.n	8001f24 <STM32F4_CANSetBaudrate+0xe4>
	}
	if(CAN_SetBitTime2(TSB2-1) != 1)
 8001ef6:	7d7b      	ldrb	r3, [r7, #21]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f861 	bl	8000fc4 <CAN_SetBitTime2>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d001      	beq.n	8001f0c <STM32F4_CANSetBaudrate+0xcc>
	{
		return E_NOT_OK;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e00b      	b.n	8001f24 <STM32F4_CANSetBaudrate+0xe4>
	}
	if(CAN_setBitBRP(BRP -1) != 1)
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f870 	bl	8000ff8 <CAN_setBitBRP>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d001      	beq.n	8001f22 <STM32F4_CANSetBaudrate+0xe2>
	{
		return E_NOT_OK;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <STM32F4_CANSetBaudrate+0xe4>
	}

	return E_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	00f42400 	.word	0x00f42400

08001f30 <Fls_IPW_Read>:
*/
FLS_JobResultType Fls_IPW_Read(const uint32_t u32StartAddr,
                                      const uint32_t u32Length,
                                      const uint8_t *pJobDataSrcPtr
                                     )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
	FLS_JobResultType eLldRetVal = FLS_JOB_FAILED;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	75fb      	strb	r3, [r7, #23]

    /* Decide the IP used: internal flash or external QSPI */
#if (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED)
	eLldRetVal = Flash_Read_Driver(u32StartAddr, pJobDataSrcPtr, u32Length);
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7ff f86d 	bl	8001024 <Flash_Read_Driver>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	75fb      	strb	r3, [r7, #23]
#endif /* (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED) */

    return eLldRetVal;
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <Fls_IPW_SectorWrite>:
FLS_JobResultType Fls_IPW_SectorWrite(const uint32_t u32StartAddr,
                                      const uint32_t u32Length,
                                      const uint8_t *pJobDataSrcPtr,
                                      const boolean bAsynch
                                     )
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	70fb      	strb	r3, [r7, #3]
	FLS_JobResultType eLldRetVal = FLS_JOB_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	75fb      	strb	r3, [r7, #23]

    /* Decide the IP used: internal flash or external QSPI */
#if (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED)
        FLASH_Write_Word(u32StartAddr, u32Length, pJobDataSrcPtr);
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7ff f87e 	bl	8001070 <FLASH_Write_Word>
#endif /* (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED) */

    return eLldRetVal;
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <Fls_IPW_SectorErase>:
* @implements     Fls_IPW_SectorErase_Activity
*/
FLS_JobResultType Fls_IPW_SectorErase(const Fls_Sector  Sector,
                                      boolean bAsynch
                                     )
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	460a      	mov	r2, r1
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	71bb      	strb	r3, [r7, #6]
    FLS_JobResultType eLldRetVal = FLS_JOB_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
    bAsynch = FALSE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	71bb      	strb	r3, [r7, #6]

    /* Decide the IP used: internal flash or external QSPI */
#if (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED)
    if (FALSE == bAsynch)
 8001f96:	79bb      	ldrb	r3, [r7, #6]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d107      	bne.n	8001fac <Fls_IPW_SectorErase+0x2e>
    {
        eLldRetVal = Flash_Sync_Erase(Sector, 100);
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2164      	movs	r1, #100	; 0x64
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff f8c7 	bl	8001134 <Flash_Sync_Erase>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	e006      	b.n	8001fba <Fls_IPW_SectorErase+0x3c>
    }
	else
	{
		eLldRetVal = Flash_ASync_Erase(Sector, 100);
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	2164      	movs	r1, #100	; 0x64
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff f8b1 	bl	8001118 <Flash_ASync_Erase>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	73fb      	strb	r3, [r7, #15]
	}
#endif /* (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED) */

    return eLldRetVal;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fc4:	480d      	ldr	r0, [pc, #52]	; (8001ffc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fc6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001fc8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fce:	490d      	ldr	r1, [pc, #52]	; (8002004 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <LoopForever+0xe>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fe4:	4c0a      	ldr	r4, [pc, #40]	; (8002010 <LoopForever+0x16>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ff2:	f000 f811 	bl	8002018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ff6:	f7ff fb3d 	bl	8001674 <main>

08001ffa <LoopForever>:

LoopForever:
    b LoopForever
 8001ffa:	e7fe      	b.n	8001ffa <LoopForever>
  ldr   r0, =_estack
 8001ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002004:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002008:	08002080 	.word	0x08002080
  ldr r2, =_sbss
 800200c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002010:	200000bc 	.word	0x200000bc

08002014 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC_IRQHandler>
	...

08002018 <__libc_init_array>:
 8002018:	b570      	push	{r4, r5, r6, lr}
 800201a:	4e0d      	ldr	r6, [pc, #52]	; (8002050 <__libc_init_array+0x38>)
 800201c:	4c0d      	ldr	r4, [pc, #52]	; (8002054 <__libc_init_array+0x3c>)
 800201e:	1ba4      	subs	r4, r4, r6
 8002020:	10a4      	asrs	r4, r4, #2
 8002022:	2500      	movs	r5, #0
 8002024:	42a5      	cmp	r5, r4
 8002026:	d109      	bne.n	800203c <__libc_init_array+0x24>
 8002028:	4e0b      	ldr	r6, [pc, #44]	; (8002058 <__libc_init_array+0x40>)
 800202a:	4c0c      	ldr	r4, [pc, #48]	; (800205c <__libc_init_array+0x44>)
 800202c:	f000 f818 	bl	8002060 <_init>
 8002030:	1ba4      	subs	r4, r4, r6
 8002032:	10a4      	asrs	r4, r4, #2
 8002034:	2500      	movs	r5, #0
 8002036:	42a5      	cmp	r5, r4
 8002038:	d105      	bne.n	8002046 <__libc_init_array+0x2e>
 800203a:	bd70      	pop	{r4, r5, r6, pc}
 800203c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002040:	4798      	blx	r3
 8002042:	3501      	adds	r5, #1
 8002044:	e7ee      	b.n	8002024 <__libc_init_array+0xc>
 8002046:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800204a:	4798      	blx	r3
 800204c:	3501      	adds	r5, #1
 800204e:	e7f2      	b.n	8002036 <__libc_init_array+0x1e>
 8002050:	08002078 	.word	0x08002078
 8002054:	08002078 	.word	0x08002078
 8002058:	08002078 	.word	0x08002078
 800205c:	0800207c 	.word	0x0800207c

08002060 <_init>:
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002062:	bf00      	nop
 8002064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002066:	bc08      	pop	{r3}
 8002068:	469e      	mov	lr, r3
 800206a:	4770      	bx	lr

0800206c <_fini>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr
