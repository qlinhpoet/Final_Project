
Mydriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001410  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080015b8  080015b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080015b8  080015b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080015b8  080015b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015b8  080015b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015b8  080015b8  000115b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015bc  080015bc  000115bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080015c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  080015cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080015cc  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000429c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bea  00000000  00000000  000242d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000360  00000000  00000000  00024ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002c8  00000000  00000000  00025228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c46  00000000  00000000  000254f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000032a8  00000000  00000000  00028136  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b82b  00000000  00000000  0002b3de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00036c09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c00  00000000  00000000  00036c84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080015a0 	.word	0x080015a0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000010 	.word	0x20000010
 80001e4:	080015a0 	.word	0x080015a0

080001e8 <CAN_GetRxMessage>:
	}

	return RetVal;
}
Std_StatusReturnType CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	60f8      	str	r0, [r7, #12]
 80001f0:	60b9      	str	r1, [r7, #8]
 80001f2:	607a      	str	r2, [r7, #4]
 80001f4:	603b      	str	r3, [r7, #0]
	Std_StatusReturnType RetVal = E_OK;
 80001f6:	2300      	movs	r3, #0
 80001f8:	75fb      	strb	r3, [r7, #23]
	if(STM32F4_CANRecive(hcan,RxFifo,pHeader,aData) != E_OK)
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	68b9      	ldr	r1, [r7, #8]
 8000200:	68f8      	ldr	r0, [r7, #12]
 8000202:	f000 ffdb 	bl	80011bc <STM32F4_CANRecive>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <CAN_GetRxMessage+0x28>
	{
		RetVal = E_NOT_OK;
 800020c:	2301      	movs	r3, #1
 800020e:	75fb      	strb	r3, [r7, #23]
	}

	return RetVal;
 8000210:	7dfb      	ldrb	r3, [r7, #23]
}
 8000212:	4618      	mov	r0, r3
 8000214:	3718      	adds	r7, #24
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}

0800021a <CAN_Init>:

Std_StatusReturnType CAN_Init(CAN_HandleTypeDef *hcan)
{
 800021a:	b580      	push	{r7, lr}
 800021c:	b084      	sub	sp, #16
 800021e:	af00      	add	r7, sp, #0
 8000220:	6078      	str	r0, [r7, #4]
	Std_StatusReturnType RetVal = E_OK;
 8000222:	2300      	movs	r3, #0
 8000224:	73fb      	strb	r3, [r7, #15]
	if(STM32F4_CANInit(hcan) != E_OK)
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f001 f80f 	bl	800124a <STM32F4_CANInit>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <CAN_Init+0x1c>
	{
		RetVal = E_NOT_OK;
 8000232:	2301      	movs	r3, #1
 8000234:	73fb      	strb	r3, [r7, #15]
	}

	return RetVal;
 8000236:	7bfb      	ldrb	r3, [r7, #15]
}
 8000238:	4618      	mov	r0, r3
 800023a:	3710      	adds	r7, #16
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <CAN_Start>:
Std_StatusReturnType CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	Std_StatusReturnType RetVal = E_OK;
 8000248:	2300      	movs	r3, #0
 800024a:	73fb      	strb	r3, [r7, #15]
	if(STM32F4_CANStart(hcan) != E_OK)
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f001 f839 	bl	80012c4 <STM32F4_CANStart>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <CAN_Start+0x1c>
	{
		RetVal = E_NOT_OK;
 8000258:	2301      	movs	r3, #1
 800025a:	73fb      	strb	r3, [r7, #15]
	}

	return RetVal;
 800025c:	7bfb      	ldrb	r3, [r7, #15]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}

08000266 <CAN_ConfigFilter>:
Std_StatusReturnType CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000266:	b580      	push	{r7, lr}
 8000268:	b084      	sub	sp, #16
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
	Std_StatusReturnType RetVal = E_OK;
 8000270:	2300      	movs	r3, #0
 8000272:	73fb      	strb	r3, [r7, #15]
	if(STM32F4_CANConfigFilter(hcan,sFilterConfig) != E_OK)
 8000274:	6839      	ldr	r1, [r7, #0]
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f001 f837 	bl	80012ea <STM32F4_CANConfigFilter>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <CAN_ConfigFilter+0x20>
	{
		RetVal = E_NOT_OK;
 8000282:	2301      	movs	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]
	}

	return RetVal;
 8000286:	7bfb      	ldrb	r3, [r7, #15]
}
 8000288:	4618      	mov	r0, r3
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <CAN_BaudRate>:
Std_StatusReturnType CAN_BaudRate(uint32_t BaudRate)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	Std_StatusReturnType RetVal = E_OK;
 8000298:	2300      	movs	r3, #0
 800029a:	73fb      	strb	r3, [r7, #15]
	if(STM32F4_CANSetBaudrate(BaudRate) != E_OK)
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f001 f86f 	bl	8001380 <STM32F4_CANSetBaudrate>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <CAN_BaudRate+0x1c>
	{
		RetVal = E_NOT_OK;
 80002a8:	2301      	movs	r3, #1
 80002aa:	73fb      	strb	r3, [r7, #15]
	}

	return RetVal;
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <Fls_Read>:
 */
FLS_JobResultType Fls_Read(uint32_t SourceAddress,
                uint32_t * TargetAddressPtr,
                uint32_t Length
                )
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	60f8      	str	r0, [r7, #12]
 80002c0:	60b9      	str	r1, [r7, #8]
 80002c2:	607a      	str	r2, [r7, #4]
	Fls_eJobResult = (FLS_JobResultType)FLS_JOB_FAILED;
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <Fls_Read+0x30>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	701a      	strb	r2, [r3, #0]

    Fls_eJobResult = Fls_IPW_Read(SourceAddress, Length, TargetAddressPtr);
 80002ca:	68ba      	ldr	r2, [r7, #8]
 80002cc:	6879      	ldr	r1, [r7, #4]
 80002ce:	68f8      	ldr	r0, [r7, #12]
 80002d0:	f001 f8ce 	bl	8001470 <Fls_IPW_Read>
 80002d4:	4603      	mov	r3, r0
 80002d6:	461a      	mov	r2, r3
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <Fls_Read+0x30>)
 80002da:	701a      	strb	r2, [r3, #0]

    return Fls_eJobResult;
 80002dc:	4b02      	ldr	r3, [pc, #8]	; (80002e8 <Fls_Read+0x30>)
 80002de:	781b      	ldrb	r3, [r3, #0]
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000028 	.word	0x20000028

080002ec <Fls_Write>:
FLS_JobResultType Fls_Write(uint32_t TargetAddress,
                            const uint32_t * SourceAddressPtr,
                            Fls_LengthType Length,
                            const boolean bAsynch
                                       )
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
 80002f8:	70fb      	strb	r3, [r7, #3]
	Fls_eJobResult = (FLS_JobResultType)FLS_JOB_FAILED;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <Fls_Write+0x34>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	701a      	strb	r2, [r3, #0]

	Fls_eJobResult = Fls_IPW_SectorWrite(TargetAddress, Length, SourceAddressPtr, bAsynch);
 8000300:	78fb      	ldrb	r3, [r7, #3]
 8000302:	68ba      	ldr	r2, [r7, #8]
 8000304:	6879      	ldr	r1, [r7, #4]
 8000306:	68f8      	ldr	r0, [r7, #12]
 8000308:	f001 f8c6 	bl	8001498 <Fls_IPW_SectorWrite>
 800030c:	4603      	mov	r3, r0
 800030e:	461a      	mov	r2, r3
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <Fls_Write+0x34>)
 8000312:	701a      	strb	r2, [r3, #0]
    
    return Fls_eJobResult;
 8000314:	4b02      	ldr	r3, [pc, #8]	; (8000320 <Fls_Write+0x34>)
 8000316:	781b      	ldrb	r3, [r3, #0]
}
 8000318:	4618      	mov	r0, r3
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000028 	.word	0x20000028

08000324 <Fls_Erase>:
 *
 */
FLS_JobResultType Fls_Erase(Fls_Sector  Sector, 
                         Fls_LengthType Length
                        )
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	6039      	str	r1, [r7, #0]
 800032e:	71fb      	strb	r3, [r7, #7]
	Fls_eJobResult = (FLS_JobResultType)FLS_JOB_FAILED;
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <Fls_Erase+0x30>)
 8000332:	2201      	movs	r2, #1
 8000334:	701a      	strb	r2, [r3, #0]

	Fls_eJobResult = Fls_IPW_SectorErase(Sector, FALSE);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f001 f8bf 	bl	80014be <Fls_IPW_SectorErase>
 8000340:	4603      	mov	r3, r0
 8000342:	461a      	mov	r2, r3
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <Fls_Erase+0x30>)
 8000346:	701a      	strb	r2, [r3, #0]

    return Fls_eJobResult;
 8000348:	4b02      	ldr	r3, [pc, #8]	; (8000354 <Fls_Erase+0x30>)
 800034a:	781b      	ldrb	r3, [r3, #0]
}
 800034c:	4618      	mov	r0, r3
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000028 	.word	0x20000028

08000358 <CAN_StatusMailBox>:

	return RetVal;
}

uint8_t CAN_StatusMailBox()
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 800035e:	2301      	movs	r3, #1
 8000360:	71fb      	strb	r3, [r7, #7]
    /* Check that the Rx FIFO 0 is not empty */
    if ((CAN1->RF0R & (1<<5)) == 0U)
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <CAN_StatusMailBox+0x28>)
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	f003 0320 	and.w	r3, r3, #32
 800036a:	2b00      	cmp	r3, #0
 800036c:	d101      	bne.n	8000372 <CAN_StatusMailBox+0x1a>
    {
		RetVal = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	71fb      	strb	r3, [r7, #7]
    }
	return RetVal;
 8000372:	79fb      	ldrb	r3, [r7, #7]
}
 8000374:	4618      	mov	r0, r3
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40006400 	.word	0x40006400

08000384 <CAN_GetID>:

uint16_t CAN_GetID()
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
	uint16_t RetVal = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	80fb      	strh	r3, [r7, #6]
    /* get ID*/
    RetVal = ((CAN_RI0R_STID & CAN1->sFIFOMailBox[0].RIR) >> 21U);
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <CAN_GetID+0x28>)
 8000390:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000394:	0d5b      	lsrs	r3, r3, #21
 8000396:	b29b      	uxth	r3, r3
 8000398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800039c:	80fb      	strh	r3, [r7, #6]

	return RetVal;
 800039e:	88fb      	ldrh	r3, [r7, #6]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	40006400 	.word	0x40006400

080003b0 <CAN_GetDataLength>:

uint8_t CAN_GetDataLength()
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 80003b6:	2301      	movs	r3, #1
 80003b8:	71fb      	strb	r3, [r7, #7]
    /* get ID*/
    RetVal = ((CAN_RDT0R_DLC & CAN1->sFIFOMailBox[0].RDTR) >> 0);
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <CAN_GetDataLength+0x28>)
 80003bc:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	f003 030f 	and.w	r3, r3, #15
 80003c6:	71fb      	strb	r3, [r7, #7]

	return RetVal;
 80003c8:	79fb      	ldrb	r3, [r7, #7]
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40006400 	.word	0x40006400

080003dc <CAN_ReadData>:

uint8_t CAN_ReadData(uint8_t cData[])
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	73fb      	strb	r3, [r7, #15]
    /* Get the data */
    cData[0] = (uint8_t)((CAN_RDL0R_DATA0 & CAN1->sFIFOMailBox[0].RDLR) >> 0U );
 80003e8:	4b21      	ldr	r3, [pc, #132]	; (8000470 <CAN_ReadData+0x94>)
 80003ea:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	701a      	strb	r2, [r3, #0]
    cData[1] = (uint8_t)((CAN_RDL0R_DATA1 & CAN1->sFIFOMailBox[0].RDLR) >> 8U );
 80003f4:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <CAN_ReadData+0x94>)
 80003f6:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003fa:	0a1a      	lsrs	r2, r3, #8
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3301      	adds	r3, #1
 8000400:	b2d2      	uxtb	r2, r2
 8000402:	701a      	strb	r2, [r3, #0]
    cData[2] = (uint8_t)((CAN_RDL0R_DATA2 & CAN1->sFIFOMailBox[0].RDLR) >> 16U);
 8000404:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <CAN_ReadData+0x94>)
 8000406:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800040a:	0c1a      	lsrs	r2, r3, #16
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3302      	adds	r3, #2
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	701a      	strb	r2, [r3, #0]
    cData[3] = (uint8_t)((CAN_RDL0R_DATA3 & CAN1->sFIFOMailBox[0].RDLR) >> 24U);
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <CAN_ReadData+0x94>)
 8000416:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800041a:	0e1a      	lsrs	r2, r3, #24
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3303      	adds	r3, #3
 8000420:	b2d2      	uxtb	r2, r2
 8000422:	701a      	strb	r2, [r3, #0]
    cData[4] = (uint8_t)((CAN_RDH0R_DATA4 & CAN1->sFIFOMailBox[0].RDHR) >> 0U );
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <CAN_ReadData+0x94>)
 8000426:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	3304      	adds	r3, #4
 800042e:	b2d2      	uxtb	r2, r2
 8000430:	701a      	strb	r2, [r3, #0]
    cData[5] = (uint8_t)((CAN_RDH0R_DATA5 & CAN1->sFIFOMailBox[0].RDHR) >> 8U );
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <CAN_ReadData+0x94>)
 8000434:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000438:	0a1a      	lsrs	r2, r3, #8
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	3305      	adds	r3, #5
 800043e:	b2d2      	uxtb	r2, r2
 8000440:	701a      	strb	r2, [r3, #0]
    cData[6] = (uint8_t)((CAN_RDH0R_DATA6 & CAN1->sFIFOMailBox[0].RDHR) >> 16U);
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <CAN_ReadData+0x94>)
 8000444:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000448:	0c1a      	lsrs	r2, r3, #16
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3306      	adds	r3, #6
 800044e:	b2d2      	uxtb	r2, r2
 8000450:	701a      	strb	r2, [r3, #0]
    cData[7] = (uint8_t)((CAN_RDH0R_DATA7 & CAN1->sFIFOMailBox[0].RDHR) >> 24U);
 8000452:	4b07      	ldr	r3, [pc, #28]	; (8000470 <CAN_ReadData+0x94>)
 8000454:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000458:	0e1a      	lsrs	r2, r3, #24
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3307      	adds	r3, #7
 800045e:	b2d2      	uxtb	r2, r2
 8000460:	701a      	strb	r2, [r3, #0]

    return RetVal;
 8000462:	7bfb      	ldrb	r3, [r7, #15]
}
 8000464:	4618      	mov	r0, r3
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	40006400 	.word	0x40006400

08000474 <CAN_Release>:

uint8_t CAN_Release()
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 800047a:	2301      	movs	r3, #1
 800047c:	71fb      	strb	r3, [r7, #7]
	/*set bit release FIFO0 output mailbox*/
	CAN1->RF0R |= (1<<5);
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <CAN_Release+0x24>)
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	4a05      	ldr	r2, [pc, #20]	; (8000498 <CAN_Release+0x24>)
 8000484:	f043 0320 	orr.w	r3, r3, #32
 8000488:	60d3      	str	r3, [r2, #12]

	return RetVal;
 800048a:	79fb      	ldrb	r3, [r7, #7]
}
 800048c:	4618      	mov	r0, r3
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	40006400 	.word	0x40006400

0800049c <CAN_ExitSleepMode>:

uint8_t CAN_ExitSleepMode()
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 80004a2:	2301      	movs	r3, #1
 80004a4:	71fb      	strb	r3, [r7, #7]
	/* Exit from sleep mode */
  	CAN1->MCR &= ~((uint16_t)(1<<1));
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <CAN_ExitSleepMode+0x24>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <CAN_ExitSleepMode+0x24>)
 80004ac:	f023 0302 	bic.w	r3, r3, #2
 80004b0:	6013      	str	r3, [r2, #0]

	return RetVal;
 80004b2:	79fb      	ldrb	r3, [r7, #7]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	40006400 	.word	0x40006400

080004c4 <CAN_RXTimeTrigger>:

uint8_t CAN_RXTimeTrigger(uint8_t Mode)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 80004ce:	2301      	movs	r3, #1
 80004d0:	73fb      	strb	r3, [r7, #15]
	if(Mode == 1)
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d106      	bne.n	80004e6 <CAN_RXTimeTrigger+0x22>
	{
		CAN1->MCR |= (1<<7);
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <CAN_RXTimeTrigger+0x44>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <CAN_RXTimeTrigger+0x44>)
 80004de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e2:	6013      	str	r3, [r2, #0]
 80004e4:	e008      	b.n	80004f8 <CAN_RXTimeTrigger+0x34>
	}
	else if(Mode == 0)
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d105      	bne.n	80004f8 <CAN_RXTimeTrigger+0x34>
	{
		CAN1->MCR &= ~(1<<7);
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <CAN_RXTimeTrigger+0x44>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a05      	ldr	r2, [pc, #20]	; (8000508 <CAN_RXTimeTrigger+0x44>)
 80004f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004f6:	6013      	str	r3, [r2, #0]
	}

	return RetVal;
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40006400 	.word	0x40006400

0800050c <CAN_AutoRetransmit>:

uint8_t CAN_AutoRetransmit()
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 8000512:	2301      	movs	r3, #1
 8000514:	71fb      	strb	r3, [r7, #7]
	/* Set the automatic retransmission */
	CAN1->MCR |= (1<<4);
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <CAN_AutoRetransmit+0x24>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <CAN_AutoRetransmit+0x24>)
 800051c:	f043 0310 	orr.w	r3, r3, #16
 8000520:	6013      	str	r3, [r2, #0]

	return RetVal;
 8000522:	79fb      	ldrb	r3, [r7, #7]
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	40006400 	.word	0x40006400

08000534 <CAN_LockFIFOMode>:

uint8_t CAN_LockFIFOMode()
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
	uint8_t RetVal = 1;
 800053a:	2301      	movs	r3, #1
 800053c:	71fb      	strb	r3, [r7, #7]
	/* Receive FIFO locked against overrun */
	CAN1->MCR |= (1<<3);
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <CAN_LockFIFOMode+0x24>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a05      	ldr	r2, [pc, #20]	; (8000558 <CAN_LockFIFOMode+0x24>)
 8000544:	f043 0308 	orr.w	r3, r3, #8
 8000548:	6013      	str	r3, [r2, #0]

	return RetVal;
 800054a:	79fb      	ldrb	r3, [r7, #7]
}
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40006400 	.word	0x40006400

0800055c <CAN_SetMCRINRQ>:

	return RetVal;
}

uint8_t CAN_SetMCRINRQ(uint8_t Mode)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
	 /* Request leave initialisation */
		if(Mode == 0)
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d106      	bne.n	800057e <CAN_SetMCRINRQ+0x22>
		{
			CAN1->MCR &= ~(1U);
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <CAN_SetMCRINRQ+0x3c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <CAN_SetMCRINRQ+0x3c>)
 8000576:	f023 0301 	bic.w	r3, r3, #1
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	e005      	b.n	800058a <CAN_SetMCRINRQ+0x2e>
		}
		else
		{
		    CAN1->MCR |= (1U);
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <CAN_SetMCRINRQ+0x3c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <CAN_SetMCRINRQ+0x3c>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]
		}

		return RetVal;
 800058a:	7bfb      	ldrb	r3, [r7, #15]

}
 800058c:	4618      	mov	r0, r3
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	40006400 	.word	0x40006400

0800059c <CAN_InitModeFilter>:

uint8_t CAN_InitModeFilter(uint8_t Mode)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73fb      	strb	r3, [r7, #15]
	if(Mode == 1)
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d108      	bne.n	80005c2 <CAN_InitModeFilter+0x26>
	{
	    /* Initialisation mode for the filter */
    	CAN1->FMR |= 1U;
 80005b0:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <CAN_InitModeFilter+0x4c>)
 80005b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005b6:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <CAN_InitModeFilter+0x4c>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 80005c0:	e00a      	b.n	80005d8 <CAN_InitModeFilter+0x3c>
	}
	else if(Mode ==0)
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d107      	bne.n	80005d8 <CAN_InitModeFilter+0x3c>
	{
		/* Leave the initialisation mode for the filter */
        CAN1->FMR &= ~1U;
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <CAN_InitModeFilter+0x4c>)
 80005ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005ce:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <CAN_InitModeFilter+0x4c>)
 80005d0:	f023 0301 	bic.w	r3, r3, #1
 80005d4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	}

	return RetVal;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]

}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40006400 	.word	0x40006400

080005ec <CAN_DeInitFilter>:

uint8_t CAN_DeInitFilter(uint32_t bank)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
	CAN1->FA1R &= ~(bank);
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <CAN_DeInitFilter+0x2c>)
 80005fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	43db      	mvns	r3, r3
 8000602:	4905      	ldr	r1, [pc, #20]	; (8000618 <CAN_DeInitFilter+0x2c>)
 8000604:	4013      	ands	r3, r2
 8000606:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	return RetVal;
 800060a:	7bfb      	ldrb	r3, [r7, #15]

}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	40006400 	.word	0x40006400

0800061c <CAN_FilterScale>:
uint8_t CAN_FilterScale(uint32_t bank,CAN_FilterTypeDef *sFilterConfig)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	uint8_t RetVal = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
	/* 32-bit scale for the filter */
    CAN1->FS1R &= ~(bank);
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <CAN_FilterScale+0x64>)
 800062c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	43db      	mvns	r3, r3
 8000634:	4912      	ldr	r1, [pc, #72]	; (8000680 <CAN_FilterScale+0x64>)
 8000636:	4013      	ands	r3, r2
 8000638:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR1 =
    ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	0419      	lsls	r1, r3, #16
    (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	b29a      	uxth	r2, r3
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <CAN_FilterScale+0x64>)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	695b      	ldr	r3, [r3, #20]
    ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800064e:	430a      	orrs	r2, r1
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000650:	3348      	adds	r3, #72	; 0x48
 8000652:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR2 =
    ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	0419      	lsls	r1, r3, #16
    (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	b29a      	uxth	r2, r3
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000662:	4807      	ldr	r0, [pc, #28]	; (8000680 <CAN_FilterScale+0x64>)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	695b      	ldr	r3, [r3, #20]
    ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000668:	430a      	orrs	r2, r1
    CAN1->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800066a:	3348      	adds	r3, #72	; 0x48
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	4403      	add	r3, r0
 8000670:	605a      	str	r2, [r3, #4]

	return RetVal;
 8000672:	7bfb      	ldrb	r3, [r7, #15]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	40006400 	.word	0x40006400

08000684 <CAN_FilterMode>:

uint8_t CAN_FilterMode(uint32_t bank)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 800068c:	2301      	movs	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
    /* Id/Mask mode for the filter*/
	CAN1->FM1R &= ~(bank);
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <CAN_FilterMode+0x2c>)
 8000692:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	43db      	mvns	r3, r3
 800069a:	4905      	ldr	r1, [pc, #20]	; (80006b0 <CAN_FilterMode+0x2c>)
 800069c:	4013      	ands	r3, r2
 800069e:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204

	return RetVal;
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	40006400 	.word	0x40006400

080006b4 <CAN_FilterFIFOAs>:

uint8_t CAN_FilterFIFOAs(uint32_t bank)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(bank);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <CAN_FilterFIFOAs+0x2c>)
 80006c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	43db      	mvns	r3, r3
 80006ca:	4905      	ldr	r1, [pc, #20]	; (80006e0 <CAN_FilterFIFOAs+0x2c>)
 80006cc:	4013      	ands	r3, r2
 80006ce:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214

	return RetVal;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	40006400 	.word	0x40006400

080006e4 <CAN_InitFilter>:

uint8_t CAN_InitFilter(uint32_t bank)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
    /* FIFO 0 assignation for the filter */
    CAN1->FA1R |= bank;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <CAN_InitFilter+0x2c>)
 80006f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80006f6:	4906      	ldr	r1, [pc, #24]	; (8000710 <CAN_InitFilter+0x2c>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	return RetVal;
 8000700:	7bfb      	ldrb	r3, [r7, #15]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40006400 	.word	0x40006400

08000714 <CAN_SetBitTime1>:
uint8_t CAN_SetBitTime1(uint8_t Time1)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 800071e:	2301      	movs	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
    /* FIFO 0 assignation for the filter */
    CAN1->BTR = ((CAN1->BTR)&(0xFFF0FFFF)|(Time1 <<16));
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <CAN_SetBitTime1+0x30>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800072a:	79fa      	ldrb	r2, [r7, #7]
 800072c:	0412      	lsls	r2, r2, #16
 800072e:	4611      	mov	r1, r2
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <CAN_SetBitTime1+0x30>)
 8000732:	430b      	orrs	r3, r1
 8000734:	61d3      	str	r3, [r2, #28]

	return RetVal;
 8000736:	7bfb      	ldrb	r3, [r7, #15]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	40006400 	.word	0x40006400

08000748 <CAN_SetBitTime2>:
uint8_t CAN_SetBitTime2(uint8_t Time2)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	73fb      	strb	r3, [r7, #15]
    /* FIFO 0 assignation for the filter */
    CAN1->BTR = ((CAN1->BTR)&(0xFF8FFFFF)|(Time2 <<16));
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <CAN_SetBitTime2+0x30>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800075e:	79fa      	ldrb	r2, [r7, #7]
 8000760:	0412      	lsls	r2, r2, #16
 8000762:	4611      	mov	r1, r2
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <CAN_SetBitTime2+0x30>)
 8000766:	430b      	orrs	r3, r1
 8000768:	61d3      	str	r3, [r2, #28]

	return RetVal;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40006400 	.word	0x40006400

0800077c <CAN_setBitBRP>:
uint8_t CAN_setBitBRP(uint8_t BRP)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = 1;
 8000786:	2301      	movs	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]
    /* FIFO 0 assignation for the filter */
    CAN1->BTR |= BRP;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <CAN_setBitBRP+0x28>)
 800078c:	69da      	ldr	r2, [r3, #28]
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4904      	ldr	r1, [pc, #16]	; (80007a4 <CAN_setBitBRP+0x28>)
 8000792:	4313      	orrs	r3, r2
 8000794:	61cb      	str	r3, [r1, #28]

	return RetVal;
 8000796:	7bfb      	ldrb	r3, [r7, #15]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	40006400 	.word	0x40006400

080007a8 <Flash_Read_Driver>:

FLS_JobResultType Flash_Read_Driver(volatile uint32_t u32StartAddr,
					uint32_t *pDestAddressPtr,
					uint32_t u322Length
					)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b087      	sub	sp, #28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
	FLS_JobResultType Fls_JobResult = FLS_JOB_OK;
 80007b4:	2300      	movs	r3, #0
 80007b6:	74fb      	strb	r3, [r7, #19]
	for(int i=0; i < u322Length; i++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	e00e      	b.n	80007dc <Flash_Read_Driver+0x34>
	{
		*(uint32_t *)(pDestAddressPtr + i) = *(uint32_t*)(u32StartAddr +i*4);
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	461a      	mov	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4413      	add	r3, r2
 80007c8:	4619      	mov	r1, r3
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	4413      	add	r3, r2
 80007d2:	680a      	ldr	r2, [r1, #0]
 80007d4:	601a      	str	r2, [r3, #0]
	for(int i=0; i < u322Length; i++)
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	3301      	adds	r3, #1
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d8ec      	bhi.n	80007be <Flash_Read_Driver+0x16>

	}
	return Fls_JobResult;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	371c      	adds	r7, #28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <FLASH_Write_Word>:

FLS_JobResultType FLASH_Write_Word(	volatile uint32_t u32StartAddr,
						const uint32_t u32Length,
						uint32_t *BufferWrite)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	/* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH_CR register */
	while((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 8000800:	bf00      	nop
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <FLASH_Write_Word+0xa4>)
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800080a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800080e:	d0f8      	beq.n	8000802 <FLASH_Write_Word+0xe>
	/* Check unlock sequences */
	if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK )
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <FLASH_Write_Word+0xa4>)
 8000812:	691b      	ldr	r3, [r3, #16]
 8000814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800081c:	d101      	bne.n	8000822 <FLASH_Write_Word+0x2e>
	{
		Linh_FLASH_Unlock();
 800081e:	f000 f8ab 	bl	8000978 <Linh_FLASH_Unlock>
	}

/* If the previous operation is completed, proceed to program the new data */
	CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <FLASH_Write_Word+0xa4>)
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <FLASH_Write_Word+0xa4>)
 8000828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800082c:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_PSIZE_WORD;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <FLASH_Write_Word+0xa4>)
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	4a19      	ldr	r2, [pc, #100]	; (8000898 <FLASH_Write_Word+0xa4>)
 8000834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000838:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <FLASH_Write_Word+0xa4>)
 800083c:	691b      	ldr	r3, [r3, #16]
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <FLASH_Write_Word+0xa4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6113      	str	r3, [r2, #16]

	uint32_t u32WriteAddr = u32StartAddr;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	617b      	str	r3, [r7, #20]
	for(int i=0; i < u32Length; i++)
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	e011      	b.n	8000874 <FLASH_Write_Word+0x80>
	{
		u32WriteAddr += i;
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	4413      	add	r3, r2
 8000856:	617b      	str	r3, [r7, #20]
		*(__IO uint32_t*)(u32StartAddr +i*4) = *(uint32_t *)(BufferWrite + i);
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4413      	add	r3, r2
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	0092      	lsls	r2, r2, #2
 8000864:	4611      	mov	r1, r2
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	440a      	add	r2, r1
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	6013      	str	r3, [r2, #0]
	for(int i=0; i < u32Length; i++)
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	3301      	adds	r3, #1
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	429a      	cmp	r2, r3
 800087a:	d8e9      	bhi.n	8000850 <FLASH_Write_Word+0x5c>

	}
	
	while((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 800087c:	bf00      	nop
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <FLASH_Write_Word+0xa4>)
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800088a:	d0f8      	beq.n	800087e <FLASH_Write_Word+0x8a>
	return FLS_JOB_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023c00 	.word	0x40023c00

0800089c <Flash_ASync_Erase>:

FLS_JobResultType Flash_ASync_Erase(volatile uint8_t sector, uint32_t u32TimeOut)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]

}
 80008a8:	bf00      	nop
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
	...

080008b8 <Flash_Sync_Erase>:

FLS_JobResultType Flash_Sync_Erase(volatile uint8_t sector, uint32_t u32TimeOut)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
	FLS_JobResultType eRetVal = FLS_JOB_OK;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]
	/* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH_CR register */
	while(((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && (u32TimeOut > 0U))
 80008c8:	e007      	b.n	80008da <Flash_Sync_Erase+0x22>
	{
		/*  Wating for Bsy bit */
		u32TimeOut --;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	603b      	str	r3, [r7, #0]
		if (u32TimeOut == 0)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d101      	bne.n	80008da <Flash_Sync_Erase+0x22>
		{
			//return FLASH_ERRORS_TIMEOUT;
			return FLS_JOB_FAILED;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e048      	b.n	800096c <Flash_Sync_Erase+0xb4>
	while(((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && (u32TimeOut > 0U))
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <Flash_Sync_Erase+0xbc>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008e6:	d102      	bne.n	80008ee <Flash_Sync_Erase+0x36>
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1ed      	bne.n	80008ca <Flash_Sync_Erase+0x12>
		}
	}
	/* Check unlock sequences */
	if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK )
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <Flash_Sync_Erase+0xbc>)
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80008f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008fa:	d101      	bne.n	8000900 <Flash_Sync_Erase+0x48>
	{
		Linh_FLASH_Unlock();
 80008fc:	f000 f83c 	bl	8000978 <Linh_FLASH_Unlock>
	memory block you wish to erase (SNB) in the FLASH_CR register
		3. Set the STRT bit in the FLASH_CR register
		4. Wait for the BSY bit to be cleared
	 */
	//clear psize
	FLASH->CR &= ~(3 << 8);
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <Flash_Sync_Erase+0xbc>)
 8000902:	691b      	ldr	r3, [r3, #16]
 8000904:	4a1b      	ldr	r2, [pc, #108]	; (8000974 <Flash_Sync_Erase+0xbc>)
 8000906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800090a:	6113      	str	r3, [r2, #16]
	//erase 32 bit
	FLASH->CR |= FLASH_PSIZE_WORD;
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <Flash_Sync_Erase+0xbc>)
 800090e:	691b      	ldr	r3, [r3, #16]
 8000910:	4a18      	ldr	r2, [pc, #96]	; (8000974 <Flash_Sync_Erase+0xbc>)
 8000912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000916:	6113      	str	r3, [r2, #16]
	//clear SNB
	FLASH->CR &= ~(0x1F << 3);
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <Flash_Sync_Erase+0xbc>)
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	4a15      	ldr	r2, [pc, #84]	; (8000974 <Flash_Sync_Erase+0xbc>)
 800091e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000922:	6113      	str	r3, [r2, #16]
	//set SER
	FLASH->CR |= 1 << 1;
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <Flash_Sync_Erase+0xbc>)
 8000926:	691b      	ldr	r3, [r3, #16]
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <Flash_Sync_Erase+0xbc>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	6113      	str	r3, [r2, #16]
	//clear sector
	FLASH->CR |= sector << 3;
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	00da      	lsls	r2, r3, #3
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <Flash_Sync_Erase+0xbc>)
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	4611      	mov	r1, r2
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <Flash_Sync_Erase+0xbc>)
 800093e:	430b      	orrs	r3, r1
 8000940:	6113      	str	r3, [r2, #16]
	FLASH->CR |= 1 << 16;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <Flash_Sync_Erase+0xbc>)
 8000944:	691b      	ldr	r3, [r3, #16]
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <Flash_Sync_Erase+0xbc>)
 8000948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094c:	6113      	str	r3, [r2, #16]
	while((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 800094e:	bf00      	nop
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <Flash_Sync_Erase+0xbc>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800095c:	d0f8      	beq.n	8000950 <Flash_Sync_Erase+0x98>
	CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <Flash_Sync_Erase+0xbc>)
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <Flash_Sync_Erase+0xbc>)
 8000964:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000968:	6113      	str	r3, [r2, #16]

	return FLS_JOB_OK;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023c00 	.word	0x40023c00

08000978 <Linh_FLASH_Unlock>:


void Linh_FLASH_Unlock(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
 //HAL_StatusTypeDef status = HAL_OK;

 if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <Linh_FLASH_Unlock+0x28>)
 800097e:	691b      	ldr	r3, [r3, #16]
 8000980:	2b00      	cmp	r3, #0
 8000982:	da07      	bge.n	8000994 <Linh_FLASH_Unlock+0x1c>
 {
   /* Authorize the FLASH Registers access */
   WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <Linh_FLASH_Unlock+0x28>)
 8000986:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <Linh_FLASH_Unlock+0x2c>)
 8000988:	605a      	str	r2, [r3, #4]
   WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <Linh_FLASH_Unlock+0x28>)
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <Linh_FLASH_Unlock+0x30>)
 800098e:	605a      	str	r2, [r3, #4]

   /* Verify Flash is unlocked */
   if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <Linh_FLASH_Unlock+0x28>)
 8000992:	691b      	ldr	r3, [r3, #16]
     //status = HAL_ERROR;
   }
 }

 //return status;
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023c00 	.word	0x40023c00
 80009a4:	45670123 	.word	0x45670123
 80009a8:	cdef89ab 	.word	0xcdef89ab

080009ac <GPIO_PeriClockControl>:
 /*
*	GPIO control
*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d161      	bne.n	8000a82 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a65      	ldr	r2, [pc, #404]	; (8000b58 <GPIO_PeriClockControl+0x1ac>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d106      	bne.n	80009d4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80009c6:	4b65      	ldr	r3, [pc, #404]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a64      	ldr	r2, [pc, #400]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	e056      	b.n	8000a82 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOB)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a62      	ldr	r2, [pc, #392]	; (8000b60 <GPIO_PeriClockControl+0x1b4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d106      	bne.n	80009ea <GPIO_PeriClockControl+0x3e>
		{
			GPIOB_PCLK_EN();
 80009dc:	4b5f      	ldr	r3, [pc, #380]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	4a5e      	ldr	r2, [pc, #376]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	6313      	str	r3, [r2, #48]	; 0x30
 80009e8:	e04b      	b.n	8000a82 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOC)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a5d      	ldr	r2, [pc, #372]	; (8000b64 <GPIO_PeriClockControl+0x1b8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d106      	bne.n	8000a00 <GPIO_PeriClockControl+0x54>
		{
			GPIOC_PCLK_EN();
 80009f2:	4b5a      	ldr	r3, [pc, #360]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a59      	ldr	r2, [pc, #356]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	e040      	b.n	8000a82 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOD)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a59      	ldr	r2, [pc, #356]	; (8000b68 <GPIO_PeriClockControl+0x1bc>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d106      	bne.n	8000a16 <GPIO_PeriClockControl+0x6a>
		{
			GPIOD_PCLK_EN();
 8000a08:	4b54      	ldr	r3, [pc, #336]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	4a53      	ldr	r2, [pc, #332]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a0e:	f043 0308 	orr.w	r3, r3, #8
 8000a12:	6313      	str	r3, [r2, #48]	; 0x30
 8000a14:	e035      	b.n	8000a82 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOE)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a54      	ldr	r2, [pc, #336]	; (8000b6c <GPIO_PeriClockControl+0x1c0>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d106      	bne.n	8000a2c <GPIO_PeriClockControl+0x80>
		{
			GPIOE_PCLK_EN();
 8000a1e:	4b4f      	ldr	r3, [pc, #316]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a4e      	ldr	r2, [pc, #312]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a24:	f043 0310 	orr.w	r3, r3, #16
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	e02a      	b.n	8000a82 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOF)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a50      	ldr	r2, [pc, #320]	; (8000b70 <GPIO_PeriClockControl+0x1c4>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d106      	bne.n	8000a42 <GPIO_PeriClockControl+0x96>
		{
			GPIOF_PCLK_EN();
 8000a34:	4b49      	ldr	r3, [pc, #292]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a48      	ldr	r2, [pc, #288]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a3a:	f043 0320 	orr.w	r3, r3, #32
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	e01f      	b.n	8000a82 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOG)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a4b      	ldr	r2, [pc, #300]	; (8000b74 <GPIO_PeriClockControl+0x1c8>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d106      	bne.n	8000a58 <GPIO_PeriClockControl+0xac>
		{
			GPIOG_PCLK_EN();
 8000a4a:	4b44      	ldr	r3, [pc, #272]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a43      	ldr	r2, [pc, #268]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	e014      	b.n	8000a82 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOH)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a47      	ldr	r2, [pc, #284]	; (8000b78 <GPIO_PeriClockControl+0x1cc>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d106      	bne.n	8000a6e <GPIO_PeriClockControl+0xc2>
		{
			GPIOH_PCLK_EN();
 8000a60:	4b3e      	ldr	r3, [pc, #248]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	4a3d      	ldr	r2, [pc, #244]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6c:	e009      	b.n	8000a82 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOI)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a42      	ldr	r2, [pc, #264]	; (8000b7c <GPIO_PeriClockControl+0x1d0>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d105      	bne.n	8000a82 <GPIO_PeriClockControl+0xd6>
		{
			GPIOI_PCLK_EN();
 8000a76:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a38      	ldr	r2, [pc, #224]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}

	if(EnorDi == DISABLE)
 8000a82:	78fb      	ldrb	r3, [r7, #3]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d161      	bne.n	8000b4c <GPIO_PeriClockControl+0x1a0>
	{
		if(pGPIOx == GPIOA)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a33      	ldr	r2, [pc, #204]	; (8000b58 <GPIO_PeriClockControl+0x1ac>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d106      	bne.n	8000a9e <GPIO_PeriClockControl+0xf2>
		{
			GPIOA_PCLK_DIS();
 8000a90:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	4a31      	ldr	r2, [pc, #196]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000a96:	f023 0301 	bic.w	r3, r3, #1
 8000a9a:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DIS();
		}
	}
}
 8000a9c:	e056      	b.n	8000b4c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOB)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a2f      	ldr	r2, [pc, #188]	; (8000b60 <GPIO_PeriClockControl+0x1b4>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d106      	bne.n	8000ab4 <GPIO_PeriClockControl+0x108>
			GPIOB_PCLK_DIS();
 8000aa6:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a2c      	ldr	r2, [pc, #176]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000aac:	f023 0302 	bic.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ab2:	e04b      	b.n	8000b4c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOC)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a2b      	ldr	r2, [pc, #172]	; (8000b64 <GPIO_PeriClockControl+0x1b8>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d106      	bne.n	8000aca <GPIO_PeriClockControl+0x11e>
			GPIOC_PCLK_DIS();
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000ac2:	f023 0304 	bic.w	r3, r3, #4
 8000ac6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ac8:	e040      	b.n	8000b4c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOD)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <GPIO_PeriClockControl+0x1bc>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d106      	bne.n	8000ae0 <GPIO_PeriClockControl+0x134>
			GPIOD_PCLK_DIS();
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000ad8:	f023 0308 	bic.w	r3, r3, #8
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ade:	e035      	b.n	8000b4c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOE)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a22      	ldr	r2, [pc, #136]	; (8000b6c <GPIO_PeriClockControl+0x1c0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d106      	bne.n	8000af6 <GPIO_PeriClockControl+0x14a>
			GPIOE_PCLK_DIS();
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000aee:	f023 0310 	bic.w	r3, r3, #16
 8000af2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000af4:	e02a      	b.n	8000b4c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOF)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <GPIO_PeriClockControl+0x1c4>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d106      	bne.n	8000b0c <GPIO_PeriClockControl+0x160>
			GPIOF_PCLK_DIS();
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000b04:	f023 0320 	bic.w	r3, r3, #32
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b0a:	e01f      	b.n	8000b4c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOG)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <GPIO_PeriClockControl+0x1c8>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d106      	bne.n	8000b22 <GPIO_PeriClockControl+0x176>
			GPIOG_PCLK_DIS();
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b20:	e014      	b.n	8000b4c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOH)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <GPIO_PeriClockControl+0x1cc>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d106      	bne.n	8000b38 <GPIO_PeriClockControl+0x18c>
			GPIOH_PCLK_DIS();
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b36:	e009      	b.n	8000b4c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOI)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <GPIO_PeriClockControl+0x1d0>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d105      	bne.n	8000b4c <GPIO_PeriClockControl+0x1a0>
			GPIOI_PCLK_DIS();
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <GPIO_PeriClockControl+0x1b0>)
 8000b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b4a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020400 	.word	0x40020400
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40021400 	.word	0x40021400
 8000b74:	40021800 	.word	0x40021800
 8000b78:	40021c00 	.word	0x40021c00
 8000b7c:	40022000 	.word	0x40022000

08000b80 <GPIO_Init>:



void GPIO_Init(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *GPIO_PinConfig)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	uint32_t temp;
	//enable GPIOx clock
	GPIO_PeriClockControl(pGPIOx, ENABLE);
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff0d 	bl	80009ac <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(GPIO_PinConfig->GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	785b      	ldrb	r3, [r3, #1]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d81a      	bhi.n	8000bd0 <GPIO_Init+0x50>
	{
		/*the none interrupt mode*/
		temp = ((uint32_t)GPIO_PinConfig->GPIO_PinMode) << (2 * GPIO_PinConfig->GPIO_PinNumber);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	785b      	ldrb	r3, [r3, #1]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	60fb      	str	r3, [r7, #12]
		pGPIOx->MODER &= ~((uint32_t)0x3 << (2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber));	//clear 2 bit
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2103      	movs	r1, #3
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	601a      	str	r2, [r3, #0]
		pGPIOx->MODER |= temp;		//gan gia tri 2 bit chon che do
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	601a      	str	r2, [r3, #0]
	{
		/*with interrupt mode- chua viet duoc :))*/
	}

	//2. configure the speed
	temp = ((uint32_t)GPIO_PinConfig->GPIO_Speed)<<(2 * GPIO_PinConfig->GPIO_PinNumber);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	789b      	ldrb	r3, [r3, #2]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	60fb      	str	r3, [r7, #12]
	pGPIOx->OSPEED &= ~((uint32_t)0x3 << 2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber);			//clear 2 bit
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2103      	movs	r1, #3
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
	pGPIOx->OSPEED |= temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	431a      	orrs	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (GPIO_PinConfig->GPIO_PuPdControl) << (2 * GPIO_PinConfig->GPIO_PinNumber);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	78db      	ldrb	r3, [r3, #3]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	60fb      	str	r3, [r7, #12]
	pGPIOx->PUPDR &= ~((uint32_t)0x3 << (2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber));		//clear 2 bit
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2103      	movs	r1, #3
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	60da      	str	r2, [r3, #12]
	pGPIOx->PUPDR |= temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	431a      	orrs	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	60da      	str	r2, [r3, #12]

	//4. configure the otyper
	temp = (GPIO_PinConfig->GPIOOTyper) << (GPIO_PinConfig->GPIO_PinNumber);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	791b      	ldrb	r3, [r3, #4]
 8000c40:	461a      	mov	r2, r3
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	60fb      	str	r3, [r7, #12]
	pGPIOx->OTYPER &= ~((uint32_t)0x1 << (uint32_t)(GPIO_PinConfig->GPIO_PinNumber));			//clear 1 bit
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	2301      	movs	r3, #1
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	605a      	str	r2, [r3, #4]
	pGPIOx->OTYPER |= temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(GPIO_PinConfig->GPIO_PinMode == GPIO_MODE_ALTFN)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	785b      	ldrb	r3, [r3, #1]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d12d      	bne.n	8000cd2 <GPIO_Init+0x152>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;
		/*	pin0-7:AFR[0]	;	pin8-15:AFR[1]	*/
		temp1 = GPIO_PinConfig->GPIO_PinNumber / 8;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	08db      	lsrs	r3, r3, #3
 8000c7c:	72fb      	strb	r3, [r7, #11]
		temp2 = GPIO_PinConfig->GPIO_PinNumber  % 8;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	72bb      	strb	r3, [r7, #10]
		pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); 										//clear 4 bit
 8000c88:	7afa      	ldrb	r2, [r7, #11]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c92:	7aba      	ldrb	r2, [r7, #10]
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	210f      	movs	r1, #15
 8000c98:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9c:	43d2      	mvns	r2, r2
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	7afa      	ldrb	r2, [r7, #11]
 8000ca2:	4019      	ands	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3208      	adds	r2, #8
 8000ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOx->AFR[temp1] |= (GPIO_PinConfig->GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000cac:	7afa      	ldrb	r2, [r7, #11]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3208      	adds	r2, #8
 8000cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	7952      	ldrb	r2, [r2, #5]
 8000cba:	4611      	mov	r1, r2
 8000cbc:	7aba      	ldrb	r2, [r7, #10]
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	7afa      	ldrb	r2, [r7, #11]
 8000cc8:	4319      	orrs	r1, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3208      	adds	r2, #8
 8000cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <GPIO_TogglePin>:



void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, GPIO_PIN_NUMBER PinNumber)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR  ^= ( 1 << PinNumber);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	78fa      	ldrb	r2, [r7, #3]
 8000cec:	2101      	movs	r1, #1
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	405a      	eors	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	615a      	str	r2, [r3, #20]
	}else
	{
		pGPIOx->ODR |= 1<<PinNumber;
	}
	*/
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <UART5_Config>:
    /*all bit of usart->sr are set by hardware*/
    pUSARTx->SR = (uint16_t)~(USART_FLAG);
}

void UART5_Config()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
	  /* Peripheral clock enable */
	  RCC->APB1ENR |= 1<<20;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <UART5_Config+0x94>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <UART5_Config+0x94>)
 8000d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
	  RCC->AHB1ENR |= 1<<2;
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <UART5_Config+0x94>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <UART5_Config+0x94>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
	  RCC->AHB1ENR |= 1<<3;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <UART5_Config+0x94>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <UART5_Config+0x94>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
			UART5 GPIO Configuration
			PC12     ------> UART5_TX
			PD2     ------> UART5_RX
		*/
	  	GPIO_PinConfig_t GPIO_InitStruct;
		GPIO_InitStruct.GPIO_PinNumber = GPIO_PIN_12;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	703b      	strb	r3, [r7, #0]
		GPIO_InitStruct.GPIO_PinMode = 0x00000002U;
 8000d32:	2302      	movs	r3, #2
 8000d34:	707b      	strb	r3, [r7, #1]
		GPIO_InitStruct.GPIO_PuPdControl = GPIO_PullUp;
 8000d36:	2301      	movs	r3, #1
 8000d38:	70fb      	strb	r3, [r7, #3]
		GPIO_InitStruct.GPIO_Speed = GPIO_SPEED_VeryHIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	70bb      	strb	r3, [r7, #2]
		GPIO_InitStruct.GPIO_PinAltFunMode = AF8;
 8000d3e:	2308      	movs	r3, #8
 8000d40:	717b      	strb	r3, [r7, #5]
		GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	463b      	mov	r3, r7
 8000d44:	4619      	mov	r1, r3
 8000d46:	4815      	ldr	r0, [pc, #84]	; (8000d9c <UART5_Config+0x98>)
 8000d48:	f7ff ff1a 	bl	8000b80 <GPIO_Init>

		GPIO_InitStruct.GPIO_PinNumber = GPIO_PIN_2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	703b      	strb	r3, [r7, #0]
		GPIO_InitStruct.GPIO_PinMode = 0x00000002U;
 8000d50:	2302      	movs	r3, #2
 8000d52:	707b      	strb	r3, [r7, #1]
		GPIO_InitStruct.GPIO_PuPdControl = GPIO_PullUp;
 8000d54:	2301      	movs	r3, #1
 8000d56:	70fb      	strb	r3, [r7, #3]
		GPIO_InitStruct.GPIO_Speed = GPIO_SPEED_VeryHIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	70bb      	strb	r3, [r7, #2]
		GPIO_InitStruct.GPIO_PinAltFunMode = AF8;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	717b      	strb	r3, [r7, #5]
		GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	463b      	mov	r3, r7
 8000d62:	4619      	mov	r1, r3
 8000d64:	480e      	ldr	r0, [pc, #56]	; (8000da0 <UART5_Config+0x9c>)
 8000d66:	f7ff ff0b 	bl	8000b80 <GPIO_Init>

		UART5->CR1 &= ~(1 << 13);
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <UART5_Config+0xa0>)
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <UART5_Config+0xa0>)
 8000d70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d74:	60d3      	str	r3, [r2, #12]
		/* Set the UART Communication parameters */
		UART5->BRR = 0x683;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <UART5_Config+0xa0>)
 8000d78:	f240 6283 	movw	r2, #1667	; 0x683
 8000d7c:	609a      	str	r2, [r3, #8]
		UART5->CR1 = 0x0c;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <UART5_Config+0xa0>)
 8000d80:	220c      	movs	r2, #12
 8000d82:	60da      	str	r2, [r3, #12]
		/* Enable the peripheral */
		UART5->CR1 |= 1UL << 13;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <UART5_Config+0xa0>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <UART5_Config+0xa0>)
 8000d8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020c00 	.word	0x40020c00
 8000da4:	40005000 	.word	0x40005000

08000da8 <main>:
void TachSo(uint32_t v, uint32_t s, uint32_t p, uint8_t *Tx);
uint32_t huart5;
uint32_t BufferWrite[3] = {0x1,0x2,0x3};
uint32_t *BufferRead;
int main()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	  SET_BIT(RCC->APB1ENR, (1<<25));
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <main+0x80>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <main+0x80>)
 8000db2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
	  /* Delay after an RCC peripheral clock enabling */
	  Systick_Delay_ms(200);
 8000db8:	20c8      	movs	r0, #200	; 0xc8
 8000dba:	f000 f897 	bl	8000eec <Systick_Delay_ms>
      SET_BIT(RCC->APB1ENR, (1<<28));
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <main+0x80>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <main+0x80>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
      Systick_Delay_ms(200);
 8000dca:	20c8      	movs	r0, #200	; 0xc8
 8000dcc:	f000 f88e 	bl	8000eec <Systick_Delay_ms>
	  MX_CAN1_Init();
 8000dd0:	f000 f8b0 	bl	8000f34 <MX_CAN1_Init>
	  CAN_SetInterrupt();
 8000dd4:	f000 f838 	bl	8000e48 <CAN_SetInterrupt>
	  CAN_BaudRate(200000);
 8000dd8:	4814      	ldr	r0, [pc, #80]	; (8000e2c <main+0x84>)
 8000dda:	f7ff fa59 	bl	8000290 <CAN_BaudRate>
	  CAN_Start(&hcan1);
 8000dde:	4814      	ldr	r0, [pc, #80]	; (8000e30 <main+0x88>)
 8000de0:	f7ff fa2e 	bl	8000240 <CAN_Start>

	  UART5_Config();
 8000de4:	f7ff ff8e 	bl	8000d04 <UART5_Config>
	  GPIO_Lib_Config();
 8000de8:	f000 f906 	bl	8000ff8 <GPIO_Lib_Config>

	//Fls_Read((uint32_t)SECTOR_3, &Total, 3);
	Fls_Erase(Fls_Sector_3, 1);
 8000dec:	2101      	movs	r1, #1
 8000dee:	2003      	movs	r0, #3
 8000df0:	f7ff fa98 	bl	8000324 <Fls_Erase>
	Fls_Write((uint32_t)SECTOR_3, &Total, 1, FALSE);
 8000df4:	2300      	movs	r3, #0
 8000df6:	2201      	movs	r2, #1
 8000df8:	490e      	ldr	r1, [pc, #56]	; (8000e34 <main+0x8c>)
 8000dfa:	480f      	ldr	r0, [pc, #60]	; (8000e38 <main+0x90>)
 8000dfc:	f7ff fa76 	bl	80002ec <Fls_Write>
	Fls_Read((uint32_t)SECTOR_3, &Total, 3);
 8000e00:	2203      	movs	r2, #3
 8000e02:	490c      	ldr	r1, [pc, #48]	; (8000e34 <main+0x8c>)
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <main+0x90>)
 8000e06:	f7ff fa57 	bl	80002b8 <Fls_Read>
	while(1)
	{
		TachSo(v,Total,p,&UartTx);
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <main+0x94>)
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <main+0x8c>)
 8000e10:	6819      	ldr	r1, [r3, #0]
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <main+0x98>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <main+0x9c>)
 8000e18:	f000 f92e 	bl	8001078 <TachSo>
		//UART_Transmit1(&huart5, &Tx, 9, 100);
//		GPIO_TogglePin(GPIOD, GPIO_PIN_13);
		Systick_Delay_ms(2000);
 8000e1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e20:	f000 f864 	bl	8000eec <Systick_Delay_ms>
		TachSo(v,Total,p,&UartTx);
 8000e24:	e7f1      	b.n	8000e0a <main+0x62>
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	00030d40 	.word	0x00030d40
 8000e30:	20000058 	.word	0x20000058
 8000e34:	20000008 	.word	0x20000008
 8000e38:	0800c000 	.word	0x0800c000
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000004 	.word	0x20000004
 8000e44:	2000002c 	.word	0x2000002c

08000e48 <CAN_SetInterrupt>:
	}
}
void CAN_SetInterrupt(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
	CAN1->IER |= (1<<1);
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <CAN_SetInterrupt+0x24>)
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <CAN_SetInterrupt+0x24>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	6153      	str	r3, [r2, #20]
	NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)20) & 0x1FUL));
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <CAN_SetInterrupt+0x28>)
 8000e5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40006400 	.word	0x40006400
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000e78:	210d      	movs	r1, #13
 8000e7a:	4814      	ldr	r0, [pc, #80]	; (8000ecc <CAN1_RX0_IRQHandler+0x58>)
 8000e7c:	f7ff ff2d 	bl	8000cda <GPIO_TogglePin>
	CAN_GetRxMessage(&hcan1,0U,&RxHeader, RxData);
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <CAN1_RX0_IRQHandler+0x5c>)
 8000e82:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <CAN1_RX0_IRQHandler+0x60>)
 8000e84:	2100      	movs	r1, #0
 8000e86:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <CAN1_RX0_IRQHandler+0x64>)
 8000e88:	f7ff f9ae 	bl	80001e8 <CAN_GetRxMessage>
	if(RxHeader.StdId == 0x179)
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <CAN1_RX0_IRQHandler+0x60>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f240 1279 	movw	r2, #377	; 0x179
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d108      	bne.n	8000eaa <CAN1_RX0_IRQHandler+0x36>
	{
		DataNode1 = RxData[0];
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <CAN1_RX0_IRQHandler+0x5c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <CAN1_RX0_IRQHandler+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
		p=DataNode1;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <CAN1_RX0_IRQHandler+0x68>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <CAN1_RX0_IRQHandler+0x6c>)
 8000ea8:	6013      	str	r3, [r2, #0]
	}
	if(RxHeader.StdId == 0x200)
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <CAN1_RX0_IRQHandler+0x60>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eb2:	d108      	bne.n	8000ec6 <CAN1_RX0_IRQHandler+0x52>
	{
		DataNode2 = RxData[0];
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <CAN1_RX0_IRQHandler+0x5c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <CAN1_RX0_IRQHandler+0x70>)
 8000ebc:	601a      	str	r2, [r3, #0]
		v=DataNode2;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <CAN1_RX0_IRQHandler+0x70>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <CAN1_RX0_IRQHandler+0x74>)
 8000ec4:	6013      	str	r3, [r2, #0]
	}
	//Systick_Delay_ms(200);

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	20000050 	.word	0x20000050
 8000ed4:	20000090 	.word	0x20000090
 8000ed8:	20000058 	.word	0x20000058
 8000edc:	2000003c 	.word	0x2000003c
 8000ee0:	20000004 	.word	0x20000004
 8000ee4:	20000044 	.word	0x20000044
 8000ee8:	20000000 	.word	0x20000000

08000eec <Systick_Delay_ms>:
void Systick_Delay_ms(uint32_t u32Delay)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	while(u32Delay)
 8000ef4:	e013      	b.n	8000f1e <Systick_Delay_ms+0x32>
	{
		/*Cortex System timer clock max 168/8 MHz*/
		Systick->RVR = 21000-1;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <Systick_Delay_ms+0x44>)
 8000ef8:	f245 2207 	movw	r2, #20999	; 0x5207
 8000efc:	605a      	str	r2, [r3, #4]
		Systick->CVR = 0;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <Systick_Delay_ms+0x44>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]

		/*no exception*/
		/*clear counter flag*/
		/*enable counter*/
		/*processor clock - 72M*/
		Systick->CSR = 0x05;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <Systick_Delay_ms+0x44>)
 8000f06:	2205      	movs	r2, #5
 8000f08:	601a      	str	r2, [r3, #0]

		while(((Systick->CSR) & (1<<16)) == 0)
 8000f0a:	bf00      	nop
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <Systick_Delay_ms+0x44>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f9      	beq.n	8000f0c <Systick_Delay_ms+0x20>
		{

		}
		--u32Delay;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	607b      	str	r3, [r7, #4]
	while(u32Delay)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1e8      	bne.n	8000ef6 <Systick_Delay_ms+0xa>
	}
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <MX_CAN1_Init>:

void MX_CAN1_Init()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b094      	sub	sp, #80	; 0x50
 8000f38:	af00      	add	r7, sp, #0
	  hcan1.Init.Prescaler = 16;
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	601a      	str	r2, [r3, #0]
	  hcan1.Init.Mode = 0u;
 8000f40:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	605a      	str	r2, [r3, #4]
	  hcan1.Init.SyncJumpWidth = 0U;
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
	  hcan1.Init.TimeSeg1 = 1U;
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	60da      	str	r2, [r3, #12]
	  hcan1.Init.TimeSeg2 = 1U;
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	611a      	str	r2, [r3, #16]
	  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	751a      	strb	r2, [r3, #20]
	  hcan1.Init.AutoBusOff = DISABLE;
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	755a      	strb	r2, [r3, #21]
	  hcan1.Init.AutoWakeUp = DISABLE;
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	759a      	strb	r2, [r3, #22]
	  hcan1.Init.AutoRetransmission = DISABLE;
 8000f6a:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	75da      	strb	r2, [r3, #23]
	  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	761a      	strb	r2, [r3, #24]
	  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	765a      	strb	r2, [r3, #25]
	  CAN_Init(&hcan1);
 8000f7c:	481d      	ldr	r0, [pc, #116]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000f7e:	f7ff f94c 	bl	800021a <CAN_Init>

	  CAN_FilterTypeDef canfilterconfig;
	  canfilterconfig.FilterActivation = 1U;
 8000f82:	2301      	movs	r3, #1
 8000f84:	64bb      	str	r3, [r7, #72]	; 0x48
	  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000f86:	230a      	movs	r3, #10
 8000f88:	63fb      	str	r3, [r7, #60]	; 0x3c
	  canfilterconfig.FilterFIFOAssignment = 0U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	63bb      	str	r3, [r7, #56]	; 0x38
	  canfilterconfig.FilterIdHigh = (0x200<<5);
 8000f8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
	  canfilterconfig.FilterIdLow = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
	  canfilterconfig.FilterMaskIdHigh = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
	  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
	  canfilterconfig.FilterMode = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
	  canfilterconfig.FilterScale = 1U;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
	  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8000fa8:	2300      	movs	r3, #0
 8000faa:	64fb      	str	r3, [r7, #76]	; 0x4c

	  CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000fac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000fb4:	f7ff f957 	bl	8000266 <CAN_ConfigFilter>

	  CAN_FilterTypeDef canfilterconfig1;
	  canfilterconfig1.FilterActivation = 1U;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
	  canfilterconfig1.FilterBank = 11;  // which filter bank to use from the assigned ones
 8000fbc:	230b      	movs	r3, #11
 8000fbe:	617b      	str	r3, [r7, #20]
	  canfilterconfig1.FilterFIFOAssignment = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
	  canfilterconfig1.FilterIdHigh = (0x179<<5);
 8000fc4:	f642 7320 	movw	r3, #12064	; 0x2f20
 8000fc8:	603b      	str	r3, [r7, #0]
	  canfilterconfig1.FilterIdLow = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
	  canfilterconfig1.FilterMaskIdHigh = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
	  canfilterconfig1.FilterMaskIdLow = 0x0000;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
	  canfilterconfig1.FilterMode = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
	  canfilterconfig1.FilterScale = 1U;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61fb      	str	r3, [r7, #28]
	  canfilterconfig1.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24

	  CAN_ConfigFilter(&hcan1, &canfilterconfig1);
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MX_CAN1_Init+0xc0>)
 8000fe8:	f7ff f93d 	bl	8000266 <CAN_ConfigFilter>
}
 8000fec:	bf00      	nop
 8000fee:	3750      	adds	r7, #80	; 0x50
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000058 	.word	0x20000058

08000ff8 <GPIO_Lib_Config>:
void GPIO_Lib_Config()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000ffe:	2101      	movs	r1, #1
 8001000:	481b      	ldr	r0, [pc, #108]	; (8001070 <GPIO_Lib_Config+0x78>)
 8001002:	f7ff fcd3 	bl	80009ac <GPIO_PeriClockControl>

	GPIO_PinConfig_t GPIO_InitStrcture;

	GPIO_InitStrcture.GPIO_PinNumber = GPIO_PIN_8|GPIO_PIN_9;
 8001006:	2309      	movs	r3, #9
 8001008:	743b      	strb	r3, [r7, #16]
    GPIO_InitStrcture.GPIO_PinMode = GPIO_MODE_ALTFN;
 800100a:	2302      	movs	r3, #2
 800100c:	747b      	strb	r3, [r7, #17]
    GPIO_InitStrcture.GPIO_Speed = GPIO_SPEED_VeryHIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	74bb      	strb	r3, [r7, #18]
    GPIO_InitStrcture.GPIO_PuPdControl = GPIO_NoPull;
 8001012:	2300      	movs	r3, #0
 8001014:	74fb      	strb	r3, [r7, #19]
    GPIO_InitStrcture.GPIO_PinAltFunMode = AF9;
 8001016:	2309      	movs	r3, #9
 8001018:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOB, &GPIO_InitStrcture);
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4619      	mov	r1, r3
 8001020:	4813      	ldr	r0, [pc, #76]	; (8001070 <GPIO_Lib_Config+0x78>)
 8001022:	f7ff fdad 	bl	8000b80 <GPIO_Init>
	GPIO_PinConfig_t GPIO_InitStrcture1;

	GPIO_InitStrcture1.GPIO_PinNumber = GPIO_PIN_8;
 8001026:	2308      	movs	r3, #8
 8001028:	723b      	strb	r3, [r7, #8]
    GPIO_InitStrcture1.GPIO_PinMode = GPIO_MODE_ALTFN;
 800102a:	2302      	movs	r3, #2
 800102c:	727b      	strb	r3, [r7, #9]
    GPIO_InitStrcture1.GPIO_Speed = GPIO_SPEED_VeryHIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	72bb      	strb	r3, [r7, #10]
    GPIO_InitStrcture1.GPIO_PuPdControl = GPIO_NoPull;
 8001032:	2300      	movs	r3, #0
 8001034:	72fb      	strb	r3, [r7, #11]
    GPIO_InitStrcture1.GPIO_PinAltFunMode = AF9;
 8001036:	2309      	movs	r3, #9
 8001038:	737b      	strb	r3, [r7, #13]

	GPIO_Init(GPIOB, &GPIO_InitStrcture1);
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	4619      	mov	r1, r3
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <GPIO_Lib_Config+0x78>)
 8001042:	f7ff fd9d 	bl	8000b80 <GPIO_Init>
	GPIO_PeriClockControl(GPIOD, ENABLE);
 8001046:	2101      	movs	r1, #1
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <GPIO_Lib_Config+0x7c>)
 800104a:	f7ff fcaf 	bl	80009ac <GPIO_PeriClockControl>

	GPIO_PinConfig_t GPIO_InitStrcture3;
	GPIO_InitStrcture3.GPIO_PinMode = GPIO_MODE_OUT;
 800104e:	2301      	movs	r3, #1
 8001050:	707b      	strb	r3, [r7, #1]
	GPIO_InitStrcture3.GPIO_PinNumber = GPIO_PIN_13;
 8001052:	230d      	movs	r3, #13
 8001054:	703b      	strb	r3, [r7, #0]
	GPIO_InitStrcture3.GPIO_Speed = GPIO_SPEED_MEDIUM;
 8001056:	2301      	movs	r3, #1
 8001058:	70bb      	strb	r3, [r7, #2]
	GPIO_InitStrcture3.GPIO_PuPdControl = GPIO_PullUp;
 800105a:	2301      	movs	r3, #1
 800105c:	70fb      	strb	r3, [r7, #3]

	GPIO_Init(GPIOD, &GPIO_InitStrcture3);
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	4804      	ldr	r0, [pc, #16]	; (8001074 <GPIO_Lib_Config+0x7c>)
 8001064:	f7ff fd8c 	bl	8000b80 <GPIO_Init>
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40020400 	.word	0x40020400
 8001074:	40020c00 	.word	0x40020c00

08001078 <TachSo>:

void TachSo(uint32_t v, uint32_t s, uint32_t p, uint8_t *UartTx)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
	for(int i=8; i>=6; i--)
 8001086:	2308      	movs	r3, #8
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	e027      	b.n	80010dc <TachSo+0x64>
	{
		*(UartTx+i) = p % 10;
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4b4a      	ldr	r3, [pc, #296]	; (80011b8 <TachSo+0x140>)
 8001090:	fba3 2301 	umull	r2, r3, r3, r1
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	1aca      	subs	r2, r1, r3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	6839      	ldr	r1, [r7, #0]
 80010a4:	440b      	add	r3, r1
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
		p = (p - *(UartTx+i)) / 10;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	4a3f      	ldr	r2, [pc, #252]	; (80011b8 <TachSo+0x140>)
 80010ba:	fba2 2303 	umull	r2, r3, r2, r3
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	607b      	str	r3, [r7, #4]
		*(UartTx+i) += 48;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	440b      	add	r3, r1
 80010d0:	3230      	adds	r2, #48	; 0x30
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	701a      	strb	r2, [r3, #0]
	for(int i=8; i>=6; i--)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b01      	subs	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b05      	cmp	r3, #5
 80010e0:	dcd4      	bgt.n	800108c <TachSo+0x14>
	}
	*(UartTx+5) = ';';
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	3305      	adds	r3, #5
 80010e6:	223b      	movs	r2, #59	; 0x3b
 80010e8:	701a      	strb	r2, [r3, #0]
	for(int i=4; i>=3; i--)
 80010ea:	2304      	movs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	e027      	b.n	8001140 <TachSo+0xc8>
	{
		*(UartTx+i) = s % 10;
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <TachSo+0x140>)
 80010f4:	fba3 2301 	umull	r2, r3, r3, r1
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	1aca      	subs	r2, r1, r3
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6839      	ldr	r1, [r7, #0]
 8001108:	440b      	add	r3, r1
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	701a      	strb	r2, [r3, #0]
		s = (s - *(UartTx+i)) / 10;
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	4413      	add	r3, r2
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <TachSo+0x140>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	08db      	lsrs	r3, r3, #3
 8001124:	60bb      	str	r3, [r7, #8]
		*(UartTx+i) += 48;
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	6839      	ldr	r1, [r7, #0]
 8001132:	440b      	add	r3, r1
 8001134:	3230      	adds	r2, #48	; 0x30
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]
	for(int i=4; i>=3; i--)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	3b01      	subs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2b02      	cmp	r3, #2
 8001144:	dcd4      	bgt.n	80010f0 <TachSo+0x78>
	}
	*(UartTx+2) = ';';
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3302      	adds	r3, #2
 800114a:	223b      	movs	r2, #59	; 0x3b
 800114c:	701a      	strb	r2, [r3, #0]
	for(int i=1; i>=0; i--)
 800114e:	2301      	movs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	e027      	b.n	80011a4 <TachSo+0x12c>
	{
		*(UartTx+i) = v % 10;
 8001154:	68f9      	ldr	r1, [r7, #12]
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <TachSo+0x140>)
 8001158:	fba3 2301 	umull	r2, r3, r3, r1
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	1aca      	subs	r2, r1, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	6839      	ldr	r1, [r7, #0]
 800116c:	440b      	add	r3, r1
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	701a      	strb	r2, [r3, #0]
		v = (v - *(UartTx+i)) / 10;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1a9b      	subs	r3, r3, r2
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <TachSo+0x140>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	60fb      	str	r3, [r7, #12]
		*(UartTx+i) += 48;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	4413      	add	r3, r2
 8001190:	781a      	ldrb	r2, [r3, #0]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	6839      	ldr	r1, [r7, #0]
 8001196:	440b      	add	r3, r1
 8001198:	3230      	adds	r2, #48	; 0x30
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]
	for(int i=1; i>=0; i--)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	dad4      	bge.n	8001154 <TachSo+0xdc>
	}
}
 80011aa:	bf00      	nop
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	cccccccd 	.word	0xcccccccd

080011bc <STM32F4_CANRecive>:
}


/*function recive data*/
Std_StatusReturnType STM32F4_CANRecive(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
	HAL_CAN_StateTypeDef state = hcan->State;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	7f1b      	ldrb	r3, [r3, #28]
 80011ce:	75fb      	strb	r3, [r7, #23]

	if ((state == HAL_CAN_STATE_READY) ||(state == HAL_CAN_STATE_LISTENING))
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d002      	beq.n	80011dc <STM32F4_CANRecive+0x20>
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d12e      	bne.n	800123a <STM32F4_CANRecive+0x7e>
   {
  	/* Check the Rx FIFO */
    	if (RxFifo == 0) /* Rx element is assigned to Rx FIFO 0 */
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d106      	bne.n	80011f0 <STM32F4_CANRecive+0x34>
    	{
    	  /* Check that the Rx FIFO 0 is not empty */
     	if(CAN_StatusMailBox() == 100U)
 80011e2:	f7ff f8b9 	bl	8000358 <CAN_StatusMailBox>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b64      	cmp	r3, #100	; 0x64
 80011ea:	d101      	bne.n	80011f0 <STM32F4_CANRecive+0x34>
     	{
       	 return E_NOT_OK;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e028      	b.n	8001242 <STM32F4_CANRecive+0x86>
      	}
    	}
    	/* Get the header */
    	pHeader->IDE = 0U;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
    	if (pHeader->IDE == 0U)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d105      	bne.n	800120a <STM32F4_CANRecive+0x4e>
    	{
     	pHeader->StdId = CAN_GetID();
 80011fe:	f7ff f8c1 	bl	8000384 <CAN_GetID>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
    	}
    	pHeader->DLC = CAN_GetDataLength();
 800120a:	f7ff f8d1 	bl	80003b0 <CAN_GetDataLength>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	611a      	str	r2, [r3, #16]

		/* Get the data */
		if(CAN_ReadData(aData) != 1)
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f7ff f8e0 	bl	80003dc <CAN_ReadData>
 800121c:	4603      	mov	r3, r0
 800121e:	2b01      	cmp	r3, #1
 8001220:	d001      	beq.n	8001226 <STM32F4_CANRecive+0x6a>
		{
			return E_NOT_OK;
 8001222:	2301      	movs	r3, #1
 8001224:	e00d      	b.n	8001242 <STM32F4_CANRecive+0x86>
		}
		/* Release the FIFO */
    	if (RxFifo == 0) /* Rx element is assigned to Rx FIFO 0 */
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d108      	bne.n	800123e <STM32F4_CANRecive+0x82>
    	{
     	 /* Release RX FIFO 0 */
		if(CAN_Release() != 1)
 800122c:	f7ff f922 	bl	8000474 <CAN_Release>
 8001230:	4603      	mov	r3, r0
 8001232:	2b01      	cmp	r3, #1
 8001234:	d003      	beq.n	800123e <STM32F4_CANRecive+0x82>
		{
			return E_NOT_OK;
 8001236:	2301      	movs	r3, #1
 8001238:	e003      	b.n	8001242 <STM32F4_CANRecive+0x86>
		}
    	}
	}
    else
    {
    	return E_NOT_OK;
 800123a:	2301      	movs	r3, #1
 800123c:	e001      	b.n	8001242 <STM32F4_CANRecive+0x86>
    	if (RxFifo == 0) /* Rx element is assigned to Rx FIFO 0 */
 800123e:	bf00      	nop
	}

	return E_OK;
 8001240:	2300      	movs	r3, #0

}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <STM32F4_CANInit>:


Std_StatusReturnType STM32F4_CANInit(CAN_HandleTypeDef *hcan)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
	if(CAN_ExitSleepMode() != 1)
 8001252:	f7ff f923 	bl	800049c <CAN_ExitSleepMode>
 8001256:	4603      	mov	r3, r0
 8001258:	2b01      	cmp	r3, #1
 800125a:	d001      	beq.n	8001260 <STM32F4_CANInit+0x16>
	{
		return E_NOT_OK;
 800125c:	2301      	movs	r3, #1
 800125e:	e02d      	b.n	80012bc <STM32F4_CANInit+0x72>
	}
	if (CAN_SetMCRINRQ(1U) != 1)
 8001260:	2001      	movs	r0, #1
 8001262:	f7ff f97b 	bl	800055c <CAN_SetMCRINRQ>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d001      	beq.n	8001270 <STM32F4_CANInit+0x26>
	{
		return E_NOT_OK;
 800126c:	2301      	movs	r3, #1
 800126e:	e025      	b.n	80012bc <STM32F4_CANInit+0x72>
	}

	/* Set the time triggered communication mode */
  	if (hcan->Init.TimeTriggeredMode == 1U)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7d1b      	ldrb	r3, [r3, #20]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d107      	bne.n	8001288 <STM32F4_CANInit+0x3e>
  	{
	    if(CAN_RXTimeTrigger(1U) != 1)
 8001278:	2001      	movs	r0, #1
 800127a:	f7ff f923 	bl	80004c4 <CAN_RXTimeTrigger>
 800127e:	4603      	mov	r3, r0
 8001280:	2b01      	cmp	r3, #1
 8001282:	d009      	beq.n	8001298 <STM32F4_CANInit+0x4e>
	    {
	    	return E_NOT_OK;
 8001284:	2301      	movs	r3, #1
 8001286:	e019      	b.n	80012bc <STM32F4_CANInit+0x72>
		}
  	}
 	else
 	{
		if(CAN_RXTimeTrigger(0U) != 1)
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff f91b 	bl	80004c4 <CAN_RXTimeTrigger>
 800128e:	4603      	mov	r3, r0
 8001290:	2b01      	cmp	r3, #1
 8001292:	d001      	beq.n	8001298 <STM32F4_CANInit+0x4e>
	    {
	    	return E_NOT_OK;
 8001294:	2301      	movs	r3, #1
 8001296:	e011      	b.n	80012bc <STM32F4_CANInit+0x72>
		}
  	}
  	/* Set the automatic retransmission */
   if (CAN_AutoRetransmit() != 1)
 8001298:	f7ff f938 	bl	800050c <CAN_AutoRetransmit>
 800129c:	4603      	mov	r3, r0
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d001      	beq.n	80012a6 <STM32F4_CANInit+0x5c>
   {
   		return E_NOT_OK;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00a      	b.n	80012bc <STM32F4_CANInit+0x72>
   }
     /* Set the receive FIFO locked mode */
   if (CAN_LockFIFOMode() != 1)
 80012a6:	f7ff f945 	bl	8000534 <CAN_LockFIFOMode>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d001      	beq.n	80012b4 <STM32F4_CANInit+0x6a>
   {
  		return E_NOT_OK;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e003      	b.n	80012bc <STM32F4_CANInit+0x72>
//    {
//  		return E_NOT_OK;
//    }

    /* Initialize the CAN state */
     hcan->State = HAL_CAN_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	771a      	strb	r2, [r3, #28]

    /* Return function status */
    return E_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <STM32F4_CANStart>:

Std_StatusReturnType STM32F4_CANStart(CAN_HandleTypeDef *hcan)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	Std_StatusReturnType RetVal = E_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
		if (CAN_SetMCRINRQ(0U)!= 1)
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff f943 	bl	800055c <CAN_SetMCRINRQ>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d001      	beq.n	80012e0 <STM32F4_CANStart+0x1c>
    	{
  			RetVal = E_NOT_OK;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
    	}

   		 return RetVal;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]

}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <STM32F4_CANConfigFilter>:

Std_StatusReturnType STM32F4_CANConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
	uint32_t filternbrbitpos;

  	    //HAL_CAN_StateTypeDef state = hcan->State;
		/* Initialisation mode for the filter */
		if(CAN_InitModeFilter(1U) != 1)
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff f951 	bl	800059c <CAN_InitModeFilter>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d001      	beq.n	8001304 <STM32F4_CANConfigFilter+0x1a>
		{
			return E_NOT_OK;
 8001300:	2301      	movs	r3, #1
 8001302:	e039      	b.n	8001378 <STM32F4_CANConfigFilter+0x8e>
		}
    	filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	f003 031f 	and.w	r3, r3, #31
 800130c:	2201      	movs	r2, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	60fb      	str	r3, [r7, #12]
        /* Filter Deactivation */
		if(CAN_DeInitFilter(filternbrbitpos) != 1)
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f7ff f969 	bl	80005ec <CAN_DeInitFilter>
 800131a:	4603      	mov	r3, r0
 800131c:	2b01      	cmp	r3, #1
 800131e:	d001      	beq.n	8001324 <STM32F4_CANConfigFilter+0x3a>
		{
			return E_NOT_OK;
 8001320:	2301      	movs	r3, #1
 8001322:	e029      	b.n	8001378 <STM32F4_CANConfigFilter+0x8e>
		}

		 /* Filter Scale */
  		if (CAN_FilterScale(filternbrbitpos, sFilterConfig) != 1)
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f7ff f978 	bl	800061c <CAN_FilterScale>
 800132c:	4603      	mov	r3, r0
 800132e:	2b01      	cmp	r3, #1
 8001330:	d001      	beq.n	8001336 <STM32F4_CANConfigFilter+0x4c>
  		{
    			return E_NOT_OK;
 8001332:	2301      	movs	r3, #1
 8001334:	e020      	b.n	8001378 <STM32F4_CANConfigFilter+0x8e>
		}
		 /* Filter Mode */
    	if (CAN_FilterMode(filternbrbitpos) != 1)
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f7ff f9a4 	bl	8000684 <CAN_FilterMode>
 800133c:	4603      	mov	r3, r0
 800133e:	2b01      	cmp	r3, #1
 8001340:	d001      	beq.n	8001346 <STM32F4_CANConfigFilter+0x5c>
    	{
			return E_NOT_OK;
 8001342:	2301      	movs	r3, #1
 8001344:	e018      	b.n	8001378 <STM32F4_CANConfigFilter+0x8e>
		}
		/* Filter FIFO assignment */
    	if (CAN_FilterFIFOAs(filternbrbitpos) != 1)
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f7ff f9b4 	bl	80006b4 <CAN_FilterFIFOAs>
 800134c:	4603      	mov	r3, r0
 800134e:	2b01      	cmp	r3, #1
 8001350:	d001      	beq.n	8001356 <STM32F4_CANConfigFilter+0x6c>
    	{
			return E_NOT_OK;
 8001352:	2301      	movs	r3, #1
 8001354:	e010      	b.n	8001378 <STM32F4_CANConfigFilter+0x8e>
   		}
  	  /* Filter activation */
   		 if (CAN_InitFilter(filternbrbitpos) != 1)
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f7ff f9c4 	bl	80006e4 <CAN_InitFilter>
 800135c:	4603      	mov	r3, r0
 800135e:	2b01      	cmp	r3, #1
 8001360:	d001      	beq.n	8001366 <STM32F4_CANConfigFilter+0x7c>
   		{
			return E_NOT_OK;
 8001362:	2301      	movs	r3, #1
 8001364:	e008      	b.n	8001378 <STM32F4_CANConfigFilter+0x8e>
  		}

    	/* Leave the initialisation mode for the filter */
    	if(CAN_InitModeFilter(0U) != 1)
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff f918 	bl	800059c <CAN_InitModeFilter>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d001      	beq.n	8001376 <STM32F4_CANConfigFilter+0x8c>
		{
			return E_NOT_OK;
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <STM32F4_CANConfigFilter+0x8e>
		}
   		/* Return function status */
   		 return E_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <STM32F4_CANSetBaudrate>:

Std_StatusReturnType STM32F4_CANSetBaudrate(uint32_t BaudRate)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	uint32_t System_Clock = 16000000U;
 8001388:	4b38      	ldr	r3, [pc, #224]	; (800146c <STM32F4_CANSetBaudrate+0xec>)
 800138a:	60fb      	str	r3, [r7, #12]
	uint8_t BRP  = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]
	uint8_t TSB1 = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	75bb      	strb	r3, [r7, #22]
	uint8_t TSB2 = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	757b      	strb	r3, [r7, #21]
	uint16_t BitTime = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	817b      	strh	r3, [r7, #10]
	uint8_t Temp = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	753b      	strb	r3, [r7, #20]
	uint8_t ToTal = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	74fb      	strb	r3, [r7, #19]

	BitTime = System_Clock/BaudRate;
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ac:	817b      	strh	r3, [r7, #10]
	for(Temp = 4; Temp < 120; Temp++)
 80013ae:	2304      	movs	r3, #4
 80013b0:	753b      	strb	r3, [r7, #20]
 80013b2:	e01a      	b.n	80013ea <STM32F4_CANSetBaudrate+0x6a>
	{
		if((BitTime % Temp == 0U) && ((BitTime / Temp)< 23))
 80013b4:	897b      	ldrh	r3, [r7, #10]
 80013b6:	7d3a      	ldrb	r2, [r7, #20]
 80013b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80013bc:	fb02 f201 	mul.w	r2, r2, r1
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10e      	bne.n	80013e4 <STM32F4_CANSetBaudrate+0x64>
 80013c6:	897a      	ldrh	r2, [r7, #10]
 80013c8:	7d3b      	ldrb	r3, [r7, #20]
 80013ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ce:	2b16      	cmp	r3, #22
 80013d0:	dc08      	bgt.n	80013e4 <STM32F4_CANSetBaudrate+0x64>
		{
			BRP = BitTime /Temp;
 80013d2:	897a      	ldrh	r2, [r7, #10]
 80013d4:	7d3b      	ldrb	r3, [r7, #20]
 80013d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013da:	75fb      	strb	r3, [r7, #23]
			ToTal = Temp;
 80013dc:	7d3b      	ldrb	r3, [r7, #20]
 80013de:	74fb      	strb	r3, [r7, #19]
			Temp = 120;
 80013e0:	2378      	movs	r3, #120	; 0x78
 80013e2:	753b      	strb	r3, [r7, #20]
	for(Temp = 4; Temp < 120; Temp++)
 80013e4:	7d3b      	ldrb	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	753b      	strb	r3, [r7, #20]
 80013ea:	7d3b      	ldrb	r3, [r7, #20]
 80013ec:	2b77      	cmp	r3, #119	; 0x77
 80013ee:	d9e1      	bls.n	80013b4 <STM32F4_CANSetBaudrate+0x34>
		}
	}
	if((ToTal % 2) == 0)
 80013f0:	7cfb      	ldrb	r3, [r7, #19]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d109      	bne.n	8001410 <STM32F4_CANSetBaudrate+0x90>
	{
		TSB2 = (ToTal - 2)/2;
 80013fc:	7cfb      	ldrb	r3, [r7, #19]
 80013fe:	3b02      	subs	r3, #2
 8001400:	0fda      	lsrs	r2, r3, #31
 8001402:	4413      	add	r3, r2
 8001404:	105b      	asrs	r3, r3, #1
 8001406:	757b      	strb	r3, [r7, #21]
		TSB1 = TSB2 + 1;
 8001408:	7d7b      	ldrb	r3, [r7, #21]
 800140a:	3301      	adds	r3, #1
 800140c:	75bb      	strb	r3, [r7, #22]
 800140e:	e007      	b.n	8001420 <STM32F4_CANSetBaudrate+0xa0>
	}
	else
	{
		TSB2 = (ToTal -1)/2;
 8001410:	7cfb      	ldrb	r3, [r7, #19]
 8001412:	3b01      	subs	r3, #1
 8001414:	0fda      	lsrs	r2, r3, #31
 8001416:	4413      	add	r3, r2
 8001418:	105b      	asrs	r3, r3, #1
 800141a:	757b      	strb	r3, [r7, #21]
		TSB1 = TSB2;
 800141c:	7d7b      	ldrb	r3, [r7, #21]
 800141e:	75bb      	strb	r3, [r7, #22]
	}
	if(CAN_SetBitTime1(TSB1-1) != 1)
 8001420:	7dbb      	ldrb	r3, [r7, #22]
 8001422:	3b01      	subs	r3, #1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f974 	bl	8000714 <CAN_SetBitTime1>
 800142c:	4603      	mov	r3, r0
 800142e:	2b01      	cmp	r3, #1
 8001430:	d001      	beq.n	8001436 <STM32F4_CANSetBaudrate+0xb6>
	{
		return E_NOT_OK;
 8001432:	2301      	movs	r3, #1
 8001434:	e016      	b.n	8001464 <STM32F4_CANSetBaudrate+0xe4>
	}
	if(CAN_SetBitTime2(TSB2-1) != 1)
 8001436:	7d7b      	ldrb	r3, [r7, #21]
 8001438:	3b01      	subs	r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f983 	bl	8000748 <CAN_SetBitTime2>
 8001442:	4603      	mov	r3, r0
 8001444:	2b01      	cmp	r3, #1
 8001446:	d001      	beq.n	800144c <STM32F4_CANSetBaudrate+0xcc>
	{
		return E_NOT_OK;
 8001448:	2301      	movs	r3, #1
 800144a:	e00b      	b.n	8001464 <STM32F4_CANSetBaudrate+0xe4>
	}
	if(CAN_setBitBRP(BRP -1) != 1)
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	3b01      	subs	r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f992 	bl	800077c <CAN_setBitBRP>
 8001458:	4603      	mov	r3, r0
 800145a:	2b01      	cmp	r3, #1
 800145c:	d001      	beq.n	8001462 <STM32F4_CANSetBaudrate+0xe2>
	{
		return E_NOT_OK;
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <STM32F4_CANSetBaudrate+0xe4>
	}

	return E_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	00f42400 	.word	0x00f42400

08001470 <Fls_IPW_Read>:
*/
FLS_JobResultType Fls_IPW_Read(const uint32_t u32StartAddr,
                                      const uint32_t u32Length,
                                      const uint8_t *pJobDataSrcPtr
                                     )
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
	FLS_JobResultType eLldRetVal = FLS_JOB_FAILED;
 800147c:	2301      	movs	r3, #1
 800147e:	75fb      	strb	r3, [r7, #23]

    /* Decide the IP used: internal flash or external QSPI */
#if (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED)
	eLldRetVal = Flash_Read_Driver(u32StartAddr, pJobDataSrcPtr, u32Length);
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff f98f 	bl	80007a8 <Flash_Read_Driver>
 800148a:	4603      	mov	r3, r0
 800148c:	75fb      	strb	r3, [r7, #23]
#endif /* (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED) */

    return eLldRetVal;
 800148e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <Fls_IPW_SectorWrite>:
FLS_JobResultType Fls_IPW_SectorWrite(const uint32_t u32StartAddr,
                                      const uint32_t u32Length,
                                      const uint8_t *pJobDataSrcPtr,
                                      const boolean bAsynch
                                     )
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	70fb      	strb	r3, [r7, #3]
	FLS_JobResultType eLldRetVal = FLS_JOB_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	75fb      	strb	r3, [r7, #23]

    /* Decide the IP used: internal flash or external QSPI */
#if (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED)
        FLASH_Write_Word(u32StartAddr, u32Length, pJobDataSrcPtr);
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f7ff f9a0 	bl	80007f4 <FLASH_Write_Word>
#endif /* (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED) */

    return eLldRetVal;
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <Fls_IPW_SectorErase>:
* @implements     Fls_IPW_SectorErase_Activity
*/
FLS_JobResultType Fls_IPW_SectorErase(const Fls_Sector  Sector,
                                      boolean bAsynch
                                     )
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	460a      	mov	r2, r1
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	4613      	mov	r3, r2
 80014cc:	71bb      	strb	r3, [r7, #6]
    FLS_JobResultType eLldRetVal = FLS_JOB_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
    bAsynch = FALSE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	71bb      	strb	r3, [r7, #6]

    /* Decide the IP used: internal flash or external QSPI */
#if (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED)
    if (FALSE == bAsynch)
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d107      	bne.n	80014ec <Fls_IPW_SectorErase+0x2e>
    {
        eLldRetVal = Flash_Sync_Erase(Sector, 100);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2164      	movs	r1, #100	; 0x64
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f9e9 	bl	80008b8 <Flash_Sync_Erase>
 80014e6:	4603      	mov	r3, r0
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e006      	b.n	80014fa <Fls_IPW_SectorErase+0x3c>
    }
	else
	{
		eLldRetVal = Flash_ASync_Erase(Sector, 100);
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2164      	movs	r1, #100	; 0x64
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f9d3 	bl	800089c <Flash_ASync_Erase>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
	}
#endif /* (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED) */

    return eLldRetVal;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001506:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001508:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <LoopForever+0x6>)
  ldr r1, =_edata
 800150e:	490d      	ldr	r1, [pc, #52]	; (8001544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <LoopForever+0xe>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001524:	4c0a      	ldr	r4, [pc, #40]	; (8001550 <LoopForever+0x16>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001532:	f000 f811 	bl	8001558 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001536:	f7ff fc37 	bl	8000da8 <main>

0800153a <LoopForever>:

LoopForever:
    b LoopForever
 800153a:	e7fe      	b.n	800153a <LoopForever>
  ldr   r0, =_estack
 800153c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001548:	080015c0 	.word	0x080015c0
  ldr r2, =_sbss
 800154c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001550:	200000ac 	.word	0x200000ac

08001554 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC_IRQHandler>
	...

08001558 <__libc_init_array>:
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	4e0d      	ldr	r6, [pc, #52]	; (8001590 <__libc_init_array+0x38>)
 800155c:	4c0d      	ldr	r4, [pc, #52]	; (8001594 <__libc_init_array+0x3c>)
 800155e:	1ba4      	subs	r4, r4, r6
 8001560:	10a4      	asrs	r4, r4, #2
 8001562:	2500      	movs	r5, #0
 8001564:	42a5      	cmp	r5, r4
 8001566:	d109      	bne.n	800157c <__libc_init_array+0x24>
 8001568:	4e0b      	ldr	r6, [pc, #44]	; (8001598 <__libc_init_array+0x40>)
 800156a:	4c0c      	ldr	r4, [pc, #48]	; (800159c <__libc_init_array+0x44>)
 800156c:	f000 f818 	bl	80015a0 <_init>
 8001570:	1ba4      	subs	r4, r4, r6
 8001572:	10a4      	asrs	r4, r4, #2
 8001574:	2500      	movs	r5, #0
 8001576:	42a5      	cmp	r5, r4
 8001578:	d105      	bne.n	8001586 <__libc_init_array+0x2e>
 800157a:	bd70      	pop	{r4, r5, r6, pc}
 800157c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001580:	4798      	blx	r3
 8001582:	3501      	adds	r5, #1
 8001584:	e7ee      	b.n	8001564 <__libc_init_array+0xc>
 8001586:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800158a:	4798      	blx	r3
 800158c:	3501      	adds	r5, #1
 800158e:	e7f2      	b.n	8001576 <__libc_init_array+0x1e>
 8001590:	080015b8 	.word	0x080015b8
 8001594:	080015b8 	.word	0x080015b8
 8001598:	080015b8 	.word	0x080015b8
 800159c:	080015bc 	.word	0x080015bc

080015a0 <_init>:
 80015a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a2:	bf00      	nop
 80015a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015a6:	bc08      	pop	{r3}
 80015a8:	469e      	mov	lr, r3
 80015aa:	4770      	bx	lr

080015ac <_fini>:
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ae:	bf00      	nop
 80015b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015b2:	bc08      	pop	{r3}
 80015b4:	469e      	mov	lr, r3
 80015b6:	4770      	bx	lr
