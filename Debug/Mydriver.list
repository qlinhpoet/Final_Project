
Mydriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000868  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a10  08000a10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a10  08000a10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a10  08000a10  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a10  08000a10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a10  08000a10  00010a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a14  08000a14  00010a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08000a24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000a24  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c43  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000064f  00000000  00000000  00021c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000160  00000000  00000000  000222d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000108  00000000  00000000  00022430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000024a4  00000000  00000000  00022538  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001a74  00000000  00000000  000249dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a48d  00000000  00000000  00026450  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000308dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000400  00000000  00000000  00030958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080009f8 	.word	0x080009f8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000010 	.word	0x20000010
 80001e4:	080009f8 	.word	0x080009f8

080001e8 <Fls_Read>:
 */
FLS_JobResultType Fls_Read(uint32_t SourceAddress,
                uint32_t * TargetAddressPtr,
                uint32_t Length
                )
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	60f8      	str	r0, [r7, #12]
 80001f0:	60b9      	str	r1, [r7, #8]
 80001f2:	607a      	str	r2, [r7, #4]
	Fls_eJobResult = (FLS_JobResultType)FLS_JOB_FAILED;
 80001f4:	4b08      	ldr	r3, [pc, #32]	; (8000218 <Fls_Read+0x30>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	701a      	strb	r2, [r3, #0]

    Fls_eJobResult = Fls_IPW_Read(SourceAddress, Length, TargetAddressPtr);
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	6879      	ldr	r1, [r7, #4]
 80001fe:	68f8      	ldr	r0, [r7, #12]
 8000200:	f000 fb62 	bl	80008c8 <Fls_IPW_Read>
 8000204:	4603      	mov	r3, r0
 8000206:	461a      	mov	r2, r3
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <Fls_Read+0x30>)
 800020a:	701a      	strb	r2, [r3, #0]

    return Fls_eJobResult;
 800020c:	4b02      	ldr	r3, [pc, #8]	; (8000218 <Fls_Read+0x30>)
 800020e:	781b      	ldrb	r3, [r3, #0]
}
 8000210:	4618      	mov	r0, r3
 8000212:	3710      	adds	r7, #16
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	20000028 	.word	0x20000028

0800021c <Fls_Write>:
FLS_JobResultType Fls_Write(uint32_t TargetAddress,
                            const uint32_t * SourceAddressPtr,
                            Fls_LengthType Length,
                            const boolean bAsynch
                                       )
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	70fb      	strb	r3, [r7, #3]
	Fls_eJobResult = (FLS_JobResultType)FLS_JOB_FAILED;
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <Fls_Write+0x34>)
 800022c:	2201      	movs	r2, #1
 800022e:	701a      	strb	r2, [r3, #0]

	Fls_eJobResult = Fls_IPW_SectorWrite(TargetAddress, Length, SourceAddressPtr, bAsynch);
 8000230:	78fb      	ldrb	r3, [r7, #3]
 8000232:	68ba      	ldr	r2, [r7, #8]
 8000234:	6879      	ldr	r1, [r7, #4]
 8000236:	68f8      	ldr	r0, [r7, #12]
 8000238:	f000 fb5a 	bl	80008f0 <Fls_IPW_SectorWrite>
 800023c:	4603      	mov	r3, r0
 800023e:	461a      	mov	r2, r3
 8000240:	4b03      	ldr	r3, [pc, #12]	; (8000250 <Fls_Write+0x34>)
 8000242:	701a      	strb	r2, [r3, #0]
    
    return Fls_eJobResult;
 8000244:	4b02      	ldr	r3, [pc, #8]	; (8000250 <Fls_Write+0x34>)
 8000246:	781b      	ldrb	r3, [r3, #0]
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000028 	.word	0x20000028

08000254 <Fls_Erase>:
 *
 */
FLS_JobResultType Fls_Erase(Fls_Sector  Sector, 
                         Fls_LengthType Length
                        )
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	71fb      	strb	r3, [r7, #7]
	Fls_eJobResult = (FLS_JobResultType)FLS_JOB_FAILED;
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <Fls_Erase+0x30>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]

	Fls_eJobResult = Fls_IPW_SectorErase(Sector, FALSE);
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f000 fb53 	bl	8000916 <Fls_IPW_SectorErase>
 8000270:	4603      	mov	r3, r0
 8000272:	461a      	mov	r2, r3
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <Fls_Erase+0x30>)
 8000276:	701a      	strb	r2, [r3, #0]

    return Fls_eJobResult;
 8000278:	4b02      	ldr	r3, [pc, #8]	; (8000284 <Fls_Erase+0x30>)
 800027a:	781b      	ldrb	r3, [r3, #0]
}
 800027c:	4618      	mov	r0, r3
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000028 	.word	0x20000028

08000288 <Flash_Read_Driver>:

FLS_JobResultType Flash_Read_Driver(volatile uint32_t u32StartAddr,
					uint32_t *pDestAddressPtr,
					uint32_t u322Length
					)
{
 8000288:	b480      	push	{r7}
 800028a:	b087      	sub	sp, #28
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
	FLS_JobResultType Fls_JobResult = FLS_JOB_OK;
 8000294:	2300      	movs	r3, #0
 8000296:	74fb      	strb	r3, [r7, #19]
	for(int i=0; i < u322Length; i++)
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]
 800029c:	e00e      	b.n	80002bc <Flash_Read_Driver+0x34>
	{
		*(uint32_t *)(pDestAddressPtr + i) = *(uint32_t*)(u32StartAddr +i*4);
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	009b      	lsls	r3, r3, #2
 80002a2:	461a      	mov	r2, r3
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	4413      	add	r3, r2
 80002a8:	4619      	mov	r1, r3
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	68ba      	ldr	r2, [r7, #8]
 80002b0:	4413      	add	r3, r2
 80002b2:	680a      	ldr	r2, [r1, #0]
 80002b4:	601a      	str	r2, [r3, #0]
	for(int i=0; i < u322Length; i++)
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	3301      	adds	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d8ec      	bhi.n	800029e <Flash_Read_Driver+0x16>

	}
	return Fls_JobResult;
 80002c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	371c      	adds	r7, #28
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
	...

080002d4 <FLASH_Write_Word>:

FLS_JobResultType FLASH_Write_Word(	volatile uint32_t u32StartAddr,
						const uint32_t u32Length,
						uint32_t *BufferWrite)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
	/* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH_CR register */
	while((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 80002e0:	bf00      	nop
 80002e2:	4b25      	ldr	r3, [pc, #148]	; (8000378 <FLASH_Write_Word+0xa4>)
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80002ee:	d0f8      	beq.n	80002e2 <FLASH_Write_Word+0xe>
	/* Check unlock sequences */
	if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK )
 80002f0:	4b21      	ldr	r3, [pc, #132]	; (8000378 <FLASH_Write_Word+0xa4>)
 80002f2:	691b      	ldr	r3, [r3, #16]
 80002f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80002f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002fc:	d101      	bne.n	8000302 <FLASH_Write_Word+0x2e>
	{
		Linh_FLASH_Unlock();
 80002fe:	f000 f8ab 	bl	8000458 <Linh_FLASH_Unlock>
	}

/* If the previous operation is completed, proceed to program the new data */
	CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000302:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <FLASH_Write_Word+0xa4>)
 8000304:	691b      	ldr	r3, [r3, #16]
 8000306:	4a1c      	ldr	r2, [pc, #112]	; (8000378 <FLASH_Write_Word+0xa4>)
 8000308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800030c:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_PSIZE_WORD;
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <FLASH_Write_Word+0xa4>)
 8000310:	691b      	ldr	r3, [r3, #16]
 8000312:	4a19      	ldr	r2, [pc, #100]	; (8000378 <FLASH_Write_Word+0xa4>)
 8000314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000318:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <FLASH_Write_Word+0xa4>)
 800031c:	691b      	ldr	r3, [r3, #16]
 800031e:	4a16      	ldr	r2, [pc, #88]	; (8000378 <FLASH_Write_Word+0xa4>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6113      	str	r3, [r2, #16]

	uint32_t u32WriteAddr = u32StartAddr;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	617b      	str	r3, [r7, #20]
	for(int i=0; i < u32Length; i++)
 800032a:	2300      	movs	r3, #0
 800032c:	613b      	str	r3, [r7, #16]
 800032e:	e011      	b.n	8000354 <FLASH_Write_Word+0x80>
	{
		u32WriteAddr += i;
 8000330:	693b      	ldr	r3, [r7, #16]
 8000332:	697a      	ldr	r2, [r7, #20]
 8000334:	4413      	add	r3, r2
 8000336:	617b      	str	r3, [r7, #20]
		*(__IO uint32_t*)(u32StartAddr +i*4) = *(uint32_t *)(BufferWrite + i);
 8000338:	693b      	ldr	r3, [r7, #16]
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	4413      	add	r3, r2
 8000340:	693a      	ldr	r2, [r7, #16]
 8000342:	0092      	lsls	r2, r2, #2
 8000344:	4611      	mov	r1, r2
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	440a      	add	r2, r1
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	6013      	str	r3, [r2, #0]
	for(int i=0; i < u32Length; i++)
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	3301      	adds	r3, #1
 8000352:	613b      	str	r3, [r7, #16]
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	68ba      	ldr	r2, [r7, #8]
 8000358:	429a      	cmp	r2, r3
 800035a:	d8e9      	bhi.n	8000330 <FLASH_Write_Word+0x5c>

	}
	
	while((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 800035c:	bf00      	nop
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <FLASH_Write_Word+0xa4>)
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800036a:	d0f8      	beq.n	800035e <FLASH_Write_Word+0x8a>
	return FLS_JOB_OK;
 800036c:	2300      	movs	r3, #0
}
 800036e:	4618      	mov	r0, r3
 8000370:	3718      	adds	r7, #24
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40023c00 	.word	0x40023c00

0800037c <Flash_ASync_Erase>:

FLS_JobResultType Flash_ASync_Erase(volatile uint8_t sector, uint32_t u32TimeOut)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	6039      	str	r1, [r7, #0]
 8000386:	71fb      	strb	r3, [r7, #7]

}
 8000388:	bf00      	nop
 800038a:	4618      	mov	r0, r3
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
	...

08000398 <Flash_Sync_Erase>:

FLS_JobResultType Flash_Sync_Erase(volatile uint8_t sector, uint32_t u32TimeOut)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	6039      	str	r1, [r7, #0]
 80003a2:	71fb      	strb	r3, [r7, #7]
	FLS_JobResultType eRetVal = FLS_JOB_OK;
 80003a4:	2300      	movs	r3, #0
 80003a6:	73fb      	strb	r3, [r7, #15]
	/* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH_CR register */
	while(((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && (u32TimeOut > 0U))
 80003a8:	e007      	b.n	80003ba <Flash_Sync_Erase+0x22>
	{
		/*  Wating for Bsy bit */
		u32TimeOut --;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	3b01      	subs	r3, #1
 80003ae:	603b      	str	r3, [r7, #0]
		if (u32TimeOut == 0)
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d101      	bne.n	80003ba <Flash_Sync_Erase+0x22>
		{
			//return FLASH_ERRORS_TIMEOUT;
			return FLS_JOB_FAILED;
 80003b6:	2301      	movs	r3, #1
 80003b8:	e048      	b.n	800044c <Flash_Sync_Erase+0xb4>
	while(((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && (u32TimeOut > 0U))
 80003ba:	4b26      	ldr	r3, [pc, #152]	; (8000454 <Flash_Sync_Erase+0xbc>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80003c6:	d102      	bne.n	80003ce <Flash_Sync_Erase+0x36>
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d1ed      	bne.n	80003aa <Flash_Sync_Erase+0x12>
		}
	}
	/* Check unlock sequences */
	if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK )
 80003ce:	4b21      	ldr	r3, [pc, #132]	; (8000454 <Flash_Sync_Erase+0xbc>)
 80003d0:	691b      	ldr	r3, [r3, #16]
 80003d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80003d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003da:	d101      	bne.n	80003e0 <Flash_Sync_Erase+0x48>
	{
		Linh_FLASH_Unlock();
 80003dc:	f000 f83c 	bl	8000458 <Linh_FLASH_Unlock>
	memory block you wish to erase (SNB) in the FLASH_CR register
		3. Set the STRT bit in the FLASH_CR register
		4. Wait for the BSY bit to be cleared
	 */
	//clear psize
	FLASH->CR &= ~(3 << 8);
 80003e0:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <Flash_Sync_Erase+0xbc>)
 80003e2:	691b      	ldr	r3, [r3, #16]
 80003e4:	4a1b      	ldr	r2, [pc, #108]	; (8000454 <Flash_Sync_Erase+0xbc>)
 80003e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003ea:	6113      	str	r3, [r2, #16]
	//erase 32 bit
	FLASH->CR |= FLASH_PSIZE_WORD;
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <Flash_Sync_Erase+0xbc>)
 80003ee:	691b      	ldr	r3, [r3, #16]
 80003f0:	4a18      	ldr	r2, [pc, #96]	; (8000454 <Flash_Sync_Erase+0xbc>)
 80003f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f6:	6113      	str	r3, [r2, #16]
	//clear SNB
	FLASH->CR &= ~(0x1F << 3);
 80003f8:	4b16      	ldr	r3, [pc, #88]	; (8000454 <Flash_Sync_Erase+0xbc>)
 80003fa:	691b      	ldr	r3, [r3, #16]
 80003fc:	4a15      	ldr	r2, [pc, #84]	; (8000454 <Flash_Sync_Erase+0xbc>)
 80003fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000402:	6113      	str	r3, [r2, #16]
	//set SER
	FLASH->CR |= 1 << 1;
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <Flash_Sync_Erase+0xbc>)
 8000406:	691b      	ldr	r3, [r3, #16]
 8000408:	4a12      	ldr	r2, [pc, #72]	; (8000454 <Flash_Sync_Erase+0xbc>)
 800040a:	f043 0302 	orr.w	r3, r3, #2
 800040e:	6113      	str	r3, [r2, #16]
	//clear sector
	FLASH->CR |= sector << 3;
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	00da      	lsls	r2, r3, #3
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <Flash_Sync_Erase+0xbc>)
 8000418:	691b      	ldr	r3, [r3, #16]
 800041a:	4611      	mov	r1, r2
 800041c:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <Flash_Sync_Erase+0xbc>)
 800041e:	430b      	orrs	r3, r1
 8000420:	6113      	str	r3, [r2, #16]
	FLASH->CR |= 1 << 16;
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <Flash_Sync_Erase+0xbc>)
 8000424:	691b      	ldr	r3, [r3, #16]
 8000426:	4a0b      	ldr	r2, [pc, #44]	; (8000454 <Flash_Sync_Erase+0xbc>)
 8000428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800042c:	6113      	str	r3, [r2, #16]
	while((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 800042e:	bf00      	nop
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <Flash_Sync_Erase+0xbc>)
 8000432:	68db      	ldr	r3, [r3, #12]
 8000434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800043c:	d0f8      	beq.n	8000430 <Flash_Sync_Erase+0x98>
	CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <Flash_Sync_Erase+0xbc>)
 8000440:	691b      	ldr	r3, [r3, #16]
 8000442:	4a04      	ldr	r2, [pc, #16]	; (8000454 <Flash_Sync_Erase+0xbc>)
 8000444:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000448:	6113      	str	r3, [r2, #16]

	return FLS_JOB_OK;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40023c00 	.word	0x40023c00

08000458 <Linh_FLASH_Unlock>:


void Linh_FLASH_Unlock(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
 //HAL_StatusTypeDef status = HAL_OK;

 if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <Linh_FLASH_Unlock+0x28>)
 800045e:	691b      	ldr	r3, [r3, #16]
 8000460:	2b00      	cmp	r3, #0
 8000462:	da07      	bge.n	8000474 <Linh_FLASH_Unlock+0x1c>
 {
   /* Authorize the FLASH Registers access */
   WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <Linh_FLASH_Unlock+0x28>)
 8000466:	4a07      	ldr	r2, [pc, #28]	; (8000484 <Linh_FLASH_Unlock+0x2c>)
 8000468:	605a      	str	r2, [r3, #4]
   WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <Linh_FLASH_Unlock+0x28>)
 800046c:	4a06      	ldr	r2, [pc, #24]	; (8000488 <Linh_FLASH_Unlock+0x30>)
 800046e:	605a      	str	r2, [r3, #4]

   /* Verify Flash is unlocked */
   if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <Linh_FLASH_Unlock+0x28>)
 8000472:	691b      	ldr	r3, [r3, #16]
     //status = HAL_ERROR;
   }
 }

 //return status;
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40023c00 	.word	0x40023c00
 8000484:	45670123 	.word	0x45670123
 8000488:	cdef89ab 	.word	0xcdef89ab

0800048c <GPIO_PeriClockControl>:
 /*
*	GPIO control
*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	460b      	mov	r3, r1
 8000496:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000498:	78fb      	ldrb	r3, [r7, #3]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d161      	bne.n	8000562 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a65      	ldr	r2, [pc, #404]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80004a6:	4b65      	ldr	r3, [pc, #404]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	4a64      	ldr	r2, [pc, #400]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6313      	str	r3, [r2, #48]	; 0x30
 80004b2:	e056      	b.n	8000562 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOB)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a62      	ldr	r2, [pc, #392]	; (8000640 <GPIO_PeriClockControl+0x1b4>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_PeriClockControl+0x3e>
		{
			GPIOB_PCLK_EN();
 80004bc:	4b5f      	ldr	r3, [pc, #380]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	4a5e      	ldr	r2, [pc, #376]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80004c2:	f043 0302 	orr.w	r3, r3, #2
 80004c6:	6313      	str	r3, [r2, #48]	; 0x30
 80004c8:	e04b      	b.n	8000562 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOC)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a5d      	ldr	r2, [pc, #372]	; (8000644 <GPIO_PeriClockControl+0x1b8>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_PeriClockControl+0x54>
		{
			GPIOC_PCLK_EN();
 80004d2:	4b5a      	ldr	r3, [pc, #360]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	4a59      	ldr	r2, [pc, #356]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	6313      	str	r3, [r2, #48]	; 0x30
 80004de:	e040      	b.n	8000562 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOD)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a59      	ldr	r2, [pc, #356]	; (8000648 <GPIO_PeriClockControl+0x1bc>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClockControl+0x6a>
		{
			GPIOD_PCLK_EN();
 80004e8:	4b54      	ldr	r3, [pc, #336]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ec:	4a53      	ldr	r2, [pc, #332]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80004ee:	f043 0308 	orr.w	r3, r3, #8
 80004f2:	6313      	str	r3, [r2, #48]	; 0x30
 80004f4:	e035      	b.n	8000562 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOE)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a54      	ldr	r2, [pc, #336]	; (800064c <GPIO_PeriClockControl+0x1c0>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClockControl+0x80>
		{
			GPIOE_PCLK_EN();
 80004fe:	4b4f      	ldr	r3, [pc, #316]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a4e      	ldr	r2, [pc, #312]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 8000504:	f043 0310 	orr.w	r3, r3, #16
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	e02a      	b.n	8000562 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOF)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a50      	ldr	r2, [pc, #320]	; (8000650 <GPIO_PeriClockControl+0x1c4>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d106      	bne.n	8000522 <GPIO_PeriClockControl+0x96>
		{
			GPIOF_PCLK_EN();
 8000514:	4b49      	ldr	r3, [pc, #292]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	4a48      	ldr	r2, [pc, #288]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 800051a:	f043 0320 	orr.w	r3, r3, #32
 800051e:	6313      	str	r3, [r2, #48]	; 0x30
 8000520:	e01f      	b.n	8000562 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOG)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a4b      	ldr	r2, [pc, #300]	; (8000654 <GPIO_PeriClockControl+0x1c8>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d106      	bne.n	8000538 <GPIO_PeriClockControl+0xac>
		{
			GPIOG_PCLK_EN();
 800052a:	4b44      	ldr	r3, [pc, #272]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a43      	ldr	r2, [pc, #268]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 8000530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	e014      	b.n	8000562 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOH)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a47      	ldr	r2, [pc, #284]	; (8000658 <GPIO_PeriClockControl+0x1cc>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d106      	bne.n	800054e <GPIO_PeriClockControl+0xc2>
		{
			GPIOH_PCLK_EN();
 8000540:	4b3e      	ldr	r3, [pc, #248]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000544:	4a3d      	ldr	r2, [pc, #244]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 8000546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800054a:	6313      	str	r3, [r2, #48]	; 0x30
 800054c:	e009      	b.n	8000562 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOI)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a42      	ldr	r2, [pc, #264]	; (800065c <GPIO_PeriClockControl+0x1d0>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d105      	bne.n	8000562 <GPIO_PeriClockControl+0xd6>
		{
			GPIOI_PCLK_EN();
 8000556:	4b39      	ldr	r3, [pc, #228]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a38      	ldr	r2, [pc, #224]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 800055c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}

	if(EnorDi == DISABLE)
 8000562:	78fb      	ldrb	r3, [r7, #3]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d161      	bne.n	800062c <GPIO_PeriClockControl+0x1a0>
	{
		if(pGPIOx == GPIOA)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a33      	ldr	r2, [pc, #204]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d106      	bne.n	800057e <GPIO_PeriClockControl+0xf2>
		{
			GPIOA_PCLK_DIS();
 8000570:	4b32      	ldr	r3, [pc, #200]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000574:	4a31      	ldr	r2, [pc, #196]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 8000576:	f023 0301 	bic.w	r3, r3, #1
 800057a:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DIS();
		}
	}
}
 800057c:	e056      	b.n	800062c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOB)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a2f      	ldr	r2, [pc, #188]	; (8000640 <GPIO_PeriClockControl+0x1b4>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d106      	bne.n	8000594 <GPIO_PeriClockControl+0x108>
			GPIOB_PCLK_DIS();
 8000586:	4b2d      	ldr	r3, [pc, #180]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a2c      	ldr	r2, [pc, #176]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 800058c:	f023 0302 	bic.w	r3, r3, #2
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000592:	e04b      	b.n	800062c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOC)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a2b      	ldr	r2, [pc, #172]	; (8000644 <GPIO_PeriClockControl+0x1b8>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d106      	bne.n	80005aa <GPIO_PeriClockControl+0x11e>
			GPIOC_PCLK_DIS();
 800059c:	4b27      	ldr	r3, [pc, #156]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	4a26      	ldr	r2, [pc, #152]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80005a2:	f023 0304 	bic.w	r3, r3, #4
 80005a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a8:	e040      	b.n	800062c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOD)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a26      	ldr	r2, [pc, #152]	; (8000648 <GPIO_PeriClockControl+0x1bc>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d106      	bne.n	80005c0 <GPIO_PeriClockControl+0x134>
			GPIOD_PCLK_DIS();
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a21      	ldr	r2, [pc, #132]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80005b8:	f023 0308 	bic.w	r3, r3, #8
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005be:	e035      	b.n	800062c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOE)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a22      	ldr	r2, [pc, #136]	; (800064c <GPIO_PeriClockControl+0x1c0>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d106      	bne.n	80005d6 <GPIO_PeriClockControl+0x14a>
			GPIOE_PCLK_DIS();
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80005ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80005ce:	f023 0310 	bic.w	r3, r3, #16
 80005d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d4:	e02a      	b.n	800062c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOF)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a1d      	ldr	r2, [pc, #116]	; (8000650 <GPIO_PeriClockControl+0x1c4>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d106      	bne.n	80005ec <GPIO_PeriClockControl+0x160>
			GPIOF_PCLK_DIS();
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a16      	ldr	r2, [pc, #88]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80005e4:	f023 0320 	bic.w	r3, r3, #32
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ea:	e01f      	b.n	800062c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOG)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <GPIO_PeriClockControl+0x1c8>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <GPIO_PeriClockControl+0x176>
			GPIOG_PCLK_DIS();
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	4a10      	ldr	r2, [pc, #64]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80005fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000600:	e014      	b.n	800062c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOH)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <GPIO_PeriClockControl+0x1cc>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <GPIO_PeriClockControl+0x18c>
			GPIOH_PCLK_DIS();
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 8000610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000616:	e009      	b.n	800062c <GPIO_PeriClockControl+0x1a0>
		}else if(pGPIOx == GPIOI)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a10      	ldr	r2, [pc, #64]	; (800065c <GPIO_PeriClockControl+0x1d0>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d105      	bne.n	800062c <GPIO_PeriClockControl+0x1a0>
			GPIOI_PCLK_DIS();
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	4a05      	ldr	r2, [pc, #20]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 8000626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800062a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	40020000 	.word	0x40020000
 800063c:	40023800 	.word	0x40023800
 8000640:	40020400 	.word	0x40020400
 8000644:	40020800 	.word	0x40020800
 8000648:	40020c00 	.word	0x40020c00
 800064c:	40021000 	.word	0x40021000
 8000650:	40021400 	.word	0x40021400
 8000654:	40021800 	.word	0x40021800
 8000658:	40021c00 	.word	0x40021c00
 800065c:	40022000 	.word	0x40022000

08000660 <GPIO_Init>:



void GPIO_Init(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *GPIO_PinConfig)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	uint32_t temp;
	//enable GPIOx clock
	GPIO_PeriClockControl(pGPIOx, ENABLE);
 800066a:	2101      	movs	r1, #1
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff0d 	bl	800048c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(GPIO_PinConfig->GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	785b      	ldrb	r3, [r3, #1]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d81a      	bhi.n	80006b0 <GPIO_Init+0x50>
	{
		/*the none interrupt mode*/
		temp = ((uint32_t)GPIO_PinConfig->GPIO_PinMode) << (2 * GPIO_PinConfig->GPIO_PinNumber);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	461a      	mov	r2, r3
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	60fb      	str	r3, [r7, #12]
		pGPIOx->MODER &= ~((uint32_t)0x3 << (2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber));	//clear 2 bit
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	2103      	movs	r1, #3
 8000698:	fa01 f303 	lsl.w	r3, r1, r3
 800069c:	43db      	mvns	r3, r3
 800069e:	401a      	ands	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	601a      	str	r2, [r3, #0]
		pGPIOx->MODER |= temp;		//gan gia tri 2 bit chon che do
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	431a      	orrs	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	601a      	str	r2, [r3, #0]
	{
		/*with interrupt mode- chua viet duoc :))*/
	}

	//2. configure the speed
	temp = ((uint32_t)GPIO_PinConfig->GPIO_Speed)<<(2 * GPIO_PinConfig->GPIO_PinNumber);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	789b      	ldrb	r3, [r3, #2]
 80006b4:	461a      	mov	r2, r3
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	60fb      	str	r3, [r7, #12]
	pGPIOx->OSPEED &= ~((uint32_t)0x3 << 2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber);			//clear 2 bit
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	689a      	ldr	r2, [r3, #8]
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	2103      	movs	r1, #3
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	43db      	mvns	r3, r3
 80006d4:	401a      	ands	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	609a      	str	r2, [r3, #8]
	pGPIOx->OSPEED |= temp;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	431a      	orrs	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (GPIO_PinConfig->GPIO_PuPdControl) << (2 * GPIO_PinConfig->GPIO_PinNumber);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	78db      	ldrb	r3, [r3, #3]
 80006ea:	461a      	mov	r2, r3
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	60fb      	str	r3, [r7, #12]
	pGPIOx->PUPDR &= ~((uint32_t)0x3 << (2 * (uint32_t)GPIO_PinConfig->GPIO_PinNumber));		//clear 2 bit
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	68da      	ldr	r2, [r3, #12]
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	2103      	movs	r1, #3
 8000704:	fa01 f303 	lsl.w	r3, r1, r3
 8000708:	43db      	mvns	r3, r3
 800070a:	401a      	ands	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	60da      	str	r2, [r3, #12]
	pGPIOx->PUPDR |= temp;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	431a      	orrs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	60da      	str	r2, [r3, #12]

	//4. configure the otyper
	temp = (GPIO_PinConfig->GPIOOTyper) << (GPIO_PinConfig->GPIO_PinNumber);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	461a      	mov	r2, r3
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	60fb      	str	r3, [r7, #12]
	pGPIOx->OTYPER &= ~((uint32_t)0x1 << (uint32_t)(GPIO_PinConfig->GPIO_PinNumber));			//clear 1 bit
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685a      	ldr	r2, [r3, #4]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	2301      	movs	r3, #1
 8000738:	408b      	lsls	r3, r1
 800073a:	43db      	mvns	r3, r3
 800073c:	401a      	ands	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	605a      	str	r2, [r3, #4]
	pGPIOx->OTYPER |= temp;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(GPIO_PinConfig->GPIO_PinMode == GPIO_MODE_ALTFN)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	785b      	ldrb	r3, [r3, #1]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d12d      	bne.n	80007b2 <GPIO_Init+0x152>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;
		/*	pin0-7:AFR[0]	;	pin8-15:AFR[1]	*/
		temp1 = GPIO_PinConfig->GPIO_PinNumber / 8;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	08db      	lsrs	r3, r3, #3
 800075c:	72fb      	strb	r3, [r7, #11]
		temp2 = GPIO_PinConfig->GPIO_PinNumber  % 8;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	72bb      	strb	r3, [r7, #10]
		pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); 										//clear 4 bit
 8000768:	7afa      	ldrb	r2, [r7, #11]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3208      	adds	r2, #8
 800076e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000772:	7aba      	ldrb	r2, [r7, #10]
 8000774:	0092      	lsls	r2, r2, #2
 8000776:	210f      	movs	r1, #15
 8000778:	fa01 f202 	lsl.w	r2, r1, r2
 800077c:	43d2      	mvns	r2, r2
 800077e:	4611      	mov	r1, r2
 8000780:	7afa      	ldrb	r2, [r7, #11]
 8000782:	4019      	ands	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3208      	adds	r2, #8
 8000788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOx->AFR[temp1] |= (GPIO_PinConfig->GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800078c:	7afa      	ldrb	r2, [r7, #11]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3208      	adds	r2, #8
 8000792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	7952      	ldrb	r2, [r2, #5]
 800079a:	4611      	mov	r1, r2
 800079c:	7aba      	ldrb	r2, [r7, #10]
 800079e:	0092      	lsls	r2, r2, #2
 80007a0:	fa01 f202 	lsl.w	r2, r1, r2
 80007a4:	4611      	mov	r1, r2
 80007a6:	7afa      	ldrb	r2, [r7, #11]
 80007a8:	4319      	orrs	r1, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3208      	adds	r2, #8
 80007ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <GPIO_TogglePin>:



void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, GPIO_PIN_NUMBER PinNumber)
{
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	460b      	mov	r3, r1
 80007c4:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR  ^= ( 1 << PinNumber);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	78fa      	ldrb	r2, [r7, #3]
 80007cc:	2101      	movs	r1, #1
 80007ce:	fa01 f202 	lsl.w	r2, r1, r2
 80007d2:	405a      	eors	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	615a      	str	r2, [r3, #20]
	}else
	{
		pGPIOx->ODR |= 1<<PinNumber;
	}
	*/
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <main>:
void GPIO_Lib_Config();
uint32_t s;
uint32_t BufferWrite[3] = {0x1,0x2,0x3};
uint32_t *BufferRead;
int main()
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	GPIO_Lib_Config();
 80007e8:	f000 f854 	bl	8000894 <GPIO_Lib_Config>
	s = Fls_Read((uint32_t)SECTOR_3, &BufferRead, 3);
 80007ec:	2203      	movs	r2, #3
 80007ee:	4912      	ldr	r1, [pc, #72]	; (8000838 <main+0x54>)
 80007f0:	4812      	ldr	r0, [pc, #72]	; (800083c <main+0x58>)
 80007f2:	f7ff fcf9 	bl	80001e8 <Fls_Read>
 80007f6:	4603      	mov	r3, r0
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <main+0x5c>)
 80007fc:	601a      	str	r2, [r3, #0]
	Fls_Erase(Fls_Sector_3, 1);
 80007fe:	2101      	movs	r1, #1
 8000800:	2003      	movs	r0, #3
 8000802:	f7ff fd27 	bl	8000254 <Fls_Erase>
	Fls_Write((uint32_t)0x0800C000, BufferWrite, 3, FALSE);
 8000806:	2300      	movs	r3, #0
 8000808:	2203      	movs	r2, #3
 800080a:	490e      	ldr	r1, [pc, #56]	; (8000844 <main+0x60>)
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <main+0x58>)
 800080e:	f7ff fd05 	bl	800021c <Fls_Write>
	s = Fls_Read((uint32_t)SECTOR_3, &BufferRead, 3);
 8000812:	2203      	movs	r2, #3
 8000814:	4908      	ldr	r1, [pc, #32]	; (8000838 <main+0x54>)
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <main+0x58>)
 8000818:	f7ff fce6 	bl	80001e8 <Fls_Read>
 800081c:	4603      	mov	r3, r0
 800081e:	461a      	mov	r2, r3
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <main+0x5c>)
 8000822:	601a      	str	r2, [r3, #0]
	while(1)
	{
		GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000824:	210d      	movs	r1, #13
 8000826:	4808      	ldr	r0, [pc, #32]	; (8000848 <main+0x64>)
 8000828:	f7ff ffc7 	bl	80007ba <GPIO_TogglePin>
		Systick_Delay_ms(1000);
 800082c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000830:	f000 f80c 	bl	800084c <Systick_Delay_ms>
		GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000834:	e7f6      	b.n	8000824 <main+0x40>
 8000836:	bf00      	nop
 8000838:	2000002c 	.word	0x2000002c
 800083c:	0800c000 	.word	0x0800c000
 8000840:	20000030 	.word	0x20000030
 8000844:	20000000 	.word	0x20000000
 8000848:	40020c00 	.word	0x40020c00

0800084c <Systick_Delay_ms>:
	}
}

void Systick_Delay_ms(uint32_t u32Delay)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	while(u32Delay)
 8000854:	e013      	b.n	800087e <Systick_Delay_ms+0x32>
	{
		/*Cortex System timer clock max 168/8 MHz*/
		Systick->RVR = 21000-1;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <Systick_Delay_ms+0x44>)
 8000858:	f245 2207 	movw	r2, #20999	; 0x5207
 800085c:	605a      	str	r2, [r3, #4]
		Systick->CVR = 0;
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <Systick_Delay_ms+0x44>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]

		/*no exception*/
		/*clear counter flag*/
		/*enable counter*/
		/*processor clock - 72M*/
		Systick->CSR = 0x05;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <Systick_Delay_ms+0x44>)
 8000866:	2205      	movs	r2, #5
 8000868:	601a      	str	r2, [r3, #0]

		while(((Systick->CSR) & (1<<16)) == 0)
 800086a:	bf00      	nop
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <Systick_Delay_ms+0x44>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000874:	2b00      	cmp	r3, #0
 8000876:	d0f9      	beq.n	800086c <Systick_Delay_ms+0x20>
		{

		}
		--u32Delay;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	607b      	str	r3, [r7, #4]
	while(u32Delay)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1e8      	bne.n	8000856 <Systick_Delay_ms+0xa>
	}
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000e010 	.word	0xe000e010

08000894 <GPIO_Lib_Config>:

void GPIO_Lib_Config()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
	GPIO_PeriClockControl(GPIOD, ENABLE);
 800089a:	2101      	movs	r1, #1
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <GPIO_Lib_Config+0x30>)
 800089e:	f7ff fdf5 	bl	800048c <GPIO_PeriClockControl>

	GPIO_PinConfig_t GPIO_InitStrcture;
	GPIO_InitStrcture.GPIO_PinMode = GPIO_MODE_OUT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	707b      	strb	r3, [r7, #1]
	GPIO_InitStrcture.GPIO_PinNumber = GPIO_PIN_13;
 80008a6:	230d      	movs	r3, #13
 80008a8:	703b      	strb	r3, [r7, #0]
	GPIO_InitStrcture.GPIO_Speed = GPIO_SPEED_MEDIUM;
 80008aa:	2301      	movs	r3, #1
 80008ac:	70bb      	strb	r3, [r7, #2]
	GPIO_InitStrcture.GPIO_PuPdControl = GPIO_PullUp;
 80008ae:	2301      	movs	r3, #1
 80008b0:	70fb      	strb	r3, [r7, #3]

	GPIO_Init(GPIOD, &GPIO_InitStrcture);
 80008b2:	463b      	mov	r3, r7
 80008b4:	4619      	mov	r1, r3
 80008b6:	4803      	ldr	r0, [pc, #12]	; (80008c4 <GPIO_Lib_Config+0x30>)
 80008b8:	f7ff fed2 	bl	8000660 <GPIO_Init>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40020c00 	.word	0x40020c00

080008c8 <Fls_IPW_Read>:
*/
FLS_JobResultType Fls_IPW_Read(const uint32_t u32StartAddr,
                                      const uint32_t u32Length,
                                      const uint8_t *pJobDataSrcPtr
                                     )
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	FLS_JobResultType eLldRetVal = FLS_JOB_FAILED;
 80008d4:	2301      	movs	r3, #1
 80008d6:	75fb      	strb	r3, [r7, #23]

    /* Decide the IP used: internal flash or external QSPI */
#if (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED)
	eLldRetVal = Flash_Read_Driver(u32StartAddr, pJobDataSrcPtr, u32Length);
 80008d8:	68ba      	ldr	r2, [r7, #8]
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f7ff fcd3 	bl	8000288 <Flash_Read_Driver>
 80008e2:	4603      	mov	r3, r0
 80008e4:	75fb      	strb	r3, [r7, #23]
#endif /* (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED) */

    return eLldRetVal;
 80008e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <Fls_IPW_SectorWrite>:
FLS_JobResultType Fls_IPW_SectorWrite(const uint32_t u32StartAddr,
                                      const uint32_t u32Length,
                                      const uint8_t *pJobDataSrcPtr,
                                      const boolean bAsynch
                                     )
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
 80008fc:	70fb      	strb	r3, [r7, #3]
	FLS_JobResultType eLldRetVal = FLS_JOB_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	75fb      	strb	r3, [r7, #23]

    /* Decide the IP used: internal flash or external QSPI */
#if (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED)
        FLASH_Write_Word(u32StartAddr, u32Length, pJobDataSrcPtr);
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	68f8      	ldr	r0, [r7, #12]
 8000908:	f7ff fce4 	bl	80002d4 <FLASH_Write_Word>
#endif /* (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED) */

    return eLldRetVal;
 800090c:	7dfb      	ldrb	r3, [r7, #23]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <Fls_IPW_SectorErase>:
* @implements     Fls_IPW_SectorErase_Activity
*/
FLS_JobResultType Fls_IPW_SectorErase(const Fls_Sector  Sector,
                                      boolean bAsynch
                                     )
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	460a      	mov	r2, r1
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	4613      	mov	r3, r2
 8000924:	71bb      	strb	r3, [r7, #6]
    FLS_JobResultType eLldRetVal = FLS_JOB_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]
    bAsynch = FALSE;
 800092a:	2300      	movs	r3, #0
 800092c:	71bb      	strb	r3, [r7, #6]

    /* Decide the IP used: internal flash or external QSPI */
#if (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED)
    if (FALSE == bAsynch)
 800092e:	79bb      	ldrb	r3, [r7, #6]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d107      	bne.n	8000944 <Fls_IPW_SectorErase+0x2e>
    {
        eLldRetVal = Flash_Sync_Erase(Sector, 100);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2164      	movs	r1, #100	; 0x64
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fd2d 	bl	8000398 <Flash_Sync_Erase>
 800093e:	4603      	mov	r3, r0
 8000940:	73fb      	strb	r3, [r7, #15]
 8000942:	e006      	b.n	8000952 <Fls_IPW_SectorErase+0x3c>
    }
	else
	{
		eLldRetVal = Flash_ASync_Erase(Sector, 100);
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2164      	movs	r1, #100	; 0x64
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fd17 	bl	800037c <Flash_ASync_Erase>
 800094e:	4603      	mov	r3, r0
 8000950:	73fb      	strb	r3, [r7, #15]
	}
#endif /* (STD_ON == FLS_INTERNAL_SECTORS_CONFIGURED) */

    return eLldRetVal;
 8000952:	7bfb      	ldrb	r3, [r7, #15]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800095e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000960:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <LoopForever+0x6>)
  ldr r1, =_edata
 8000966:	490d      	ldr	r1, [pc, #52]	; (800099c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000968:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <LoopForever+0xe>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800097c:	4c0a      	ldr	r4, [pc, #40]	; (80009a8 <LoopForever+0x16>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800098a:	f000 f811 	bl	80009b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098e:	f7ff ff29 	bl	80007e4 <main>

08000992 <LoopForever>:

LoopForever:
    b LoopForever
 8000992:	e7fe      	b.n	8000992 <LoopForever>
  ldr   r0, =_estack
 8000994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a0:	08000a18 	.word	0x08000a18
  ldr r2, =_sbss
 80009a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a8:	20000034 	.word	0x20000034

080009ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC_IRQHandler>
	...

080009b0 <__libc_init_array>:
 80009b0:	b570      	push	{r4, r5, r6, lr}
 80009b2:	4e0d      	ldr	r6, [pc, #52]	; (80009e8 <__libc_init_array+0x38>)
 80009b4:	4c0d      	ldr	r4, [pc, #52]	; (80009ec <__libc_init_array+0x3c>)
 80009b6:	1ba4      	subs	r4, r4, r6
 80009b8:	10a4      	asrs	r4, r4, #2
 80009ba:	2500      	movs	r5, #0
 80009bc:	42a5      	cmp	r5, r4
 80009be:	d109      	bne.n	80009d4 <__libc_init_array+0x24>
 80009c0:	4e0b      	ldr	r6, [pc, #44]	; (80009f0 <__libc_init_array+0x40>)
 80009c2:	4c0c      	ldr	r4, [pc, #48]	; (80009f4 <__libc_init_array+0x44>)
 80009c4:	f000 f818 	bl	80009f8 <_init>
 80009c8:	1ba4      	subs	r4, r4, r6
 80009ca:	10a4      	asrs	r4, r4, #2
 80009cc:	2500      	movs	r5, #0
 80009ce:	42a5      	cmp	r5, r4
 80009d0:	d105      	bne.n	80009de <__libc_init_array+0x2e>
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009d8:	4798      	blx	r3
 80009da:	3501      	adds	r5, #1
 80009dc:	e7ee      	b.n	80009bc <__libc_init_array+0xc>
 80009de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009e2:	4798      	blx	r3
 80009e4:	3501      	adds	r5, #1
 80009e6:	e7f2      	b.n	80009ce <__libc_init_array+0x1e>
 80009e8:	08000a10 	.word	0x08000a10
 80009ec:	08000a10 	.word	0x08000a10
 80009f0:	08000a10 	.word	0x08000a10
 80009f4:	08000a14 	.word	0x08000a14

080009f8 <_init>:
 80009f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009fa:	bf00      	nop
 80009fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009fe:	bc08      	pop	{r3}
 8000a00:	469e      	mov	lr, r3
 8000a02:	4770      	bx	lr

08000a04 <_fini>:
 8000a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a06:	bf00      	nop
 8000a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a0a:	bc08      	pop	{r3}
 8000a0c:	469e      	mov	lr, r3
 8000a0e:	4770      	bx	lr
